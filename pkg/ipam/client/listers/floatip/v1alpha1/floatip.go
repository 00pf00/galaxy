/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "git.code.oa.com/gaiastack/galaxy/pkg/ipam/apis/floatip/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FloatIpLister helps list FloatIps.
type FloatIpLister interface {
	// List lists all FloatIps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FloatIp, err error)
	// FloatIps returns an object that can list and get FloatIps.
	FloatIps(namespace string) FloatIpNamespaceLister
	FloatIpListerExpansion
}

// floatIpLister implements the FloatIpLister interface.
type floatIpLister struct {
	indexer cache.Indexer
}

// NewFloatIpLister returns a new FloatIpLister.
func NewFloatIpLister(indexer cache.Indexer) FloatIpLister {
	return &floatIpLister{indexer: indexer}
}

// List lists all FloatIps in the indexer.
func (s *floatIpLister) List(selector labels.Selector) (ret []*v1alpha1.FloatIp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FloatIp))
	})
	return ret, err
}

// FloatIps returns an object that can list and get FloatIps.
func (s *floatIpLister) FloatIps(namespace string) FloatIpNamespaceLister {
	return floatIpNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FloatIpNamespaceLister helps list and get FloatIps.
type FloatIpNamespaceLister interface {
	// List lists all FloatIps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FloatIp, err error)
	// Get retrieves the FloatIp from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FloatIp, error)
	FloatIpNamespaceListerExpansion
}

// floatIpNamespaceLister implements the FloatIpNamespaceLister
// interface.
type floatIpNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FloatIps in the indexer for a given namespace.
func (s floatIpNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FloatIp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FloatIp))
	})
	return ret, err
}

// Get retrieves the FloatIp from the indexer for a given namespace and name.
func (s floatIpNamespaceLister) Get(name string) (*v1alpha1.FloatIp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("floatip"), name)
	}
	return obj.(*v1alpha1.FloatIp), nil
}

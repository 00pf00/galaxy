/*
 * Tencent is pleased to support the open source community by making TKEStack available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ip_provider.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AssignIPRequest struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	IPAddress            string   `protobuf:"bytes,2,opt,name=IP_address,json=IPAddress,proto3" json:"IP_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignIPRequest) Reset()         { *m = AssignIPRequest{} }
func (m *AssignIPRequest) String() string { return proto.CompactTextString(m) }
func (*AssignIPRequest) ProtoMessage()    {}
func (*AssignIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ip_provider_defe85ad8c429650, []int{0}
}
func (m *AssignIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignIPRequest.Unmarshal(m, b)
}
func (m *AssignIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignIPRequest.Marshal(b, m, deterministic)
}
func (dst *AssignIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignIPRequest.Merge(dst, src)
}
func (m *AssignIPRequest) XXX_Size() int {
	return xxx_messageInfo_AssignIPRequest.Size(m)
}
func (m *AssignIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignIPRequest proto.InternalMessageInfo

func (m *AssignIPRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AssignIPRequest) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

type AssignIPReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignIPReply) Reset()         { *m = AssignIPReply{} }
func (m *AssignIPReply) String() string { return proto.CompactTextString(m) }
func (*AssignIPReply) ProtoMessage()    {}
func (*AssignIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ip_provider_defe85ad8c429650, []int{1}
}
func (m *AssignIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignIPReply.Unmarshal(m, b)
}
func (m *AssignIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignIPReply.Marshal(b, m, deterministic)
}
func (dst *AssignIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignIPReply.Merge(dst, src)
}
func (m *AssignIPReply) XXX_Size() int {
	return xxx_messageInfo_AssignIPReply.Size(m)
}
func (m *AssignIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_AssignIPReply proto.InternalMessageInfo

func (m *AssignIPReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AssignIPReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UnAssignIPRequest struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	IPAddress            string   `protobuf:"bytes,2,opt,name=IP_address,json=IPAddress,proto3" json:"IP_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnAssignIPRequest) Reset()         { *m = UnAssignIPRequest{} }
func (m *UnAssignIPRequest) String() string { return proto.CompactTextString(m) }
func (*UnAssignIPRequest) ProtoMessage()    {}
func (*UnAssignIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ip_provider_defe85ad8c429650, []int{2}
}
func (m *UnAssignIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnAssignIPRequest.Unmarshal(m, b)
}
func (m *UnAssignIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnAssignIPRequest.Marshal(b, m, deterministic)
}
func (dst *UnAssignIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnAssignIPRequest.Merge(dst, src)
}
func (m *UnAssignIPRequest) XXX_Size() int {
	return xxx_messageInfo_UnAssignIPRequest.Size(m)
}
func (m *UnAssignIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnAssignIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnAssignIPRequest proto.InternalMessageInfo

func (m *UnAssignIPRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UnAssignIPRequest) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

type UnAssignIPReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnAssignIPReply) Reset()         { *m = UnAssignIPReply{} }
func (m *UnAssignIPReply) String() string { return proto.CompactTextString(m) }
func (*UnAssignIPReply) ProtoMessage()    {}
func (*UnAssignIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ip_provider_defe85ad8c429650, []int{3}
}
func (m *UnAssignIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnAssignIPReply.Unmarshal(m, b)
}
func (m *UnAssignIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnAssignIPReply.Marshal(b, m, deterministic)
}
func (dst *UnAssignIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnAssignIPReply.Merge(dst, src)
}
func (m *UnAssignIPReply) XXX_Size() int {
	return xxx_messageInfo_UnAssignIPReply.Size(m)
}
func (m *UnAssignIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UnAssignIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_UnAssignIPReply proto.InternalMessageInfo

func (m *UnAssignIPReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UnAssignIPReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*AssignIPRequest)(nil), "rpc.AssignIPRequest")
	proto.RegisterType((*AssignIPReply)(nil), "rpc.AssignIPReply")
	proto.RegisterType((*UnAssignIPRequest)(nil), "rpc.UnAssignIPRequest")
	proto.RegisterType((*UnAssignIPReply)(nil), "rpc.UnAssignIPReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IPProviderServiceClient is the client API for IPProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPProviderServiceClient interface {
	AssignIP(ctx context.Context, in *AssignIPRequest, opts ...grpc.CallOption) (*AssignIPReply, error)
	UnAssignIP(ctx context.Context, in *UnAssignIPRequest, opts ...grpc.CallOption) (*UnAssignIPReply, error)
}

type iPProviderServiceClient struct {
	cc *grpc.ClientConn
}

func NewIPProviderServiceClient(cc *grpc.ClientConn) IPProviderServiceClient {
	return &iPProviderServiceClient{cc}
}

func (c *iPProviderServiceClient) AssignIP(ctx context.Context, in *AssignIPRequest, opts ...grpc.CallOption) (*AssignIPReply, error) {
	out := new(AssignIPReply)
	err := c.cc.Invoke(ctx, "/rpc.IPProviderService/AssignIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPProviderServiceClient) UnAssignIP(ctx context.Context, in *UnAssignIPRequest, opts ...grpc.CallOption) (*UnAssignIPReply, error) {
	out := new(UnAssignIPReply)
	err := c.cc.Invoke(ctx, "/rpc.IPProviderService/UnAssignIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPProviderServiceServer is the server API for IPProviderService service.
type IPProviderServiceServer interface {
	AssignIP(context.Context, *AssignIPRequest) (*AssignIPReply, error)
	UnAssignIP(context.Context, *UnAssignIPRequest) (*UnAssignIPReply, error)
}

func RegisterIPProviderServiceServer(s *grpc.Server, srv IPProviderServiceServer) {
	s.RegisterService(&_IPProviderService_serviceDesc, srv)
}

func _IPProviderService_AssignIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPProviderServiceServer).AssignIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IPProviderService/AssignIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPProviderServiceServer).AssignIP(ctx, req.(*AssignIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPProviderService_UnAssignIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAssignIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPProviderServiceServer).UnAssignIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IPProviderService/UnAssignIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPProviderServiceServer).UnAssignIP(ctx, req.(*UnAssignIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.IPProviderService",
	HandlerType: (*IPProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignIP",
			Handler:    _IPProviderService_AssignIP_Handler,
		},
		{
			MethodName: "UnAssignIP",
			Handler:    _IPProviderService_UnAssignIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ip_provider.proto",
}

func init() { proto.RegisterFile("ip_provider.proto", fileDescriptor_ip_provider_defe85ad8c429650) }

var fileDescriptor_ip_provider_defe85ad8c429650 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x2c, 0x88, 0x2f,
	0x28, 0xca, 0x2f, 0xcb, 0x4c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e,
	0x2a, 0x48, 0x56, 0xf2, 0xe5, 0xe2, 0x77, 0x2c, 0x2e, 0xce, 0x4c, 0xcf, 0xf3, 0x0c, 0x08, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe6, 0xe2, 0xcc, 0xcb, 0x4f, 0x49, 0x8d, 0xcf, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x00, 0x09, 0xf8, 0x25, 0xe6, 0xa6,
	0x0a, 0xc9, 0x72, 0x71, 0x79, 0x06, 0xc4, 0x27, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x4b, 0x30,
	0x81, 0x65, 0x39, 0x3d, 0x03, 0x1c, 0x21, 0x02, 0x4a, 0xd6, 0x5c, 0xbc, 0x08, 0xe3, 0x0a, 0x72,
	0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x8b, 0x4b, 0x93, 0x93, 0x41, 0x8a, 0x41, 0x46, 0x71, 0x04, 0xc1,
	0xb8, 0x42, 0x02, 0x5c, 0xcc, 0xb9, 0xc5, 0xe9, 0x50, 0x23, 0x40, 0x4c, 0x25, 0x7f, 0x2e, 0xc1,
	0xd0, 0x3c, 0x6a, 0xba, 0xc6, 0x96, 0x8b, 0x1f, 0xd9, 0x40, 0x12, 0xdd, 0x63, 0xd4, 0xc9, 0xc8,
	0x25, 0xe8, 0x19, 0x10, 0x00, 0x0d, 0xb5, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x33,
	0x2e, 0x0e, 0x98, 0x91, 0x42, 0x22, 0x7a, 0x45, 0x05, 0xc9, 0x7a, 0x68, 0x4e, 0x96, 0x12, 0x42,
	0x13, 0x2d, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0xb2, 0xe1, 0xe2, 0x42, 0x38, 0x46, 0x48, 0x0c, 0xac,
	0x06, 0xc3, 0xbb, 0x52, 0x22, 0x18, 0xe2, 0x60, 0xdd, 0x49, 0x6c, 0xe0, 0x38, 0x33, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x6a, 0x5b, 0xc9, 0x86, 0xc8, 0x01, 0x00, 0x00,
}

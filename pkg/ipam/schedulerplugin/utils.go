package schedulerplugin

import (
	"fmt"
	"strings"

	appv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
)

// resolveDeploymentName return deployment name if pod is generated by deployment
func resolveDeploymentName(pod *corev1.Pod) string {
	if len(pod.OwnerReferences) == 1 && pod.OwnerReferences[0].Kind == "ReplicaSet" {
		// assume pod belong to deployment for convenient
		// can't parse deployment from pod name directly if deployment name is nearly 63 bytes
		// e.g. if deployment name is dp1234567890dp1234567890dp1234567890dp1234567890dp1234567890dp1 (63 bytes)
		// ReplicaSet name is dp1234567890dp1234567890dp1234567890dp1234567890dp1234567890dp1-69fd8dbc5c (74 bytes)
		// pod name is generated like dp1234567890dp1234567890dp1234567890dp1234567890dp1234567848p74
		lastIndex := strings.LastIndex(pod.OwnerReferences[0].Name, "-")
		if lastIndex == -1 {
			return ""
		}
		return pod.OwnerReferences[0].Name[:lastIndex]
	}
	return ""
}

// resolveStatefulsetName return statefulset name if pod is generated by statefulset
func resolveStatefulsetName(pod *corev1.Pod) string {
	if len(pod.OwnerReferences) == 1 && pod.OwnerReferences[0].Kind == "StatefulSet" {
		return pod.OwnerReferences[0].Name
	}
	return ""
}

type keyObj struct {
	// stores the key format in database
	// for deployment dp_namespace_deploymentName_podName,
	// for pool pool__poolName_dp_namespace_deploymentName_podName, for statefulset sts_namespace_statefulsetName_podName
	// If deployment name is 63 bytes, e.g. dp1234567890dp1234567890dp1234567890dp1234567890dp1234567890dp1
	// deployment pod name will be 63 bytes with modified suffix, e.g. dp1234567890dp1234567890dp1234567890dp1234567890dp1234567848p74
	// So we can't get deployment name from pod name and have to store deployment name with pod name
	keyInDB      string
	isDeployment bool
	appName      string
	podName      string
	namespace    string
	// the annotation value if pod has pool annotation
	poolName string
}

// poolPrefix returns the common key prefix in database, for deployment dp_namespace_deploymentName_
// for pool pool__poolName_, for statefulset sts_namespace_statefulsetName_
// For now, if it is a statefulset pod, poolPrefix is useless since we reserve ip by full pod name
// poolPrefix is used by pool and deployment only.
func (k *keyObj) poolPrefix() string {
	if k.poolName != "" {
		return fmt.Sprintf("%s%s_", poolPrefix, k.poolName)
	}
	if k.isDeployment {
		return fmt.Sprintf("%s%s_%s_", deploymentPrefixKey, k.namespace, k.appName)
	}
	return fmt.Sprintf("%s%s_%s_", statefulsetPrefixKey, k.namespace, k.appName)
}

func (k *keyObj) poolAppPrefix() string {
	if k.poolName != "" {
		appTypePrefix := statefulsetPrefixKey
		if k.isDeployment {
			appTypePrefix = deploymentPrefixKey
		}
		return fmt.Sprintf("%s%s_%s%s_%s_", poolPrefix, k.poolName, appTypePrefix, k.namespace, k.appName)
	}
	return k.poolPrefix()
}

const (
	// ip pool may be shared with other namespaces, so leave namespace empty
	poolPrefix           = "pool__"
	deploymentPrefixKey  = "dp_"
	statefulsetPrefixKey = "sts_"
)

func formatKey(pod *corev1.Pod) *keyObj {
	var prefix string
	pool := getPoolPrefix(pod.Annotations)
	if pool != "" {
		prefix = fmt.Sprintf("%s%s_", poolPrefix, pool)
	}
	deploymentName := resolveDeploymentName(pod)
	keyObj := &keyObj{
		poolName:  pool,
		podName:   pod.Name,
		namespace: pod.Namespace}
	var appTypePrefix string
	if deploymentName != "" {
		appTypePrefix = deploymentPrefixKey
		keyObj.appName = deploymentName
		keyObj.isDeployment = true
	} else {
		stsName := resolveStatefulsetName(pod)
		if stsName == "" {
			return keyObj
		}
		keyObj.appName = stsName
		appTypePrefix = statefulsetPrefixKey
	}
	keyObj.keyInDB = fmt.Sprintf("%s%s%s_%s_%s", prefix, appTypePrefix, keyObj.namespace, keyObj.appName, keyObj.podName)
	return keyObj
}

func parseKey(key string) *keyObj {
	keyObj := &keyObj{keyInDB: key}
	removedPoolKey := key
	if strings.HasPrefix(key, poolPrefix) {
		// _ippool__poolName_deployment_namespace_deploymentName_podName
		parts := strings.SplitN(key[len(poolPrefix):], "_", 2) // poolName and deployment_namespace_deploymentName_podName
		if len(parts) != 2 {
			return keyObj
		}
		keyObj.poolName = parts[0]
		if strings.HasPrefix(parts[1], deploymentPrefixKey[1:]) {
			removedPoolKey = "_" + parts[1]
		} else {
			removedPoolKey = parts[1]
		}
	}
	if strings.HasPrefix(removedPoolKey, deploymentPrefixKey) {
		keyObj.isDeployment = true
		keyObj.appName, keyObj.podName, keyObj.namespace = resolveDpKey(removedPoolKey)
	} else {
		keyObj.appName, keyObj.podName, keyObj.namespace = resolveStsKey(removedPoolKey)
	}
	return keyObj
}

// resolveStatefulSetKey returns appname, podName, namespace
// "sts_kube-system_fip-bj_fip-bj-111": {"fip-bj", "fip-bj-111", "kube-system"}
func resolveStsKey(key string) (string, string, string) {
	if strings.HasPrefix(key, statefulsetPrefixKey) {
		// _ is not a valid char in appname
		parts := strings.Split(key, "_")
		if len(parts) == 4 {
			return parts[2], parts[3], parts[1]
		}
	}
	return "", "", ""
}

// resolveDpKey returns appname, podname, namespace
// "dp_default_dp1_dp1-rs1-pod1": {"dp1", "dp1-rs1-pod1", "default"}
func resolveDpKey(key string) (string, string, string) {
	if isDeploymentKey(key) {
		parts := strings.Split(key, "_")
		if len(parts) == 4 {
			return parts[2], parts[3], parts[1]
		}
	}
	return "", "", ""
}

func isDeploymentKey(key string) bool {
	return strings.HasPrefix(key, deploymentPrefixKey)
}

func isIPPoolKey(key string) bool {
	return strings.HasPrefix(key, "pool__")
}

func join(name, namespace string) string {
	return fmt.Sprintf("%s_%s", namespace, name)
}

func podName(pod *corev1.Pod) string {
	return fmt.Sprintf("%s_%s", pod.Namespace, pod.Name)
}

func statefulsetName(ss *appv1.StatefulSet) string {
	return fmt.Sprintf("%s_%s", ss.Namespace, ss.Name)
}

func deploymentName(dp *appv1.Deployment) string {
	return fmt.Sprintf("%s_%s", dp.Namespace, dp.Name)
}

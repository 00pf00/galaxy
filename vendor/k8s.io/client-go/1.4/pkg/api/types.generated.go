/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/client-go/1.4/pkg/api/resource"
	pkg2_unversioned "k8s.io/client-go/1.4/pkg/api/unversioned"
	pkg6_fields "k8s.io/client-go/1.4/pkg/fields"
	pkg5_labels "k8s.io/client-go/1.4/pkg/labels"
	pkg7_runtime "k8s.io/client-go/1.4/pkg/runtime"
	pkg1_types "k8s.io/client-go/1.4/pkg/types"
	pkg4_intstr "k8s.io/client-go/1.4/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [26]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.GaiaCloudVolume != nil && x.GaiaCloudVolume != nil
			yyq101[24] = x.VolumeSource.GaiaRBD != nil && x.GaiaRBD != nil
			yyq101[25] = x.VolumeSource.LocalDisk != nil && x.LocalDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(26)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.GaiaCloudVolume == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.GaiaCloudVolume == nil {
							r.EncodeNil()
						} else {
							x.GaiaCloudVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gaiaCloudVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.GaiaCloudVolume == nil {
							r.EncodeNil()
						} else {
							x.GaiaCloudVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.GaiaRBD == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.GaiaRBD == nil {
							r.EncodeNil()
						} else {
							x.GaiaRBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gaiaRbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.GaiaRBD == nil {
							r.EncodeNil()
						} else {
							x.GaiaRBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.LocalDisk == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr101 || yy2arr101 {
				if yyn129 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[25] {
						if x.LocalDisk == nil {
							r.EncodeNil()
						} else {
							x.LocalDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[25] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("localDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.LocalDisk == nil {
							r.EncodeNil()
						} else {
							x.LocalDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym130 := z.DecBinary()
	_ = yym130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct131 := r.ContainerType()
		if yyct131 == codecSelferValueTypeMap1234 {
			yyl131 := r.ReadMapStart()
			if yyl131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl131, d)
			}
		} else if yyct131 == codecSelferValueTypeArray1234 {
			yyl131 := r.ReadArrayStart()
			if yyl131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys132Slc
	var yyhl132 bool = l >= 0
	for yyj132 := 0; ; yyj132++ {
		if yyhl132 {
			if yyj132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys132Slc = r.DecodeBytes(yys132Slc, true, true)
		yys132 := string(yys132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys132 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "gaiaCloudVolume":
			if x.VolumeSource.GaiaCloudVolume == nil {
				x.VolumeSource.GaiaCloudVolume = new(GaiaCloudVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GaiaCloudVolume != nil {
					x.GaiaCloudVolume = nil
				}
			} else {
				if x.GaiaCloudVolume == nil {
					x.GaiaCloudVolume = new(GaiaCloudVolumeSource)
				}
				x.GaiaCloudVolume.CodecDecodeSelf(d)
			}
		case "gaiaRbd":
			if x.VolumeSource.GaiaRBD == nil {
				x.VolumeSource.GaiaRBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GaiaRBD != nil {
					x.GaiaRBD = nil
				}
			} else {
				if x.GaiaRBD == nil {
					x.GaiaRBD = new(RBDVolumeSource)
				}
				x.GaiaRBD.CodecDecodeSelf(d)
			}
		case "localDisk":
			if x.VolumeSource.LocalDisk == nil {
				x.VolumeSource.LocalDisk = new(LocalDiskSource)
			}
			if r.TryDecodeAsNil() {
				if x.LocalDisk != nil {
					x.LocalDisk = nil
				}
			} else {
				if x.LocalDisk == nil {
					x.LocalDisk = new(LocalDiskSource)
				}
				x.LocalDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys132)
		} // end switch yys132
	} // end for yyj132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj159 int
	var yyb159 bool
	var yyhl159 bool = l >= 0
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GaiaCloudVolume == nil {
		x.VolumeSource.GaiaCloudVolume = new(GaiaCloudVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GaiaCloudVolume != nil {
			x.GaiaCloudVolume = nil
		}
	} else {
		if x.GaiaCloudVolume == nil {
			x.GaiaCloudVolume = new(GaiaCloudVolumeSource)
		}
		x.GaiaCloudVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GaiaRBD == nil {
		x.VolumeSource.GaiaRBD = new(RBDVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GaiaRBD != nil {
			x.GaiaRBD = nil
		}
	} else {
		if x.GaiaRBD == nil {
			x.GaiaRBD = new(RBDVolumeSource)
		}
		x.GaiaRBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.LocalDisk == nil {
		x.VolumeSource.LocalDisk = new(LocalDiskSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LocalDisk != nil {
			x.LocalDisk = nil
		}
	} else {
		if x.LocalDisk == nil {
			x.LocalDisk = new(LocalDiskSource)
		}
		x.LocalDisk.CodecDecodeSelf(d)
	}
	for {
		yyj159++
		if yyhl159 {
			yyb159 = yyj159 > l
		} else {
			yyb159 = r.CheckBreak()
		}
		if yyb159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym186 := z.EncBinary()
		_ = yym186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep187 := !z.EncBinary()
			yy2arr187 := z.EncBasicHandle().StructToArray
			var yyq187 [25]bool
			_, _, _ = yysep187, yyq187, yy2arr187
			const yyr187 bool = false
			yyq187[0] = x.HostPath != nil
			yyq187[1] = x.EmptyDir != nil
			yyq187[2] = x.GCEPersistentDisk != nil
			yyq187[3] = x.AWSElasticBlockStore != nil
			yyq187[4] = x.GitRepo != nil
			yyq187[5] = x.Secret != nil
			yyq187[6] = x.NFS != nil
			yyq187[7] = x.ISCSI != nil
			yyq187[8] = x.Glusterfs != nil
			yyq187[9] = x.PersistentVolumeClaim != nil
			yyq187[10] = x.RBD != nil
			yyq187[11] = x.Quobyte != nil
			yyq187[12] = x.FlexVolume != nil
			yyq187[13] = x.Cinder != nil
			yyq187[14] = x.CephFS != nil
			yyq187[15] = x.Flocker != nil
			yyq187[16] = x.DownwardAPI != nil
			yyq187[17] = x.FC != nil
			yyq187[18] = x.AzureFile != nil
			yyq187[19] = x.ConfigMap != nil
			yyq187[20] = x.VsphereVolume != nil
			yyq187[21] = x.AzureDisk != nil
			yyq187[22] = x.GaiaCloudVolume != nil
			yyq187[23] = x.GaiaRBD != nil
			yyq187[24] = x.LocalDisk != nil
			var yynn187 int
			if yyr187 || yy2arr187 {
				r.EncodeArrayStart(25)
			} else {
				yynn187 = 0
				for _, b := range yyq187 {
					if b {
						yynn187++
					}
				}
				r.EncodeMapStart(yynn187)
				yynn187 = 0
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[22] {
					if x.GaiaCloudVolume == nil {
						r.EncodeNil()
					} else {
						x.GaiaCloudVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gaiaCloudVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GaiaCloudVolume == nil {
						r.EncodeNil()
					} else {
						x.GaiaCloudVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[23] {
					if x.GaiaRBD == nil {
						r.EncodeNil()
					} else {
						x.GaiaRBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gaiaRbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GaiaRBD == nil {
						r.EncodeNil()
					} else {
						x.GaiaRBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[24] {
					if x.LocalDisk == nil {
						r.EncodeNil()
					} else {
						x.LocalDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("localDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LocalDisk == nil {
						r.EncodeNil()
					} else {
						x.LocalDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym213 := z.DecBinary()
	_ = yym213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct214 := r.ContainerType()
		if yyct214 == codecSelferValueTypeMap1234 {
			yyl214 := r.ReadMapStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl214, d)
			}
		} else if yyct214 == codecSelferValueTypeArray1234 {
			yyl214 := r.ReadArrayStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys215Slc
	var yyhl215 bool = l >= 0
	for yyj215 := 0; ; yyj215++ {
		if yyhl215 {
			if yyj215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys215Slc = r.DecodeBytes(yys215Slc, true, true)
		yys215 := string(yys215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys215 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "gaiaCloudVolume":
			if r.TryDecodeAsNil() {
				if x.GaiaCloudVolume != nil {
					x.GaiaCloudVolume = nil
				}
			} else {
				if x.GaiaCloudVolume == nil {
					x.GaiaCloudVolume = new(GaiaCloudVolumeSource)
				}
				x.GaiaCloudVolume.CodecDecodeSelf(d)
			}
		case "gaiaRbd":
			if r.TryDecodeAsNil() {
				if x.GaiaRBD != nil {
					x.GaiaRBD = nil
				}
			} else {
				if x.GaiaRBD == nil {
					x.GaiaRBD = new(RBDVolumeSource)
				}
				x.GaiaRBD.CodecDecodeSelf(d)
			}
		case "localDisk":
			if r.TryDecodeAsNil() {
				if x.LocalDisk != nil {
					x.LocalDisk = nil
				}
			} else {
				if x.LocalDisk == nil {
					x.LocalDisk = new(LocalDiskSource)
				}
				x.LocalDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys215)
		} // end switch yys215
	} // end for yyj215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj241 int
	var yyb241 bool
	var yyhl241 bool = l >= 0
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GaiaCloudVolume != nil {
			x.GaiaCloudVolume = nil
		}
	} else {
		if x.GaiaCloudVolume == nil {
			x.GaiaCloudVolume = new(GaiaCloudVolumeSource)
		}
		x.GaiaCloudVolume.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GaiaRBD != nil {
			x.GaiaRBD = nil
		}
	} else {
		if x.GaiaRBD == nil {
			x.GaiaRBD = new(RBDVolumeSource)
		}
		x.GaiaRBD.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LocalDisk != nil {
			x.LocalDisk = nil
		}
	} else {
		if x.LocalDisk == nil {
			x.LocalDisk = new(LocalDiskSource)
		}
		x.LocalDisk.CodecDecodeSelf(d)
	}
	for {
		yyj241++
		if yyhl241 {
			yyb241 = yyj241 > l
		} else {
			yyb241 = r.CheckBreak()
		}
		if yyb241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalDiskSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym267 := z.EncBinary()
		_ = yym267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep268 := !z.EncBinary()
			yy2arr268 := z.EncBasicHandle().StructToArray
			var yyq268 [1]bool
			_, _, _ = yysep268, yyq268, yy2arr268
			const yyr268 bool = false
			var yynn268 int
			if yyr268 || yy2arr268 {
				r.EncodeArrayStart(1)
			} else {
				yynn268 = 1
				for _, b := range yyq268 {
					if b {
						yynn268++
					}
				}
				r.EncodeMapStart(yynn268)
				yynn268 = 0
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy270 := &x.DiskSize
				yym271 := z.EncBinary()
				_ = yym271
				if false {
				} else if z.HasExtensions() && z.EncExt(yy270) {
				} else if !yym271 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy270)
				} else {
					z.EncFallback(yy270)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("DiskSize"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy272 := &x.DiskSize
				yym273 := z.EncBinary()
				_ = yym273
				if false {
				} else if z.HasExtensions() && z.EncExt(yy272) {
				} else if !yym273 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy272)
				} else {
					z.EncFallback(yy272)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalDiskSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym274 := z.DecBinary()
	_ = yym274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct275 := r.ContainerType()
		if yyct275 == codecSelferValueTypeMap1234 {
			yyl275 := r.ReadMapStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl275, d)
			}
		} else if yyct275 == codecSelferValueTypeArray1234 {
			yyl275 := r.ReadArrayStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalDiskSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys276Slc
	var yyhl276 bool = l >= 0
	for yyj276 := 0; ; yyj276++ {
		if yyhl276 {
			if yyj276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys276Slc = r.DecodeBytes(yys276Slc, true, true)
		yys276 := string(yys276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys276 {
		case "DiskSize":
			if r.TryDecodeAsNil() {
				x.DiskSize = pkg3_resource.Quantity{}
			} else {
				yyv277 := &x.DiskSize
				yym278 := z.DecBinary()
				_ = yym278
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv277) {
				} else if !yym278 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv277)
				} else {
					z.DecFallback(yyv277, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys276)
		} // end switch yys276
	} // end for yyj276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalDiskSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj279 int
	var yyb279 bool
	var yyhl279 bool = l >= 0
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskSize = pkg3_resource.Quantity{}
	} else {
		yyv280 := &x.DiskSize
		yym281 := z.DecBinary()
		_ = yym281
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv280) {
		} else if !yym281 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv280)
		} else {
			z.DecFallback(yyv280, false)
		}
	}
	for {
		yyj279++
		if yyhl279 {
			yyb279 = yyj279 > l
		} else {
			yyb279 = r.CheckBreak()
		}
		if yyb279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym282 := z.EncBinary()
		_ = yym282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep283 := !z.EncBinary()
			yy2arr283 := z.EncBasicHandle().StructToArray
			var yyq283 [16]bool
			_, _, _ = yysep283, yyq283, yy2arr283
			const yyr283 bool = false
			yyq283[0] = x.GCEPersistentDisk != nil
			yyq283[1] = x.AWSElasticBlockStore != nil
			yyq283[2] = x.HostPath != nil
			yyq283[3] = x.Glusterfs != nil
			yyq283[4] = x.NFS != nil
			yyq283[5] = x.RBD != nil
			yyq283[6] = x.Quobyte != nil
			yyq283[7] = x.ISCSI != nil
			yyq283[8] = x.FlexVolume != nil
			yyq283[9] = x.Cinder != nil
			yyq283[10] = x.CephFS != nil
			yyq283[11] = x.FC != nil
			yyq283[12] = x.Flocker != nil
			yyq283[13] = x.AzureFile != nil
			yyq283[14] = x.VsphereVolume != nil
			yyq283[15] = x.AzureDisk != nil
			var yynn283 int
			if yyr283 || yy2arr283 {
				r.EncodeArrayStart(16)
			} else {
				yynn283 = 0
				for _, b := range yyq283 {
					if b {
						yynn283++
					}
				}
				r.EncodeMapStart(yynn283)
				yynn283 = 0
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym300 := z.DecBinary()
	_ = yym300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct301 := r.ContainerType()
		if yyct301 == codecSelferValueTypeMap1234 {
			yyl301 := r.ReadMapStart()
			if yyl301 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl301, d)
			}
		} else if yyct301 == codecSelferValueTypeArray1234 {
			yyl301 := r.ReadArrayStart()
			if yyl301 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys302Slc
	var yyhl302 bool = l >= 0
	for yyj302 := 0; ; yyj302++ {
		if yyhl302 {
			if yyj302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys302Slc = r.DecodeBytes(yys302Slc, true, true)
		yys302 := string(yys302Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys302 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys302)
		} // end switch yys302
	} // end for yyj302
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj319 int
	var yyb319 bool
	var yyhl319 bool = l >= 0
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj319++
		if yyhl319 {
			yyb319 = yyj319 > l
		} else {
			yyb319 = r.CheckBreak()
		}
		if yyb319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym336 := z.EncBinary()
		_ = yym336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep337 := !z.EncBinary()
			yy2arr337 := z.EncBasicHandle().StructToArray
			var yyq337 [2]bool
			_, _, _ = yysep337, yyq337, yy2arr337
			const yyr337 bool = false
			yyq337[1] = x.ReadOnly != false
			var yynn337 int
			if yyr337 || yy2arr337 {
				r.EncodeArrayStart(2)
			} else {
				yynn337 = 1
				for _, b := range yyq337 {
					if b {
						yynn337++
					}
				}
				r.EncodeMapStart(yynn337)
				yynn337 = 0
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym339 := z.EncBinary()
				_ = yym339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym340 := z.EncBinary()
				_ = yym340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[1] {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym344 := z.DecBinary()
	_ = yym344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct345 := r.ContainerType()
		if yyct345 == codecSelferValueTypeMap1234 {
			yyl345 := r.ReadMapStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl345, d)
			}
		} else if yyct345 == codecSelferValueTypeArray1234 {
			yyl345 := r.ReadArrayStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys346Slc
	var yyhl346 bool = l >= 0
	for yyj346 := 0; ; yyj346++ {
		if yyhl346 {
			if yyj346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys346Slc = r.DecodeBytes(yys346Slc, true, true)
		yys346 := string(yys346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys346 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys346)
		} // end switch yys346
	} // end for yyj346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj349 int
	var yyb349 bool
	var yyhl349 bool = l >= 0
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj349++
		if yyhl349 {
			yyb349 = yyj349 > l
		} else {
			yyb349 = r.CheckBreak()
		}
		if yyb349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym352 := z.EncBinary()
		_ = yym352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep353 := !z.EncBinary()
			yy2arr353 := z.EncBasicHandle().StructToArray
			var yyq353 [5]bool
			_, _, _ = yysep353, yyq353, yy2arr353
			const yyr353 bool = false
			yyq353[0] = x.Kind != ""
			yyq353[1] = x.APIVersion != ""
			yyq353[2] = true
			yyq353[3] = true
			yyq353[4] = true
			var yynn353 int
			if yyr353 || yy2arr353 {
				r.EncodeArrayStart(5)
			} else {
				yynn353 = 0
				for _, b := range yyq353 {
					if b {
						yynn353++
					}
				}
				r.EncodeMapStart(yynn353)
				yynn353 = 0
			}
			if yyr353 || yy2arr353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq353[0] {
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr353 || yy2arr353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq353[1] {
					yym358 := z.EncBinary()
					_ = yym358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr353 || yy2arr353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq353[2] {
					yy361 := &x.ObjectMeta
					yy361.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy362 := &x.ObjectMeta
					yy362.CodecEncodeSelf(e)
				}
			}
			if yyr353 || yy2arr353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq353[3] {
					yy364 := &x.Spec
					yy364.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq353[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy365 := &x.Spec
					yy365.CodecEncodeSelf(e)
				}
			}
			if yyr353 || yy2arr353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq353[4] {
					yy367 := &x.Status
					yy367.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq353[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy368 := &x.Status
					yy368.CodecEncodeSelf(e)
				}
			}
			if yyr353 || yy2arr353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym369 := z.DecBinary()
	_ = yym369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct370 := r.ContainerType()
		if yyct370 == codecSelferValueTypeMap1234 {
			yyl370 := r.ReadMapStart()
			if yyl370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl370, d)
			}
		} else if yyct370 == codecSelferValueTypeArray1234 {
			yyl370 := r.ReadArrayStart()
			if yyl370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys371Slc
	var yyhl371 bool = l >= 0
	for yyj371 := 0; ; yyj371++ {
		if yyhl371 {
			if yyj371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys371Slc = r.DecodeBytes(yys371Slc, true, true)
		yys371 := string(yys371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys371 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv374 := &x.ObjectMeta
				yyv374.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv375 := &x.Spec
				yyv375.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv376 := &x.Status
				yyv376.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys371)
		} // end switch yys371
	} // end for yyj371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj377 int
	var yyb377 bool
	var yyhl377 bool = l >= 0
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv380 := &x.ObjectMeta
		yyv380.CodecDecodeSelf(d)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv381 := &x.Spec
		yyv381.CodecDecodeSelf(d)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv382 := &x.Status
		yyv382.CodecDecodeSelf(d)
	}
	for {
		yyj377++
		if yyhl377 {
			yyb377 = yyj377 > l
		} else {
			yyb377 = r.CheckBreak()
		}
		if yyb377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym383 := z.EncBinary()
		_ = yym383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep384 := !z.EncBinary()
			yy2arr384 := z.EncBasicHandle().StructToArray
			var yyq384 [20]bool
			_, _, _ = yysep384, yyq384, yy2arr384
			const yyr384 bool = false
			yyq384[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq384[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq384[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq384[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq384[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq384[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq384[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq384[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq384[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq384[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq384[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq384[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq384[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq384[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq384[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq384[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq384[17] = len(x.AccessModes) != 0
			yyq384[18] = x.ClaimRef != nil
			yyq384[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn384 int
			if yyr384 || yy2arr384 {
				r.EncodeArrayStart(20)
			} else {
				yynn384 = 1
				for _, b := range yyq384 {
					if b {
						yynn384++
					}
				}
				r.EncodeMapStart(yynn384)
				yynn384 = 0
			}
			if yyr384 || yy2arr384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn386 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn386 = true
				goto LABEL386
			}
		LABEL386:
			if yyr384 || yy2arr384 {
				if yyn386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn386 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn387 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn387 = true
				goto LABEL387
			}
		LABEL387:
			if yyr384 || yy2arr384 {
				if yyn387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn387 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn388 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn388 = true
				goto LABEL388
			}
		LABEL388:
			if yyr384 || yy2arr384 {
				if yyn388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn388 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn389 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn389 = true
				goto LABEL389
			}
		LABEL389:
			if yyr384 || yy2arr384 {
				if yyn389 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn389 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn390 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn390 = true
				goto LABEL390
			}
		LABEL390:
			if yyr384 || yy2arr384 {
				if yyn390 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn390 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn391 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn391 = true
				goto LABEL391
			}
		LABEL391:
			if yyr384 || yy2arr384 {
				if yyn391 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn391 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn392 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn392 = true
				goto LABEL392
			}
		LABEL392:
			if yyr384 || yy2arr384 {
				if yyn392 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn392 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn393 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn393 = true
				goto LABEL393
			}
		LABEL393:
			if yyr384 || yy2arr384 {
				if yyn393 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn393 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn394 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn394 = true
				goto LABEL394
			}
		LABEL394:
			if yyr384 || yy2arr384 {
				if yyn394 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn394 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn395 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn395 = true
				goto LABEL395
			}
		LABEL395:
			if yyr384 || yy2arr384 {
				if yyn395 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn395 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn396 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn396 = true
				goto LABEL396
			}
		LABEL396:
			if yyr384 || yy2arr384 {
				if yyn396 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn396 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn397 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn397 = true
				goto LABEL397
			}
		LABEL397:
			if yyr384 || yy2arr384 {
				if yyn397 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn397 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn398 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn398 = true
				goto LABEL398
			}
		LABEL398:
			if yyr384 || yy2arr384 {
				if yyn398 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn398 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn399 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn399 = true
				goto LABEL399
			}
		LABEL399:
			if yyr384 || yy2arr384 {
				if yyn399 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn399 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn400 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn400 = true
				goto LABEL400
			}
		LABEL400:
			if yyr384 || yy2arr384 {
				if yyn400 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn400 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn401 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn401 = true
				goto LABEL401
			}
		LABEL401:
			if yyr384 || yy2arr384 {
				if yyn401 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq384[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq384[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn401 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr384 || yy2arr384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq384[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym403 := z.EncBinary()
						_ = yym403
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym404 := z.EncBinary()
						_ = yym404
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr384 || yy2arr384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq384[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr384 || yy2arr384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq384[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq384[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr384 || yy2arr384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym407 := z.DecBinary()
	_ = yym407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct408 := r.ContainerType()
		if yyct408 == codecSelferValueTypeMap1234 {
			yyl408 := r.ReadMapStart()
			if yyl408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl408, d)
			}
		} else if yyct408 == codecSelferValueTypeArray1234 {
			yyl408 := r.ReadArrayStart()
			if yyl408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys409Slc
	var yyhl409 bool = l >= 0
	for yyj409 := 0; ; yyj409++ {
		if yyhl409 {
			if yyj409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys409Slc = r.DecodeBytes(yys409Slc, true, true)
		yys409 := string(yys409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys409 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv410 := &x.Capacity
				yyv410.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv427 := &x.AccessModes
				yym428 := z.DecBinary()
				_ = yym428
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv427), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys409)
		} // end switch yys409
	} // end for yyj409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj431 int
	var yyb431 bool
	var yyhl431 bool = l >= 0
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv432 := &x.Capacity
		yyv432.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv449 := &x.AccessModes
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv449), d)
		}
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj431++
		if yyhl431 {
			yyb431 = yyj431 > l
		} else {
			yyb431 = r.CheckBreak()
		}
		if yyb431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym453 := z.EncBinary()
	_ = yym453
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym454 := z.DecBinary()
	_ = yym454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym455 := z.EncBinary()
		_ = yym455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep456 := !z.EncBinary()
			yy2arr456 := z.EncBasicHandle().StructToArray
			var yyq456 [3]bool
			_, _, _ = yysep456, yyq456, yy2arr456
			const yyr456 bool = false
			yyq456[0] = x.Phase != ""
			yyq456[1] = x.Message != ""
			yyq456[2] = x.Reason != ""
			var yynn456 int
			if yyr456 || yy2arr456 {
				r.EncodeArrayStart(3)
			} else {
				yynn456 = 0
				for _, b := range yyq456 {
					if b {
						yynn456++
					}
				}
				r.EncodeMapStart(yynn456)
				yynn456 = 0
			}
			if yyr456 || yy2arr456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq456[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq456[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr456 || yy2arr456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq456[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq456[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr456 || yy2arr456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq456[2] {
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq456[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr456 || yy2arr456 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym464 := z.DecBinary()
	_ = yym464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct465 := r.ContainerType()
		if yyct465 == codecSelferValueTypeMap1234 {
			yyl465 := r.ReadMapStart()
			if yyl465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl465, d)
			}
		} else if yyct465 == codecSelferValueTypeArray1234 {
			yyl465 := r.ReadArrayStart()
			if yyl465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys466Slc
	var yyhl466 bool = l >= 0
	for yyj466 := 0; ; yyj466++ {
		if yyhl466 {
			if yyj466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys466Slc = r.DecodeBytes(yys466Slc, true, true)
		yys466 := string(yys466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys466 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys466)
		} // end switch yys466
	} // end for yyj466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj470 int
	var yyb470 bool
	var yyhl470 bool = l >= 0
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj470++
		if yyhl470 {
			yyb470 = yyj470 > l
		} else {
			yyb470 = r.CheckBreak()
		}
		if yyb470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [4]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Kind != ""
			yyq475[1] = x.APIVersion != ""
			yyq475[2] = true
			var yynn475 int
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(4)
			} else {
				yynn475 = 1
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
				yynn475 = 0
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[0] {
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[1] {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[2] {
					yy483 := &x.ListMeta
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else if z.HasExtensions() && z.EncExt(yy483) {
					} else {
						z.EncFallback(yy483)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy485 := &x.ListMeta
					yym486 := z.EncBinary()
					_ = yym486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy485) {
					} else {
						z.EncFallback(yy485)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym490 := z.DecBinary()
	_ = yym490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct491 := r.ContainerType()
		if yyct491 == codecSelferValueTypeMap1234 {
			yyl491 := r.ReadMapStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl491, d)
			}
		} else if yyct491 == codecSelferValueTypeArray1234 {
			yyl491 := r.ReadArrayStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys492Slc
	var yyhl492 bool = l >= 0
	for yyj492 := 0; ; yyj492++ {
		if yyhl492 {
			if yyj492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys492Slc = r.DecodeBytes(yys492Slc, true, true)
		yys492 := string(yys492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv495 := &x.ListMeta
				yym496 := z.DecBinary()
				_ = yym496
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv495) {
				} else {
					z.DecFallback(yyv495, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv497 := &x.Items
				yym498 := z.DecBinary()
				_ = yym498
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv497), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys492)
		} // end switch yys492
	} // end for yyj492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj499 int
	var yyb499 bool
	var yyhl499 bool = l >= 0
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv502 := &x.ListMeta
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv502) {
		} else {
			z.DecFallback(yyv502, false)
		}
	}
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv504 := &x.Items
		yym505 := z.DecBinary()
		_ = yym505
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv504), d)
		}
	}
	for {
		yyj499++
		if yyhl499 {
			yyb499 = yyj499 > l
		} else {
			yyb499 = r.CheckBreak()
		}
		if yyb499 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj499-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym506 := z.EncBinary()
		_ = yym506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep507 := !z.EncBinary()
			yy2arr507 := z.EncBasicHandle().StructToArray
			var yyq507 [5]bool
			_, _, _ = yysep507, yyq507, yy2arr507
			const yyr507 bool = false
			yyq507[0] = x.Kind != ""
			yyq507[1] = x.APIVersion != ""
			yyq507[2] = true
			yyq507[3] = true
			yyq507[4] = true
			var yynn507 int
			if yyr507 || yy2arr507 {
				r.EncodeArrayStart(5)
			} else {
				yynn507 = 0
				for _, b := range yyq507 {
					if b {
						yynn507++
					}
				}
				r.EncodeMapStart(yynn507)
				yynn507 = 0
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[0] {
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[1] {
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq507[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[2] {
					yy515 := &x.ObjectMeta
					yy515.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy516 := &x.ObjectMeta
					yy516.CodecEncodeSelf(e)
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[3] {
					yy518 := &x.Spec
					yy518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy519 := &x.Spec
					yy519.CodecEncodeSelf(e)
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[4] {
					yy521 := &x.Status
					yy521.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy522 := &x.Status
					yy522.CodecEncodeSelf(e)
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym523 := z.DecBinary()
	_ = yym523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct524 := r.ContainerType()
		if yyct524 == codecSelferValueTypeMap1234 {
			yyl524 := r.ReadMapStart()
			if yyl524 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl524, d)
			}
		} else if yyct524 == codecSelferValueTypeArray1234 {
			yyl524 := r.ReadArrayStart()
			if yyl524 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys525Slc
	var yyhl525 bool = l >= 0
	for yyj525 := 0; ; yyj525++ {
		if yyhl525 {
			if yyj525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys525Slc = r.DecodeBytes(yys525Slc, true, true)
		yys525 := string(yys525Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys525 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv528 := &x.ObjectMeta
				yyv528.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv529 := &x.Spec
				yyv529.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv530 := &x.Status
				yyv530.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys525)
		} // end switch yys525
	} // end for yyj525
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj531 int
	var yyb531 bool
	var yyhl531 bool = l >= 0
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv534 := &x.ObjectMeta
		yyv534.CodecDecodeSelf(d)
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv535 := &x.Spec
		yyv535.CodecDecodeSelf(d)
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv536 := &x.Status
		yyv536.CodecDecodeSelf(d)
	}
	for {
		yyj531++
		if yyhl531 {
			yyb531 = yyj531 > l
		} else {
			yyb531 = r.CheckBreak()
		}
		if yyb531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [4]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = x.Kind != ""
			yyq538[1] = x.APIVersion != ""
			yyq538[2] = true
			var yynn538 int
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(4)
			} else {
				yynn538 = 1
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
				yynn538 = 0
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[0] {
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[1] {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[2] {
					yy546 := &x.ListMeta
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else if z.HasExtensions() && z.EncExt(yy546) {
					} else {
						z.EncFallback(yy546)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy548 := &x.ListMeta
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else if z.HasExtensions() && z.EncExt(yy548) {
					} else {
						z.EncFallback(yy548)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym553 := z.DecBinary()
	_ = yym553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct554 := r.ContainerType()
		if yyct554 == codecSelferValueTypeMap1234 {
			yyl554 := r.ReadMapStart()
			if yyl554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl554, d)
			}
		} else if yyct554 == codecSelferValueTypeArray1234 {
			yyl554 := r.ReadArrayStart()
			if yyl554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys555Slc
	var yyhl555 bool = l >= 0
	for yyj555 := 0; ; yyj555++ {
		if yyhl555 {
			if yyj555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys555Slc = r.DecodeBytes(yys555Slc, true, true)
		yys555 := string(yys555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys555 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv558 := &x.ListMeta
				yym559 := z.DecBinary()
				_ = yym559
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv558) {
				} else {
					z.DecFallback(yyv558, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv560 := &x.Items
				yym561 := z.DecBinary()
				_ = yym561
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv560), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys555)
		} // end switch yys555
	} // end for yyj555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj562 int
	var yyb562 bool
	var yyhl562 bool = l >= 0
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv565 := &x.ListMeta
		yym566 := z.DecBinary()
		_ = yym566
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv565) {
		} else {
			z.DecFallback(yyv565, false)
		}
	}
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv567 := &x.Items
		yym568 := z.DecBinary()
		_ = yym568
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv567), d)
		}
	}
	for {
		yyj562++
		if yyhl562 {
			yyb562 = yyj562 > l
		} else {
			yyb562 = r.CheckBreak()
		}
		if yyb562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym569 := z.EncBinary()
		_ = yym569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep570 := !z.EncBinary()
			yy2arr570 := z.EncBasicHandle().StructToArray
			var yyq570 [4]bool
			_, _, _ = yysep570, yyq570, yy2arr570
			const yyr570 bool = false
			yyq570[0] = len(x.AccessModes) != 0
			yyq570[1] = x.Selector != nil
			yyq570[2] = true
			yyq570[3] = x.VolumeName != ""
			var yynn570 int
			if yyr570 || yy2arr570 {
				r.EncodeArrayStart(4)
			} else {
				yynn570 = 0
				for _, b := range yyq570 {
					if b {
						yynn570++
					}
				}
				r.EncodeMapStart(yynn570)
				yynn570 = 0
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym572 := z.EncBinary()
						_ = yym572
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym573 := z.EncBinary()
						_ = yym573
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym575 := z.EncBinary()
						_ = yym575
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym576 := z.EncBinary()
						_ = yym576
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[2] {
					yy578 := &x.Resources
					yy578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq570[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy579 := &x.Resources
					yy579.CodecEncodeSelf(e)
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[3] {
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq570[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym582 := z.EncBinary()
					_ = yym582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct584 := r.ContainerType()
		if yyct584 == codecSelferValueTypeMap1234 {
			yyl584 := r.ReadMapStart()
			if yyl584 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl584, d)
			}
		} else if yyct584 == codecSelferValueTypeArray1234 {
			yyl584 := r.ReadArrayStart()
			if yyl584 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys585Slc
	var yyhl585 bool = l >= 0
	for yyj585 := 0; ; yyj585++ {
		if yyhl585 {
			if yyj585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys585Slc = r.DecodeBytes(yys585Slc, true, true)
		yys585 := string(yys585Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys585 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv586 := &x.AccessModes
				yym587 := z.DecBinary()
				_ = yym587
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv586), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym589 := z.DecBinary()
				_ = yym589
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv590 := &x.Resources
				yyv590.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys585)
		} // end switch yys585
	} // end for yyj585
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv593 := &x.AccessModes
		yym594 := z.DecBinary()
		_ = yym594
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv593), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym596 := z.DecBinary()
		_ = yym596
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv597 := &x.Resources
		yyv597.CodecDecodeSelf(d)
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym599 := z.EncBinary()
		_ = yym599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep600 := !z.EncBinary()
			yy2arr600 := z.EncBasicHandle().StructToArray
			var yyq600 [3]bool
			_, _, _ = yysep600, yyq600, yy2arr600
			const yyr600 bool = false
			yyq600[0] = x.Phase != ""
			yyq600[1] = len(x.AccessModes) != 0
			yyq600[2] = len(x.Capacity) != 0
			var yynn600 int
			if yyr600 || yy2arr600 {
				r.EncodeArrayStart(3)
			} else {
				yynn600 = 0
				for _, b := range yyq600 {
					if b {
						yynn600++
					}
				}
				r.EncodeMapStart(yynn600)
				yynn600 = 0
			}
			if yyr600 || yy2arr600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq600[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq600[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr600 || yy2arr600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq600[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym603 := z.EncBinary()
						_ = yym603
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq600[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym604 := z.EncBinary()
						_ = yym604
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr600 || yy2arr600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq600[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq600[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr600 || yy2arr600 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym606 := z.DecBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct607 := r.ContainerType()
		if yyct607 == codecSelferValueTypeMap1234 {
			yyl607 := r.ReadMapStart()
			if yyl607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl607, d)
			}
		} else if yyct607 == codecSelferValueTypeArray1234 {
			yyl607 := r.ReadArrayStart()
			if yyl607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys608Slc
	var yyhl608 bool = l >= 0
	for yyj608 := 0; ; yyj608++ {
		if yyhl608 {
			if yyj608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys608Slc = r.DecodeBytes(yys608Slc, true, true)
		yys608 := string(yys608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys608 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv610 := &x.AccessModes
				yym611 := z.DecBinary()
				_ = yym611
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv610), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv612 := &x.Capacity
				yyv612.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys608)
		} // end switch yys608
	} // end for yyj608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj613 int
	var yyb613 bool
	var yyhl613 bool = l >= 0
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv615 := &x.AccessModes
		yym616 := z.DecBinary()
		_ = yym616
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv615), d)
		}
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv617 := &x.Capacity
		yyv617.CodecDecodeSelf(d)
	}
	for {
		yyj613++
		if yyhl613 {
			yyb613 = yyj613 > l
		} else {
			yyb613 = r.CheckBreak()
		}
		if yyb613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym618 := z.EncBinary()
	_ = yym618
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym619 := z.DecBinary()
	_ = yym619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym620 := z.EncBinary()
	_ = yym620
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym621 := z.DecBinary()
	_ = yym621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym622 := z.EncBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym623 := z.DecBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym624 := z.EncBinary()
		_ = yym624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep625 := !z.EncBinary()
			yy2arr625 := z.EncBasicHandle().StructToArray
			var yyq625 [1]bool
			_, _, _ = yysep625, yyq625, yy2arr625
			const yyr625 bool = false
			var yynn625 int
			if yyr625 || yy2arr625 {
				r.EncodeArrayStart(1)
			} else {
				yynn625 = 1
				for _, b := range yyq625 {
					if b {
						yynn625++
					}
				}
				r.EncodeMapStart(yynn625)
				yynn625 = 0
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym627 := z.EncBinary()
				_ = yym627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym628 := z.EncBinary()
				_ = yym628
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym635 := z.EncBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep636 := !z.EncBinary()
			yy2arr636 := z.EncBasicHandle().StructToArray
			var yyq636 [1]bool
			_, _, _ = yysep636, yyq636, yy2arr636
			const yyr636 bool = false
			yyq636[0] = x.Medium != ""
			var yynn636 int
			if yyr636 || yy2arr636 {
				r.EncodeArrayStart(1)
			} else {
				yynn636 = 0
				for _, b := range yyq636 {
					if b {
						yynn636++
					}
				}
				r.EncodeMapStart(yynn636)
				yynn636 = 0
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq636[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym638 := z.DecBinary()
	_ = yym638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct639 := r.ContainerType()
		if yyct639 == codecSelferValueTypeMap1234 {
			yyl639 := r.ReadMapStart()
			if yyl639 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl639, d)
			}
		} else if yyct639 == codecSelferValueTypeArray1234 {
			yyl639 := r.ReadArrayStart()
			if yyl639 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl639, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys640Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys640Slc
	var yyhl640 bool = l >= 0
	for yyj640 := 0; ; yyj640++ {
		if yyhl640 {
			if yyj640 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys640Slc = r.DecodeBytes(yys640Slc, true, true)
		yys640 := string(yys640Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys640 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys640)
		} // end switch yys640
	} // end for yyj640
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj642 int
	var yyb642 bool
	var yyhl642 bool = l >= 0
	yyj642++
	if yyhl642 {
		yyb642 = yyj642 > l
	} else {
		yyb642 = r.CheckBreak()
	}
	if yyb642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj642++
		if yyhl642 {
			yyb642 = yyj642 > l
		} else {
			yyb642 = r.CheckBreak()
		}
		if yyb642 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj642-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym644 := z.EncBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym646 := z.EncBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym647 := z.DecBinary()
	_ = yym647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym648 := z.EncBinary()
		_ = yym648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep649 := !z.EncBinary()
			yy2arr649 := z.EncBasicHandle().StructToArray
			var yyq649 [4]bool
			_, _, _ = yysep649, yyq649, yy2arr649
			const yyr649 bool = false
			yyq649[1] = x.FSType != ""
			yyq649[2] = x.Partition != 0
			yyq649[3] = x.ReadOnly != false
			var yynn649 int
			if yyr649 || yy2arr649 {
				r.EncodeArrayStart(4)
			} else {
				yynn649 = 1
				for _, b := range yyq649 {
					if b {
						yynn649++
					}
				}
				r.EncodeMapStart(yynn649)
				yynn649 = 0
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym651 := z.EncBinary()
				_ = yym651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym652 := z.EncBinary()
				_ = yym652
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[1] {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq649[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[2] {
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[3] {
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq649[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym662 := z.DecBinary()
	_ = yym662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct663 := r.ContainerType()
		if yyct663 == codecSelferValueTypeMap1234 {
			yyl663 := r.ReadMapStart()
			if yyl663 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl663, d)
			}
		} else if yyct663 == codecSelferValueTypeArray1234 {
			yyl663 := r.ReadArrayStart()
			if yyl663 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys664Slc
	var yyhl664 bool = l >= 0
	for yyj664 := 0; ; yyj664++ {
		if yyhl664 {
			if yyj664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys664Slc = r.DecodeBytes(yys664Slc, true, true)
		yys664 := string(yys664Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys664 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys664)
		} // end switch yys664
	} // end for yyj664
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj669 int
	var yyb669 bool
	var yyhl669 bool = l >= 0
	yyj669++
	if yyhl669 {
		yyb669 = yyj669 > l
	} else {
		yyb669 = r.CheckBreak()
	}
	if yyb669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj669++
	if yyhl669 {
		yyb669 = yyj669 > l
	} else {
		yyb669 = r.CheckBreak()
	}
	if yyb669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj669++
	if yyhl669 {
		yyb669 = yyj669 > l
	} else {
		yyb669 = r.CheckBreak()
	}
	if yyb669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj669++
	if yyhl669 {
		yyb669 = yyj669 > l
	} else {
		yyb669 = r.CheckBreak()
	}
	if yyb669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj669++
		if yyhl669 {
			yyb669 = yyj669 > l
		} else {
			yyb669 = r.CheckBreak()
		}
		if yyb669 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj669-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym674 := z.EncBinary()
		_ = yym674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep675 := !z.EncBinary()
			yy2arr675 := z.EncBasicHandle().StructToArray
			var yyq675 [6]bool
			_, _, _ = yysep675, yyq675, yy2arr675
			const yyr675 bool = false
			yyq675[0] = x.TargetPortal != ""
			yyq675[1] = x.IQN != ""
			yyq675[2] = x.Lun != 0
			yyq675[3] = x.ISCSIInterface != ""
			yyq675[4] = x.FSType != ""
			yyq675[5] = x.ReadOnly != false
			var yynn675 int
			if yyr675 || yy2arr675 {
				r.EncodeArrayStart(6)
			} else {
				yynn675 = 0
				for _, b := range yyq675 {
					if b {
						yynn675++
					}
				}
				r.EncodeMapStart(yynn675)
				yynn675 = 0
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq675[0] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq675[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq675[1] {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq675[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq675[2] {
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq675[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq675[3] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq675[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq675[4] {
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq675[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq675[5] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq675[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr675 || yy2arr675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym694 := z.DecBinary()
	_ = yym694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct695 := r.ContainerType()
		if yyct695 == codecSelferValueTypeMap1234 {
			yyl695 := r.ReadMapStart()
			if yyl695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl695, d)
			}
		} else if yyct695 == codecSelferValueTypeArray1234 {
			yyl695 := r.ReadArrayStart()
			if yyl695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys696Slc
	var yyhl696 bool = l >= 0
	for yyj696 := 0; ; yyj696++ {
		if yyhl696 {
			if yyj696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys696Slc = r.DecodeBytes(yys696Slc, true, true)
		yys696 := string(yys696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys696 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys696)
		} // end switch yys696
	} // end for yyj696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym710 := z.EncBinary()
		_ = yym710
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep711 := !z.EncBinary()
			yy2arr711 := z.EncBasicHandle().StructToArray
			var yyq711 [4]bool
			_, _, _ = yysep711, yyq711, yy2arr711
			const yyr711 bool = false
			yyq711[2] = x.FSType != ""
			yyq711[3] = x.ReadOnly != false
			var yynn711 int
			if yyr711 || yy2arr711 {
				r.EncodeArrayStart(4)
			} else {
				yynn711 = 2
				for _, b := range yyq711 {
					if b {
						yynn711++
					}
				}
				r.EncodeMapStart(yynn711)
				yynn711 = 0
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym713 := z.EncBinary()
					_ = yym713
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy716 := *x.Lun
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeInt(int64(yy716))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy718 := *x.Lun
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeInt(int64(yy718))
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq711[2] {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq711[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq711[3] {
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq711[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym725 := z.EncBinary()
					_ = yym725
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct727 := r.ContainerType()
		if yyct727 == codecSelferValueTypeMap1234 {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if yyct727 == codecSelferValueTypeArray1234 {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys728 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv729 := &x.TargetWWNs
				yym730 := z.DecBinary()
				_ = yym730
				if false {
				} else {
					z.F.DecSliceStringX(yyv729, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym732 := z.DecBinary()
				_ = yym732
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj735 int
	var yyb735 bool
	var yyhl735 bool = l >= 0
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv736 := &x.TargetWWNs
		yym737 := z.DecBinary()
		_ = yym737
		if false {
		} else {
			z.F.DecSliceStringX(yyv736, false, d)
		}
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym739 := z.DecBinary()
		_ = yym739
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj735++
		if yyhl735 {
			yyb735 = yyj735 > l
		} else {
			yyb735 = r.CheckBreak()
		}
		if yyb735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym742 := z.EncBinary()
		_ = yym742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep743 := !z.EncBinary()
			yy2arr743 := z.EncBasicHandle().StructToArray
			var yyq743 [5]bool
			_, _, _ = yysep743, yyq743, yy2arr743
			const yyr743 bool = false
			yyq743[1] = x.FSType != ""
			yyq743[2] = x.SecretRef != nil
			yyq743[3] = x.ReadOnly != false
			yyq743[4] = len(x.Options) != 0
			var yynn743 int
			if yyr743 || yy2arr743 {
				r.EncodeArrayStart(5)
			} else {
				yynn743 = 1
				for _, b := range yyq743 {
					if b {
						yynn743++
					}
				}
				r.EncodeMapStart(yynn743)
				yynn743 = 0
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq743[1] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq743[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq743[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq743[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq743[3] {
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq743[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq743[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym755 := z.EncBinary()
						_ = yym755
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq743[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym756 := z.EncBinary()
						_ = yym756
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym757 := z.DecBinary()
	_ = yym757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct758 := r.ContainerType()
		if yyct758 == codecSelferValueTypeMap1234 {
			yyl758 := r.ReadMapStart()
			if yyl758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl758, d)
			}
		} else if yyct758 == codecSelferValueTypeArray1234 {
			yyl758 := r.ReadArrayStart()
			if yyl758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys759Slc
	var yyhl759 bool = l >= 0
	for yyj759 := 0; ; yyj759++ {
		if yyhl759 {
			if yyj759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys759Slc = r.DecodeBytes(yys759Slc, true, true)
		yys759 := string(yys759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys759 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv764 := &x.Options
				yym765 := z.DecBinary()
				_ = yym765
				if false {
				} else {
					z.F.DecMapStringStringX(yyv764, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys759)
		} // end switch yys759
	} // end for yyj759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj766 int
	var yyb766 bool
	var yyhl766 bool = l >= 0
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv771 := &x.Options
		yym772 := z.DecBinary()
		_ = yym772
		if false {
		} else {
			z.F.DecMapStringStringX(yyv771, false, d)
		}
	}
	for {
		yyj766++
		if yyhl766 {
			yyb766 = yyj766 > l
		} else {
			yyb766 = r.CheckBreak()
		}
		if yyb766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyq774 [4]bool
			_, _, _ = yysep774, yyq774, yy2arr774
			const yyr774 bool = false
			yyq774[1] = x.FSType != ""
			yyq774[2] = x.Partition != 0
			yyq774[3] = x.ReadOnly != false
			var yynn774 int
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(4)
			} else {
				yynn774 = 1
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
				yynn774 = 0
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym777 := z.EncBinary()
				_ = yym777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[1] {
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[2] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq774[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[3] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq774[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym787 := z.DecBinary()
	_ = yym787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct788 := r.ContainerType()
		if yyct788 == codecSelferValueTypeMap1234 {
			yyl788 := r.ReadMapStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl788, d)
			}
		} else if yyct788 == codecSelferValueTypeArray1234 {
			yyl788 := r.ReadArrayStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys789Slc
	var yyhl789 bool = l >= 0
	for yyj789 := 0; ; yyj789++ {
		if yyhl789 {
			if yyj789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys789Slc = r.DecodeBytes(yys789Slc, true, true)
		yys789 := string(yys789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys789 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys789)
		} // end switch yys789
	} // end for yyj789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj794 int
	var yyb794 bool
	var yyhl794 bool = l >= 0
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj794++
		if yyhl794 {
			yyb794 = yyj794 > l
		} else {
			yyb794 = r.CheckBreak()
		}
		if yyb794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym799 := z.EncBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep800 := !z.EncBinary()
			yy2arr800 := z.EncBasicHandle().StructToArray
			var yyq800 [3]bool
			_, _, _ = yysep800, yyq800, yy2arr800
			const yyr800 bool = false
			yyq800[1] = x.Revision != ""
			yyq800[2] = x.Directory != ""
			var yynn800 int
			if yyr800 || yy2arr800 {
				r.EncodeArrayStart(3)
			} else {
				yynn800 = 1
				for _, b := range yyq800 {
					if b {
						yynn800++
					}
				}
				r.EncodeMapStart(yynn800)
				yynn800 = 0
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym802 := z.EncBinary()
				_ = yym802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[1] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[2] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct811 := r.ContainerType()
		if yyct811 == codecSelferValueTypeMap1234 {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if yyct811 == codecSelferValueTypeArray1234 {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys812 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj816 int
	var yyb816 bool
	var yyhl816 bool = l >= 0
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj816++
		if yyhl816 {
			yyb816 = yyj816 > l
		} else {
			yyb816 = r.CheckBreak()
		}
		if yyb816 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj816-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym820 := z.EncBinary()
		_ = yym820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep821 := !z.EncBinary()
			yy2arr821 := z.EncBasicHandle().StructToArray
			var yyq821 [3]bool
			_, _, _ = yysep821, yyq821, yy2arr821
			const yyr821 bool = false
			yyq821[0] = x.SecretName != ""
			yyq821[1] = len(x.Items) != 0
			yyq821[2] = x.DefaultMode != nil
			var yynn821 int
			if yyr821 || yy2arr821 {
				r.EncodeArrayStart(3)
			} else {
				yynn821 = 0
				for _, b := range yyq821 {
					if b {
						yynn821++
					}
				}
				r.EncodeMapStart(yynn821)
				yynn821 = 0
			}
			if yyr821 || yy2arr821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq821[0] {
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq821[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr821 || yy2arr821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq821[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym826 := z.EncBinary()
						_ = yym826
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq821[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym827 := z.EncBinary()
						_ = yym827
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr821 || yy2arr821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq821[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy829 := *x.DefaultMode
						yym830 := z.EncBinary()
						_ = yym830
						if false {
						} else {
							r.EncodeInt(int64(yy829))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq821[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy831 := *x.DefaultMode
						yym832 := z.EncBinary()
						_ = yym832
						if false {
						} else {
							r.EncodeInt(int64(yy831))
						}
					}
				}
			}
			if yyr821 || yy2arr821 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym833 := z.DecBinary()
	_ = yym833
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct834 := r.ContainerType()
		if yyct834 == codecSelferValueTypeMap1234 {
			yyl834 := r.ReadMapStart()
			if yyl834 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl834, d)
			}
		} else if yyct834 == codecSelferValueTypeArray1234 {
			yyl834 := r.ReadArrayStart()
			if yyl834 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl834, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys835Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys835Slc
	var yyhl835 bool = l >= 0
	for yyj835 := 0; ; yyj835++ {
		if yyhl835 {
			if yyj835 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys835Slc = r.DecodeBytes(yys835Slc, true, true)
		yys835 := string(yys835Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys835 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv837 := &x.Items
				yym838 := z.DecBinary()
				_ = yym838
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv837), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym840 := z.DecBinary()
				_ = yym840
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys835)
		} // end switch yys835
	} // end for yyj835
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj841 int
	var yyb841 bool
	var yyhl841 bool = l >= 0
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv843 := &x.Items
		yym844 := z.DecBinary()
		_ = yym844
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv843), d)
		}
	}
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym846 := z.DecBinary()
		_ = yym846
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj841++
		if yyhl841 {
			yyb841 = yyj841 > l
		} else {
			yyb841 = r.CheckBreak()
		}
		if yyb841 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj841-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym847 := z.EncBinary()
		_ = yym847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep848 := !z.EncBinary()
			yy2arr848 := z.EncBasicHandle().StructToArray
			var yyq848 [3]bool
			_, _, _ = yysep848, yyq848, yy2arr848
			const yyr848 bool = false
			yyq848[2] = x.ReadOnly != false
			var yynn848 int
			if yyr848 || yy2arr848 {
				r.EncodeArrayStart(3)
			} else {
				yynn848 = 2
				for _, b := range yyq848 {
					if b {
						yynn848++
					}
				}
				r.EncodeMapStart(yynn848)
				yynn848 = 0
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym850 := z.EncBinary()
				_ = yym850
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym851 := z.EncBinary()
				_ = yym851
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym853 := z.EncBinary()
				_ = yym853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[2] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym858 := z.DecBinary()
	_ = yym858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct859 := r.ContainerType()
		if yyct859 == codecSelferValueTypeMap1234 {
			yyl859 := r.ReadMapStart()
			if yyl859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl859, d)
			}
		} else if yyct859 == codecSelferValueTypeArray1234 {
			yyl859 := r.ReadArrayStart()
			if yyl859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys860Slc
	var yyhl860 bool = l >= 0
	for yyj860 := 0; ; yyj860++ {
		if yyhl860 {
			if yyj860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys860Slc = r.DecodeBytes(yys860Slc, true, true)
		yys860 := string(yys860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys860 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys860)
		} // end switch yys860
	} // end for yyj860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj864 int
	var yyb864 bool
	var yyhl864 bool = l >= 0
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj864++
		if yyhl864 {
			yyb864 = yyj864 > l
		} else {
			yyb864 = r.CheckBreak()
		}
		if yyb864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym868 := z.EncBinary()
		_ = yym868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep869 := !z.EncBinary()
			yy2arr869 := z.EncBasicHandle().StructToArray
			var yyq869 [5]bool
			_, _, _ = yysep869, yyq869, yy2arr869
			const yyr869 bool = false
			yyq869[2] = x.ReadOnly != false
			yyq869[3] = x.User != ""
			yyq869[4] = x.Group != ""
			var yynn869 int
			if yyr869 || yy2arr869 {
				r.EncodeArrayStart(5)
			} else {
				yynn869 = 2
				for _, b := range yyq869 {
					if b {
						yynn869++
					}
				}
				r.EncodeMapStart(yynn869)
				yynn869 = 0
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym871 := z.EncBinary()
				_ = yym871
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym872 := z.EncBinary()
				_ = yym872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym874 := z.EncBinary()
				_ = yym874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym875 := z.EncBinary()
				_ = yym875
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[2] {
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq869[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[3] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq869[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[4] {
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq869[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct886 := r.ContainerType()
		if yyct886 == codecSelferValueTypeMap1234 {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if yyct886 == codecSelferValueTypeArray1234 {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys887 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj893 int
	var yyb893 bool
	var yyhl893 bool = l >= 0
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj893++
		if yyhl893 {
			yyb893 = yyj893 > l
		} else {
			yyb893 = r.CheckBreak()
		}
		if yyb893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym899 := z.EncBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep900 := !z.EncBinary()
			yy2arr900 := z.EncBasicHandle().StructToArray
			var yyq900 [3]bool
			_, _, _ = yysep900, yyq900, yy2arr900
			const yyr900 bool = false
			yyq900[2] = x.ReadOnly != false
			var yynn900 int
			if yyr900 || yy2arr900 {
				r.EncodeArrayStart(3)
			} else {
				yynn900 = 2
				for _, b := range yyq900 {
					if b {
						yynn900++
					}
				}
				r.EncodeMapStart(yynn900)
				yynn900 = 0
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym902 := z.EncBinary()
				_ = yym902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym903 := z.EncBinary()
				_ = yym903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym905 := z.EncBinary()
				_ = yym905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym906 := z.EncBinary()
				_ = yym906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[2] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym910 := z.DecBinary()
	_ = yym910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct911 := r.ContainerType()
		if yyct911 == codecSelferValueTypeMap1234 {
			yyl911 := r.ReadMapStart()
			if yyl911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl911, d)
			}
		} else if yyct911 == codecSelferValueTypeArray1234 {
			yyl911 := r.ReadArrayStart()
			if yyl911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys912Slc
	var yyhl912 bool = l >= 0
	for yyj912 := 0; ; yyj912++ {
		if yyhl912 {
			if yyj912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys912Slc = r.DecodeBytes(yys912Slc, true, true)
		yys912 := string(yys912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys912 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys912)
		} // end switch yys912
	} // end for yyj912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj916 int
	var yyb916 bool
	var yyhl916 bool = l >= 0
	yyj916++
	if yyhl916 {
		yyb916 = yyj916 > l
	} else {
		yyb916 = r.CheckBreak()
	}
	if yyb916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj916++
	if yyhl916 {
		yyb916 = yyj916 > l
	} else {
		yyb916 = r.CheckBreak()
	}
	if yyb916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj916++
	if yyhl916 {
		yyb916 = yyj916 > l
	} else {
		yyb916 = r.CheckBreak()
	}
	if yyb916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj916++
		if yyhl916 {
			yyb916 = yyj916 > l
		} else {
			yyb916 = r.CheckBreak()
		}
		if yyb916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym920 := z.EncBinary()
		_ = yym920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep921 := !z.EncBinary()
			yy2arr921 := z.EncBasicHandle().StructToArray
			var yyq921 [8]bool
			_, _, _ = yysep921, yyq921, yy2arr921
			const yyr921 bool = false
			yyq921[2] = x.FSType != ""
			yyq921[3] = x.RBDPool != ""
			yyq921[4] = x.RadosUser != ""
			yyq921[5] = x.Keyring != ""
			yyq921[6] = x.SecretRef != nil
			yyq921[7] = x.ReadOnly != false
			var yynn921 int
			if yyr921 || yy2arr921 {
				r.EncodeArrayStart(8)
			} else {
				yynn921 = 2
				for _, b := range yyq921 {
					if b {
						yynn921++
					}
				}
				r.EncodeMapStart(yynn921)
				yynn921 = 0
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[2] {
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[3] {
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[4] {
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym936 := z.EncBinary()
					_ = yym936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[5] {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq921[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[7] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq921[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym944 := z.DecBinary()
	_ = yym944
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct945 := r.ContainerType()
		if yyct945 == codecSelferValueTypeMap1234 {
			yyl945 := r.ReadMapStart()
			if yyl945 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl945, d)
			}
		} else if yyct945 == codecSelferValueTypeArray1234 {
			yyl945 := r.ReadArrayStart()
			if yyl945 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl945, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys946Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys946Slc
	var yyhl946 bool = l >= 0
	for yyj946 := 0; ; yyj946++ {
		if yyhl946 {
			if yyj946 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys946Slc = r.DecodeBytes(yys946Slc, true, true)
		yys946 := string(yys946Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys946 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv947 := &x.CephMonitors
				yym948 := z.DecBinary()
				_ = yym948
				if false {
				} else {
					z.F.DecSliceStringX(yyv947, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys946)
		} // end switch yys946
	} // end for yyj946
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj956 int
	var yyb956 bool
	var yyhl956 bool = l >= 0
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv957 := &x.CephMonitors
		yym958 := z.DecBinary()
		_ = yym958
		if false {
		} else {
			z.F.DecSliceStringX(yyv957, false, d)
		}
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj956++
		if yyhl956 {
			yyb956 = yyj956 > l
		} else {
			yyb956 = r.CheckBreak()
		}
		if yyb956 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj956-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [3]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[1] = x.FSType != ""
			yyq967[2] = x.ReadOnly != false
			var yynn967 int
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(3)
			} else {
				yynn967 = 1
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
				yynn967 = 0
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym970 := z.EncBinary()
				_ = yym970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[1] {
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[2] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq967[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym977 := z.DecBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct978 := r.ContainerType()
		if yyct978 == codecSelferValueTypeMap1234 {
			yyl978 := r.ReadMapStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl978, d)
			}
		} else if yyct978 == codecSelferValueTypeArray1234 {
			yyl978 := r.ReadArrayStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys979Slc
	var yyhl979 bool = l >= 0
	for yyj979 := 0; ; yyj979++ {
		if yyhl979 {
			if yyj979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys979Slc = r.DecodeBytes(yys979Slc, true, true)
		yys979 := string(yys979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys979 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys979)
		} // end switch yys979
	} // end for yyj979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj983 int
	var yyb983 bool
	var yyhl983 bool = l >= 0
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj983++
		if yyhl983 {
			yyb983 = yyj983 > l
		} else {
			yyb983 = r.CheckBreak()
		}
		if yyb983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym987 := z.EncBinary()
		_ = yym987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep988 := !z.EncBinary()
			yy2arr988 := z.EncBasicHandle().StructToArray
			var yyq988 [6]bool
			_, _, _ = yysep988, yyq988, yy2arr988
			const yyr988 bool = false
			yyq988[1] = x.Path != ""
			yyq988[2] = x.User != ""
			yyq988[3] = x.SecretFile != ""
			yyq988[4] = x.SecretRef != nil
			yyq988[5] = x.ReadOnly != false
			var yynn988 int
			if yyr988 || yy2arr988 {
				r.EncodeArrayStart(6)
			} else {
				yynn988 = 1
				for _, b := range yyq988 {
					if b {
						yynn988++
					}
				}
				r.EncodeMapStart(yynn988)
				yynn988 = 0
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[1] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[2] {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq988[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[3] {
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq988[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq988[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[5] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq988[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1006 := r.ContainerType()
		if yyct1006 == codecSelferValueTypeMap1234 {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if yyct1006 == codecSelferValueTypeArray1234 {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1007 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv1008 := &x.Monitors
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					z.F.DecSliceStringX(yyv1008, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1015 int
	var yyb1015 bool
	var yyhl1015 bool = l >= 0
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv1016 := &x.Monitors
		yym1017 := z.DecBinary()
		_ = yym1017
		if false {
		} else {
			z.F.DecSliceStringX(yyv1016, false, d)
		}
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1015++
		if yyhl1015 {
			yyb1015 = yyj1015 > l
		} else {
			yyb1015 = r.CheckBreak()
		}
		if yyb1015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1023 := z.EncBinary()
		_ = yym1023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1024 := !z.EncBinary()
			yy2arr1024 := z.EncBasicHandle().StructToArray
			var yyq1024 [1]bool
			_, _, _ = yysep1024, yyq1024, yy2arr1024
			const yyr1024 bool = false
			var yynn1024 int
			if yyr1024 || yy2arr1024 {
				r.EncodeArrayStart(1)
			} else {
				yynn1024 = 1
				for _, b := range yyq1024 {
					if b {
						yynn1024++
					}
				}
				r.EncodeMapStart(yynn1024)
				yynn1024 = 0
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1028 := z.DecBinary()
	_ = yym1028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1029 := r.ContainerType()
		if yyct1029 == codecSelferValueTypeMap1234 {
			yyl1029 := r.ReadMapStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1029, d)
			}
		} else if yyct1029 == codecSelferValueTypeArray1234 {
			yyl1029 := r.ReadArrayStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1030Slc
	var yyhl1030 bool = l >= 0
	for yyj1030 := 0; ; yyj1030++ {
		if yyhl1030 {
			if yyj1030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1030Slc = r.DecodeBytes(yys1030Slc, true, true)
		yys1030 := string(yys1030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1030 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1030)
		} // end switch yys1030
	} // end for yyj1030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1032 int
	var yyb1032 bool
	var yyhl1032 bool = l >= 0
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj1032++
		if yyhl1032 {
			yyb1032 = yyj1032 > l
		} else {
			yyb1032 = r.CheckBreak()
		}
		if yyb1032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1034 := z.EncBinary()
		_ = yym1034
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1035 := !z.EncBinary()
			yy2arr1035 := z.EncBasicHandle().StructToArray
			var yyq1035 [2]bool
			_, _, _ = yysep1035, yyq1035, yy2arr1035
			const yyr1035 bool = false
			yyq1035[0] = len(x.Items) != 0
			yyq1035[1] = x.DefaultMode != nil
			var yynn1035 int
			if yyr1035 || yy2arr1035 {
				r.EncodeArrayStart(2)
			} else {
				yynn1035 = 0
				for _, b := range yyq1035 {
					if b {
						yynn1035++
					}
				}
				r.EncodeMapStart(yynn1035)
				yynn1035 = 0
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1035[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1037 := z.EncBinary()
						_ = yym1037
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1035[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1035[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1040 := *x.DefaultMode
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							r.EncodeInt(int64(yy1040))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1035[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1042 := *x.DefaultMode
						yym1043 := z.EncBinary()
						_ = yym1043
						if false {
						} else {
							r.EncodeInt(int64(yy1042))
						}
					}
				}
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1045 := r.ContainerType()
		if yyct1045 == codecSelferValueTypeMap1234 {
			yyl1045 := r.ReadMapStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1045, d)
			}
		} else if yyct1045 == codecSelferValueTypeArray1234 {
			yyl1045 := r.ReadArrayStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1046Slc
	var yyhl1046 bool = l >= 0
	for yyj1046 := 0; ; yyj1046++ {
		if yyhl1046 {
			if yyj1046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1046Slc = r.DecodeBytes(yys1046Slc, true, true)
		yys1046 := string(yys1046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1046 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1047 := &x.Items
				yym1048 := z.DecBinary()
				_ = yym1048
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1047), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1050 := z.DecBinary()
				_ = yym1050
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1046)
		} // end switch yys1046
	} // end for yyj1046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1052 := &x.Items
		yym1053 := z.DecBinary()
		_ = yym1053
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1052), d)
		}
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1055 := z.DecBinary()
		_ = yym1055
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [4]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			yyq1057[1] = x.FieldRef != nil
			yyq1057[2] = x.ResourceFieldRef != nil
			yyq1057[3] = x.Mode != nil
			var yynn1057 int
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(4)
			} else {
				yynn1057 = 1
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
				yynn1057 = 0
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1057[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1057[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1064 := *x.Mode
						yym1065 := z.EncBinary()
						_ = yym1065
						if false {
						} else {
							r.EncodeInt(int64(yy1064))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1057[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1066 := *x.Mode
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							r.EncodeInt(int64(yy1066))
						}
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1068 := z.DecBinary()
	_ = yym1068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1069 := r.ContainerType()
		if yyct1069 == codecSelferValueTypeMap1234 {
			yyl1069 := r.ReadMapStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1069, d)
			}
		} else if yyct1069 == codecSelferValueTypeArray1234 {
			yyl1069 := r.ReadArrayStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1070Slc
	var yyhl1070 bool = l >= 0
	for yyj1070 := 0; ; yyj1070++ {
		if yyhl1070 {
			if yyj1070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1070Slc = r.DecodeBytes(yys1070Slc, true, true)
		yys1070 := string(yys1070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1070 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1075 := z.DecBinary()
				_ = yym1075
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1070)
		} // end switch yys1070
	} // end for yyj1070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1076 int
	var yyb1076 bool
	var yyhl1076 bool = l >= 0
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1081 := z.DecBinary()
		_ = yym1081
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1076++
		if yyhl1076 {
			yyb1076 = yyj1076 > l
		} else {
			yyb1076 = r.CheckBreak()
		}
		if yyb1076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1082 := z.EncBinary()
		_ = yym1082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1083 := !z.EncBinary()
			yy2arr1083 := z.EncBasicHandle().StructToArray
			var yyq1083 [3]bool
			_, _, _ = yysep1083, yyq1083, yy2arr1083
			const yyr1083 bool = false
			yyq1083[2] = x.ReadOnly != false
			var yynn1083 int
			if yyr1083 || yy2arr1083 {
				r.EncodeArrayStart(3)
			} else {
				yynn1083 = 2
				for _, b := range yyq1083 {
					if b {
						yynn1083++
					}
				}
				r.EncodeMapStart(yynn1083)
				yynn1083 = 0
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1088 := z.EncBinary()
				_ = yym1088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1083[2] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1083[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1094 := r.ContainerType()
		if yyct1094 == codecSelferValueTypeMap1234 {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if yyct1094 == codecSelferValueTypeArray1234 {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1095 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1099 int
	var yyb1099 bool
	var yyhl1099 bool = l >= 0
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1099++
		if yyhl1099 {
			yyb1099 = yyj1099 > l
		} else {
			yyb1099 = r.CheckBreak()
		}
		if yyb1099 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1099-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1103 := z.EncBinary()
		_ = yym1103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1104 := !z.EncBinary()
			yy2arr1104 := z.EncBasicHandle().StructToArray
			var yyq1104 [2]bool
			_, _, _ = yysep1104, yyq1104, yy2arr1104
			const yyr1104 bool = false
			yyq1104[1] = x.FSType != ""
			var yynn1104 int
			if yyr1104 || yy2arr1104 {
				r.EncodeArrayStart(2)
			} else {
				yynn1104 = 1
				for _, b := range yyq1104 {
					if b {
						yynn1104++
					}
				}
				r.EncodeMapStart(yynn1104)
				yynn1104 = 0
			}
			if yyr1104 || yy2arr1104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1106 := z.EncBinary()
				_ = yym1106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1107 := z.EncBinary()
				_ = yym1107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1104 || yy2arr1104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1104[1] {
					yym1109 := z.EncBinary()
					_ = yym1109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1104[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1110 := z.EncBinary()
					_ = yym1110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1104 || yy2arr1104 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1111 := z.DecBinary()
	_ = yym1111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1112 := r.ContainerType()
		if yyct1112 == codecSelferValueTypeMap1234 {
			yyl1112 := r.ReadMapStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1112, d)
			}
		} else if yyct1112 == codecSelferValueTypeArray1234 {
			yyl1112 := r.ReadArrayStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1113Slc
	var yyhl1113 bool = l >= 0
	for yyj1113 := 0; ; yyj1113++ {
		if yyhl1113 {
			if yyj1113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1113Slc = r.DecodeBytes(yys1113Slc, true, true)
		yys1113 := string(yys1113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1113 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1113)
		} // end switch yys1113
	} // end for yyj1113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1116 int
	var yyb1116 bool
	var yyhl1116 bool = l >= 0
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1116++
		if yyhl1116 {
			yyb1116 = yyj1116 > l
		} else {
			yyb1116 = r.CheckBreak()
		}
		if yyb1116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1119 := z.EncBinary()
	_ = yym1119
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1120 := z.DecBinary()
	_ = yym1120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [5]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[2] = x.CachingMode != nil
			yyq1122[3] = x.FSType != nil
			yyq1122[4] = x.ReadOnly != nil
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(5)
			} else {
				yynn1122 = 2
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1124 := z.EncBinary()
				_ = yym1124
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1125 := z.EncBinary()
				_ = yym1125
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1127 := z.EncBinary()
				_ = yym1127
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1128 := z.EncBinary()
				_ = yym1128
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1130 := *x.CachingMode
						yy1130.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1131 := *x.CachingMode
						yy1131.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1133 := *x.FSType
						yym1134 := z.EncBinary()
						_ = yym1134
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1133))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1135 := *x.FSType
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1135))
						}
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1138 := *x.ReadOnly
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							r.EncodeBool(bool(yy1138))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1140 := *x.ReadOnly
						yym1141 := z.EncBinary()
						_ = yym1141
						if false {
						} else {
							r.EncodeBool(bool(yy1140))
						}
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1142 := z.DecBinary()
	_ = yym1142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1143 := r.ContainerType()
		if yyct1143 == codecSelferValueTypeMap1234 {
			yyl1143 := r.ReadMapStart()
			if yyl1143 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1143, d)
			}
		} else if yyct1143 == codecSelferValueTypeArray1234 {
			yyl1143 := r.ReadArrayStart()
			if yyl1143 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1144Slc
	var yyhl1144 bool = l >= 0
	for yyj1144 := 0; ; yyj1144++ {
		if yyhl1144 {
			if yyj1144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1144Slc = r.DecodeBytes(yys1144Slc, true, true)
		yys1144 := string(yys1144Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1144 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1149 := z.DecBinary()
				_ = yym1149
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1151 := z.DecBinary()
				_ = yym1151
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1144)
		} // end switch yys1144
	} // end for yyj1144
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1152 int
	var yyb1152 bool
	var yyhl1152 bool = l >= 0
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1157 := z.DecBinary()
		_ = yym1157
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1152++
		if yyhl1152 {
			yyb1152 = yyj1152 > l
		} else {
			yyb1152 = r.CheckBreak()
		}
		if yyb1152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GaiaCloudVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1160 := z.EncBinary()
		_ = yym1160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1161 := !z.EncBinary()
			yy2arr1161 := z.EncBasicHandle().StructToArray
			var yyq1161 [3]bool
			_, _, _ = yysep1161, yyq1161, yy2arr1161
			const yyr1161 bool = false
			yyq1161[2] = x.FSType != ""
			var yynn1161 int
			if yyr1161 || yy2arr1161 {
				r.EncodeArrayStart(3)
			} else {
				yynn1161 = 2
				for _, b := range yyq1161 {
					if b {
						yynn1161++
					}
				}
				r.EncodeMapStart(yynn1161)
				yynn1161 = 0
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1163 := z.EncBinary()
				_ = yym1163
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AllocateMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("allocateMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AllocateMode))
				}
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1166 := z.EncBinary()
				_ = yym1166
				if false {
				} else {
					r.EncodeInt(int64(x.VolumeSize))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeSize"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1167 := z.EncBinary()
				_ = yym1167
				if false {
				} else {
					r.EncodeInt(int64(x.VolumeSize))
				}
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1161[2] {
					yym1169 := z.EncBinary()
					_ = yym1169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1161[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GaiaCloudVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1171 := z.DecBinary()
	_ = yym1171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1172 := r.ContainerType()
		if yyct1172 == codecSelferValueTypeMap1234 {
			yyl1172 := r.ReadMapStart()
			if yyl1172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1172, d)
			}
		} else if yyct1172 == codecSelferValueTypeArray1234 {
			yyl1172 := r.ReadArrayStart()
			if yyl1172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GaiaCloudVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1173Slc
	var yyhl1173 bool = l >= 0
	for yyj1173 := 0; ; yyj1173++ {
		if yyhl1173 {
			if yyj1173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1173Slc = r.DecodeBytes(yys1173Slc, true, true)
		yys1173 := string(yys1173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1173 {
		case "allocateMode":
			if r.TryDecodeAsNil() {
				x.AllocateMode = ""
			} else {
				x.AllocateMode = string(r.DecodeString())
			}
		case "volumeSize":
			if r.TryDecodeAsNil() {
				x.VolumeSize = 0
			} else {
				x.VolumeSize = int32(r.DecodeInt(32))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1173)
		} // end switch yys1173
	} // end for yyj1173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GaiaCloudVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1177 int
	var yyb1177 bool
	var yyhl1177 bool = l >= 0
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllocateMode = ""
	} else {
		x.AllocateMode = string(r.DecodeString())
	}
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeSize = 0
	} else {
		x.VolumeSize = int32(r.DecodeInt(32))
	}
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1177++
		if yyhl1177 {
			yyb1177 = yyj1177 > l
		} else {
			yyb1177 = r.CheckBreak()
		}
		if yyb1177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1181 := z.EncBinary()
		_ = yym1181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1182 := !z.EncBinary()
			yy2arr1182 := z.EncBasicHandle().StructToArray
			var yyq1182 [3]bool
			_, _, _ = yysep1182, yyq1182, yy2arr1182
			const yyr1182 bool = false
			yyq1182[1] = len(x.Items) != 0
			yyq1182[2] = x.DefaultMode != nil
			var yynn1182 int
			if yyr1182 || yy2arr1182 {
				r.EncodeArrayStart(3)
			} else {
				yynn1182 = 1
				for _, b := range yyq1182 {
					if b {
						yynn1182++
					}
				}
				r.EncodeMapStart(yynn1182)
				yynn1182 = 0
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1187 := z.EncBinary()
						_ = yym1187
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1188 := z.EncBinary()
						_ = yym1188
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1190 := *x.DefaultMode
						yym1191 := z.EncBinary()
						_ = yym1191
						if false {
						} else {
							r.EncodeInt(int64(yy1190))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1192 := *x.DefaultMode
						yym1193 := z.EncBinary()
						_ = yym1193
						if false {
						} else {
							r.EncodeInt(int64(yy1192))
						}
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1194 := z.DecBinary()
	_ = yym1194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1195 := r.ContainerType()
		if yyct1195 == codecSelferValueTypeMap1234 {
			yyl1195 := r.ReadMapStart()
			if yyl1195 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1195, d)
			}
		} else if yyct1195 == codecSelferValueTypeArray1234 {
			yyl1195 := r.ReadArrayStart()
			if yyl1195 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1195, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1196Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1196Slc
	var yyhl1196 bool = l >= 0
	for yyj1196 := 0; ; yyj1196++ {
		if yyhl1196 {
			if yyj1196 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1196Slc = r.DecodeBytes(yys1196Slc, true, true)
		yys1196 := string(yys1196Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1196 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1198 := &x.Items
				yym1199 := z.DecBinary()
				_ = yym1199
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1198), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1201 := z.DecBinary()
				_ = yym1201
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1196)
		} // end switch yys1196
	} // end for yyj1196
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1204 := &x.Items
		yym1205 := z.DecBinary()
		_ = yym1205
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1204), d)
		}
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1207 := z.DecBinary()
		_ = yym1207
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [3]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			yyq1209[2] = x.Mode != nil
			var yynn1209 int
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(3)
			} else {
				yynn1209 = 2
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
				yynn1209 = 0
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1211 := z.EncBinary()
				_ = yym1211
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1212 := z.EncBinary()
				_ = yym1212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1215 := z.EncBinary()
				_ = yym1215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1217 := *x.Mode
						yym1218 := z.EncBinary()
						_ = yym1218
						if false {
						} else {
							r.EncodeInt(int64(yy1217))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1209[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1219 := *x.Mode
						yym1220 := z.EncBinary()
						_ = yym1220
						if false {
						} else {
							r.EncodeInt(int64(yy1219))
						}
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1222 := r.ContainerType()
		if yyct1222 == codecSelferValueTypeMap1234 {
			yyl1222 := r.ReadMapStart()
			if yyl1222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1222, d)
			}
		} else if yyct1222 == codecSelferValueTypeArray1234 {
			yyl1222 := r.ReadArrayStart()
			if yyl1222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1223Slc
	var yyhl1223 bool = l >= 0
	for yyj1223 := 0; ; yyj1223++ {
		if yyhl1223 {
			if yyj1223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1223Slc = r.DecodeBytes(yys1223Slc, true, true)
		yys1223 := string(yys1223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1223 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1227 := z.DecBinary()
				_ = yym1227
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1223)
		} // end switch yys1223
	} // end for yyj1223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1228 int
	var yyb1228 bool
	var yyhl1228 bool = l >= 0
	yyj1228++
	if yyhl1228 {
		yyb1228 = yyj1228 > l
	} else {
		yyb1228 = r.CheckBreak()
	}
	if yyb1228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1228++
	if yyhl1228 {
		yyb1228 = yyj1228 > l
	} else {
		yyb1228 = r.CheckBreak()
	}
	if yyb1228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1228++
	if yyhl1228 {
		yyb1228 = yyj1228 > l
	} else {
		yyb1228 = r.CheckBreak()
	}
	if yyb1228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1232 := z.DecBinary()
		_ = yym1232
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1228++
		if yyhl1228 {
			yyb1228 = yyj1228 > l
		} else {
			yyb1228 = r.CheckBreak()
		}
		if yyb1228 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1228-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1233 := z.EncBinary()
		_ = yym1233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1234 := !z.EncBinary()
			yy2arr1234 := z.EncBasicHandle().StructToArray
			var yyq1234 [5]bool
			_, _, _ = yysep1234, yyq1234, yy2arr1234
			const yyr1234 bool = false
			yyq1234[0] = x.Name != ""
			yyq1234[1] = x.HostPort != 0
			yyq1234[3] = x.Protocol != ""
			yyq1234[4] = x.HostIP != ""
			var yynn1234 int
			if yyr1234 || yy2arr1234 {
				r.EncodeArrayStart(5)
			} else {
				yynn1234 = 1
				for _, b := range yyq1234 {
					if b {
						yynn1234++
					}
				}
				r.EncodeMapStart(yynn1234)
				yynn1234 = 0
			}
			if yyr1234 || yy2arr1234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1234[0] {
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1234[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1234 || yy2arr1234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1234[1] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1234 || yy2arr1234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1234 || yy2arr1234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1234[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1234[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1234 || yy2arr1234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1234[4] {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1234[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1234 || yy2arr1234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1248 := z.DecBinary()
	_ = yym1248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1249 := r.ContainerType()
		if yyct1249 == codecSelferValueTypeMap1234 {
			yyl1249 := r.ReadMapStart()
			if yyl1249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1249, d)
			}
		} else if yyct1249 == codecSelferValueTypeArray1234 {
			yyl1249 := r.ReadArrayStart()
			if yyl1249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1250Slc
	var yyhl1250 bool = l >= 0
	for yyj1250 := 0; ; yyj1250++ {
		if yyhl1250 {
			if yyj1250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1250Slc = r.DecodeBytes(yys1250Slc, true, true)
		yys1250 := string(yys1250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1250 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1250)
		} // end switch yys1250
	} // end for yyj1250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1256 int
	var yyb1256 bool
	var yyhl1256 bool = l >= 0
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1256++
		if yyhl1256 {
			yyb1256 = yyj1256 > l
		} else {
			yyb1256 = r.CheckBreak()
		}
		if yyb1256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1262 := z.EncBinary()
		_ = yym1262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1263 := !z.EncBinary()
			yy2arr1263 := z.EncBasicHandle().StructToArray
			var yyq1263 [4]bool
			_, _, _ = yysep1263, yyq1263, yy2arr1263
			const yyr1263 bool = false
			yyq1263[1] = x.ReadOnly != false
			yyq1263[3] = x.SubPath != ""
			var yynn1263 int
			if yyr1263 || yy2arr1263 {
				r.EncodeArrayStart(4)
			} else {
				yynn1263 = 2
				for _, b := range yyq1263 {
					if b {
						yynn1263++
					}
				}
				r.EncodeMapStart(yynn1263)
				yynn1263 = 0
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1266 := z.EncBinary()
				_ = yym1266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[1] {
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[3] {
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1276 := z.DecBinary()
	_ = yym1276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1277 := r.ContainerType()
		if yyct1277 == codecSelferValueTypeMap1234 {
			yyl1277 := r.ReadMapStart()
			if yyl1277 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1277, d)
			}
		} else if yyct1277 == codecSelferValueTypeArray1234 {
			yyl1277 := r.ReadArrayStart()
			if yyl1277 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1278Slc
	var yyhl1278 bool = l >= 0
	for yyj1278 := 0; ; yyj1278++ {
		if yyhl1278 {
			if yyj1278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1278Slc = r.DecodeBytes(yys1278Slc, true, true)
		yys1278 := string(yys1278Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1278 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1278)
		} // end switch yys1278
	} // end for yyj1278
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1283 int
	var yyb1283 bool
	var yyhl1283 bool = l >= 0
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1283++
		if yyhl1283 {
			yyb1283 = yyj1283 > l
		} else {
			yyb1283 = r.CheckBreak()
		}
		if yyb1283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1288 := z.EncBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1289 := !z.EncBinary()
			yy2arr1289 := z.EncBasicHandle().StructToArray
			var yyq1289 [3]bool
			_, _, _ = yysep1289, yyq1289, yy2arr1289
			const yyr1289 bool = false
			yyq1289[1] = x.Value != ""
			yyq1289[2] = x.ValueFrom != nil
			var yynn1289 int
			if yyr1289 || yy2arr1289 {
				r.EncodeArrayStart(3)
			} else {
				yynn1289 = 1
				for _, b := range yyq1289 {
					if b {
						yynn1289++
					}
				}
				r.EncodeMapStart(yynn1289)
				yynn1289 = 0
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[1] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1297 := z.DecBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1298 := r.ContainerType()
		if yyct1298 == codecSelferValueTypeMap1234 {
			yyl1298 := r.ReadMapStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1298, d)
			}
		} else if yyct1298 == codecSelferValueTypeArray1234 {
			yyl1298 := r.ReadArrayStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1299Slc
	var yyhl1299 bool = l >= 0
	for yyj1299 := 0; ; yyj1299++ {
		if yyhl1299 {
			if yyj1299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1299Slc = r.DecodeBytes(yys1299Slc, true, true)
		yys1299 := string(yys1299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1299 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1299)
		} // end switch yys1299
	} // end for yyj1299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1303 int
	var yyb1303 bool
	var yyhl1303 bool = l >= 0
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1303++
		if yyhl1303 {
			yyb1303 = yyj1303 > l
		} else {
			yyb1303 = r.CheckBreak()
		}
		if yyb1303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [4]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			yyq1308[0] = x.FieldRef != nil
			yyq1308[1] = x.ResourceFieldRef != nil
			yyq1308[2] = x.ConfigMapKeyRef != nil
			yyq1308[3] = x.SecretKeyRef != nil
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(4)
			} else {
				yynn1308 = 0
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1313 := z.DecBinary()
	_ = yym1313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1314 := r.ContainerType()
		if yyct1314 == codecSelferValueTypeMap1234 {
			yyl1314 := r.ReadMapStart()
			if yyl1314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1314, d)
			}
		} else if yyct1314 == codecSelferValueTypeArray1234 {
			yyl1314 := r.ReadArrayStart()
			if yyl1314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1315Slc
	var yyhl1315 bool = l >= 0
	for yyj1315 := 0; ; yyj1315++ {
		if yyhl1315 {
			if yyj1315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1315Slc = r.DecodeBytes(yys1315Slc, true, true)
		yys1315 := string(yys1315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1315 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1315)
		} // end switch yys1315
	} // end for yyj1315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1320 int
	var yyb1320 bool
	var yyhl1320 bool = l >= 0
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1320++
		if yyhl1320 {
			yyb1320 = yyj1320 > l
		} else {
			yyb1320 = r.CheckBreak()
		}
		if yyb1320 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1320-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1325 := z.EncBinary()
		_ = yym1325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1326 := !z.EncBinary()
			yy2arr1326 := z.EncBasicHandle().StructToArray
			var yyq1326 [2]bool
			_, _, _ = yysep1326, yyq1326, yy2arr1326
			const yyr1326 bool = false
			var yynn1326 int
			if yyr1326 || yy2arr1326 {
				r.EncodeArrayStart(2)
			} else {
				yynn1326 = 2
				for _, b := range yyq1326 {
					if b {
						yynn1326++
					}
				}
				r.EncodeMapStart(yynn1326)
				yynn1326 = 0
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1329 := z.EncBinary()
				_ = yym1329
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1331 := z.EncBinary()
				_ = yym1331
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1332 := z.EncBinary()
				_ = yym1332
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1333 := z.DecBinary()
	_ = yym1333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1334 := r.ContainerType()
		if yyct1334 == codecSelferValueTypeMap1234 {
			yyl1334 := r.ReadMapStart()
			if yyl1334 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1334, d)
			}
		} else if yyct1334 == codecSelferValueTypeArray1234 {
			yyl1334 := r.ReadArrayStart()
			if yyl1334 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1334, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1335Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1335Slc
	var yyhl1335 bool = l >= 0
	for yyj1335 := 0; ; yyj1335++ {
		if yyhl1335 {
			if yyj1335 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1335Slc = r.DecodeBytes(yys1335Slc, true, true)
		yys1335 := string(yys1335Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1335 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1335)
		} // end switch yys1335
	} // end for yyj1335
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1338 int
	var yyb1338 bool
	var yyhl1338 bool = l >= 0
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1338++
		if yyhl1338 {
			yyb1338 = yyj1338 > l
		} else {
			yyb1338 = r.CheckBreak()
		}
		if yyb1338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1341 := z.EncBinary()
		_ = yym1341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1342 := !z.EncBinary()
			yy2arr1342 := z.EncBasicHandle().StructToArray
			var yyq1342 [3]bool
			_, _, _ = yysep1342, yyq1342, yy2arr1342
			const yyr1342 bool = false
			yyq1342[0] = x.ContainerName != ""
			yyq1342[2] = true
			var yynn1342 int
			if yyr1342 || yy2arr1342 {
				r.EncodeArrayStart(3)
			} else {
				yynn1342 = 1
				for _, b := range yyq1342 {
					if b {
						yynn1342++
					}
				}
				r.EncodeMapStart(yynn1342)
				yynn1342 = 0
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1342[0] {
					yym1344 := z.EncBinary()
					_ = yym1344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1347 := z.EncBinary()
				_ = yym1347
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1348 := z.EncBinary()
				_ = yym1348
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1342[2] {
					yy1350 := &x.Divisor
					yym1351 := z.EncBinary()
					_ = yym1351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1350) {
					} else if !yym1351 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1350)
					} else {
						z.EncFallback(yy1350)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1352 := &x.Divisor
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1352) {
					} else if !yym1353 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1352)
					} else {
						z.EncFallback(yy1352)
					}
				}
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1354 := z.DecBinary()
	_ = yym1354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1355 := r.ContainerType()
		if yyct1355 == codecSelferValueTypeMap1234 {
			yyl1355 := r.ReadMapStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1355, d)
			}
		} else if yyct1355 == codecSelferValueTypeArray1234 {
			yyl1355 := r.ReadArrayStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1356Slc
	var yyhl1356 bool = l >= 0
	for yyj1356 := 0; ; yyj1356++ {
		if yyhl1356 {
			if yyj1356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1356Slc = r.DecodeBytes(yys1356Slc, true, true)
		yys1356 := string(yys1356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1356 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1359 := &x.Divisor
				yym1360 := z.DecBinary()
				_ = yym1360
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1359) {
				} else if !yym1360 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1359)
				} else {
					z.DecFallback(yyv1359, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1356)
		} // end switch yys1356
	} // end for yyj1356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1361 int
	var yyb1361 bool
	var yyhl1361 bool = l >= 0
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1364 := &x.Divisor
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1364) {
		} else if !yym1365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1364)
		} else {
			z.DecFallback(yyv1364, false)
		}
	}
	for {
		yyj1361++
		if yyhl1361 {
			yyb1361 = yyj1361 > l
		} else {
			yyb1361 = r.CheckBreak()
		}
		if yyb1361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1366 := z.EncBinary()
		_ = yym1366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1367 := !z.EncBinary()
			yy2arr1367 := z.EncBasicHandle().StructToArray
			var yyq1367 [2]bool
			_, _, _ = yysep1367, yyq1367, yy2arr1367
			const yyr1367 bool = false
			var yynn1367 int
			if yyr1367 || yy2arr1367 {
				r.EncodeArrayStart(2)
			} else {
				yynn1367 = 2
				for _, b := range yyq1367 {
					if b {
						yynn1367++
					}
				}
				r.EncodeMapStart(yynn1367)
				yynn1367 = 0
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1370 := z.EncBinary()
				_ = yym1370
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1372 := z.EncBinary()
				_ = yym1372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1373 := z.EncBinary()
				_ = yym1373
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [2]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(2)
			} else {
				yynn1383 = 2
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1386 := z.EncBinary()
				_ = yym1386
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1388 := z.EncBinary()
				_ = yym1388
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1389 := z.EncBinary()
				_ = yym1389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1390 := z.DecBinary()
	_ = yym1390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1391 := r.ContainerType()
		if yyct1391 == codecSelferValueTypeMap1234 {
			yyl1391 := r.ReadMapStart()
			if yyl1391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1391, d)
			}
		} else if yyct1391 == codecSelferValueTypeArray1234 {
			yyl1391 := r.ReadArrayStart()
			if yyl1391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1392Slc
	var yyhl1392 bool = l >= 0
	for yyj1392 := 0; ; yyj1392++ {
		if yyhl1392 {
			if yyj1392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1392Slc = r.DecodeBytes(yys1392Slc, true, true)
		yys1392 := string(yys1392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1392 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1392)
		} // end switch yys1392
	} // end for yyj1392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1395 int
	var yyb1395 bool
	var yyhl1395 bool = l >= 0
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1395++
		if yyhl1395 {
			yyb1395 = yyj1395 > l
		} else {
			yyb1395 = r.CheckBreak()
		}
		if yyb1395 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1395-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1398 := z.EncBinary()
		_ = yym1398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1399 := !z.EncBinary()
			yy2arr1399 := z.EncBasicHandle().StructToArray
			var yyq1399 [2]bool
			_, _, _ = yysep1399, yyq1399, yy2arr1399
			const yyr1399 bool = false
			var yynn1399 int
			if yyr1399 || yy2arr1399 {
				r.EncodeArrayStart(2)
			} else {
				yynn1399 = 2
				for _, b := range yyq1399 {
					if b {
						yynn1399++
					}
				}
				r.EncodeMapStart(yynn1399)
				yynn1399 = 0
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1401 := z.EncBinary()
				_ = yym1401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1402 := z.EncBinary()
				_ = yym1402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1404 := z.EncBinary()
				_ = yym1404
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1405 := z.EncBinary()
				_ = yym1405
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1406 := z.DecBinary()
	_ = yym1406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1407 := r.ContainerType()
		if yyct1407 == codecSelferValueTypeMap1234 {
			yyl1407 := r.ReadMapStart()
			if yyl1407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1407, d)
			}
		} else if yyct1407 == codecSelferValueTypeArray1234 {
			yyl1407 := r.ReadArrayStart()
			if yyl1407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1408Slc
	var yyhl1408 bool = l >= 0
	for yyj1408 := 0; ; yyj1408++ {
		if yyhl1408 {
			if yyj1408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1408Slc = r.DecodeBytes(yys1408Slc, true, true)
		yys1408 := string(yys1408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1408 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1408)
		} // end switch yys1408
	} // end for yyj1408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1411 int
	var yyb1411 bool
	var yyhl1411 bool = l >= 0
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1411++
		if yyhl1411 {
			yyb1411 = yyj1411 > l
		} else {
			yyb1411 = r.CheckBreak()
		}
		if yyb1411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1414 := z.EncBinary()
		_ = yym1414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1415 := !z.EncBinary()
			yy2arr1415 := z.EncBasicHandle().StructToArray
			var yyq1415 [5]bool
			_, _, _ = yysep1415, yyq1415, yy2arr1415
			const yyr1415 bool = false
			yyq1415[0] = x.Path != ""
			yyq1415[1] = true
			yyq1415[2] = x.Host != ""
			yyq1415[3] = x.Scheme != ""
			yyq1415[4] = len(x.HTTPHeaders) != 0
			var yynn1415 int
			if yyr1415 || yy2arr1415 {
				r.EncodeArrayStart(5)
			} else {
				yynn1415 = 0
				for _, b := range yyq1415 {
					if b {
						yynn1415++
					}
				}
				r.EncodeMapStart(yynn1415)
				yynn1415 = 0
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1415[0] {
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1418 := z.EncBinary()
					_ = yym1418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1415[1] {
					yy1420 := &x.Port
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1420) {
					} else if !yym1421 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1420)
					} else {
						z.EncFallback(yy1420)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1415[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1422 := &x.Port
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1422) {
					} else if !yym1423 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1422)
					} else {
						z.EncFallback(yy1422)
					}
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1415[2] {
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1415[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1415[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1415[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1415[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1429 := z.EncBinary()
						_ = yym1429
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1415[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1430 := z.EncBinary()
						_ = yym1430
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1431 := z.DecBinary()
	_ = yym1431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1432 := r.ContainerType()
		if yyct1432 == codecSelferValueTypeMap1234 {
			yyl1432 := r.ReadMapStart()
			if yyl1432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1432, d)
			}
		} else if yyct1432 == codecSelferValueTypeArray1234 {
			yyl1432 := r.ReadArrayStart()
			if yyl1432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1433Slc
	var yyhl1433 bool = l >= 0
	for yyj1433 := 0; ; yyj1433++ {
		if yyhl1433 {
			if yyj1433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1433Slc = r.DecodeBytes(yys1433Slc, true, true)
		yys1433 := string(yys1433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1433 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1435 := &x.Port
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1435) {
				} else if !yym1436 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1435)
				} else {
					z.DecFallback(yyv1435, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1439 := &x.HTTPHeaders
				yym1440 := z.DecBinary()
				_ = yym1440
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1439), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1433)
		} // end switch yys1433
	} // end for yyj1433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1443 := &x.Port
		yym1444 := z.DecBinary()
		_ = yym1444
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1443) {
		} else if !yym1444 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1443)
		} else {
			z.DecFallback(yyv1443, false)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1447 := &x.HTTPHeaders
		yym1448 := z.DecBinary()
		_ = yym1448
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1447), d)
		}
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1449 := z.EncBinary()
	_ = yym1449
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1450 := z.DecBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1451 := z.EncBinary()
		_ = yym1451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1452 := !z.EncBinary()
			yy2arr1452 := z.EncBasicHandle().StructToArray
			var yyq1452 [1]bool
			_, _, _ = yysep1452, yyq1452, yy2arr1452
			const yyr1452 bool = false
			yyq1452[0] = true
			var yynn1452 int
			if yyr1452 || yy2arr1452 {
				r.EncodeArrayStart(1)
			} else {
				yynn1452 = 0
				for _, b := range yyq1452 {
					if b {
						yynn1452++
					}
				}
				r.EncodeMapStart(yynn1452)
				yynn1452 = 0
			}
			if yyr1452 || yy2arr1452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1452[0] {
					yy1454 := &x.Port
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1454) {
					} else if !yym1455 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1454)
					} else {
						z.EncFallback(yy1454)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1456 := &x.Port
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1456) {
					} else if !yym1457 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1456)
					} else {
						z.EncFallback(yy1456)
					}
				}
			}
			if yyr1452 || yy2arr1452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1458 := z.DecBinary()
	_ = yym1458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1459 := r.ContainerType()
		if yyct1459 == codecSelferValueTypeMap1234 {
			yyl1459 := r.ReadMapStart()
			if yyl1459 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1459, d)
			}
		} else if yyct1459 == codecSelferValueTypeArray1234 {
			yyl1459 := r.ReadArrayStart()
			if yyl1459 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1460Slc
	var yyhl1460 bool = l >= 0
	for yyj1460 := 0; ; yyj1460++ {
		if yyhl1460 {
			if yyj1460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1460Slc = r.DecodeBytes(yys1460Slc, true, true)
		yys1460 := string(yys1460Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1460 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1461 := &x.Port
				yym1462 := z.DecBinary()
				_ = yym1462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1461) {
				} else if !yym1462 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1461)
				} else {
					z.DecFallback(yyv1461, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1460)
		} // end switch yys1460
	} // end for yyj1460
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1463 int
	var yyb1463 bool
	var yyhl1463 bool = l >= 0
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1464 := &x.Port
		yym1465 := z.DecBinary()
		_ = yym1465
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1464) {
		} else if !yym1465 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1464)
		} else {
			z.DecFallback(yyv1464, false)
		}
	}
	for {
		yyj1463++
		if yyhl1463 {
			yyb1463 = yyj1463 > l
		} else {
			yyb1463 = r.CheckBreak()
		}
		if yyb1463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1466 := z.EncBinary()
		_ = yym1466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1467 := !z.EncBinary()
			yy2arr1467 := z.EncBasicHandle().StructToArray
			var yyq1467 [1]bool
			_, _, _ = yysep1467, yyq1467, yy2arr1467
			const yyr1467 bool = false
			yyq1467[0] = len(x.Command) != 0
			var yynn1467 int
			if yyr1467 || yy2arr1467 {
				r.EncodeArrayStart(1)
			} else {
				yynn1467 = 0
				for _, b := range yyq1467 {
					if b {
						yynn1467++
					}
				}
				r.EncodeMapStart(yynn1467)
				yynn1467 = 0
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1471 := z.DecBinary()
	_ = yym1471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1472 := r.ContainerType()
		if yyct1472 == codecSelferValueTypeMap1234 {
			yyl1472 := r.ReadMapStart()
			if yyl1472 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1472, d)
			}
		} else if yyct1472 == codecSelferValueTypeArray1234 {
			yyl1472 := r.ReadArrayStart()
			if yyl1472 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1473Slc
	var yyhl1473 bool = l >= 0
	for yyj1473 := 0; ; yyj1473++ {
		if yyhl1473 {
			if yyj1473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1473Slc = r.DecodeBytes(yys1473Slc, true, true)
		yys1473 := string(yys1473Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1473 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1474 := &x.Command
				yym1475 := z.DecBinary()
				_ = yym1475
				if false {
				} else {
					z.F.DecSliceStringX(yyv1474, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1473)
		} // end switch yys1473
	} // end for yyj1473
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1476 int
	var yyb1476 bool
	var yyhl1476 bool = l >= 0
	yyj1476++
	if yyhl1476 {
		yyb1476 = yyj1476 > l
	} else {
		yyb1476 = r.CheckBreak()
	}
	if yyb1476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1477 := &x.Command
		yym1478 := z.DecBinary()
		_ = yym1478
		if false {
		} else {
			z.F.DecSliceStringX(yyv1477, false, d)
		}
	}
	for {
		yyj1476++
		if yyhl1476 {
			yyb1476 = yyj1476 > l
		} else {
			yyb1476 = r.CheckBreak()
		}
		if yyb1476 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1476-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1479 := z.EncBinary()
		_ = yym1479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1480 := !z.EncBinary()
			yy2arr1480 := z.EncBasicHandle().StructToArray
			var yyq1480 [8]bool
			_, _, _ = yysep1480, yyq1480, yy2arr1480
			const yyr1480 bool = false
			yyq1480[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1480[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1480[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1480[3] = x.InitialDelaySeconds != 0
			yyq1480[4] = x.TimeoutSeconds != 0
			yyq1480[5] = x.PeriodSeconds != 0
			yyq1480[6] = x.SuccessThreshold != 0
			yyq1480[7] = x.FailureThreshold != 0
			var yynn1480 int
			if yyr1480 || yy2arr1480 {
				r.EncodeArrayStart(8)
			} else {
				yynn1480 = 0
				for _, b := range yyq1480 {
					if b {
						yynn1480++
					}
				}
				r.EncodeMapStart(yynn1480)
				yynn1480 = 0
			}
			var yyn1481 bool
			if x.Handler.Exec == nil {
				yyn1481 = true
				goto LABEL1481
			}
		LABEL1481:
			if yyr1480 || yy2arr1480 {
				if yyn1481 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1480[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1480[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1481 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1482 bool
			if x.Handler.HTTPGet == nil {
				yyn1482 = true
				goto LABEL1482
			}
		LABEL1482:
			if yyr1480 || yy2arr1480 {
				if yyn1482 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1480[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1480[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1482 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1483 bool
			if x.Handler.TCPSocket == nil {
				yyn1483 = true
				goto LABEL1483
			}
		LABEL1483:
			if yyr1480 || yy2arr1480 {
				if yyn1483 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1480[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1480[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1483 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[3] {
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1480[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[4] {
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1480[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[5] {
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1480[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[6] {
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1480[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1495 := z.EncBinary()
					_ = yym1495
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[7] {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1480[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1499 := z.DecBinary()
	_ = yym1499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1500 := r.ContainerType()
		if yyct1500 == codecSelferValueTypeMap1234 {
			yyl1500 := r.ReadMapStart()
			if yyl1500 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1500, d)
			}
		} else if yyct1500 == codecSelferValueTypeArray1234 {
			yyl1500 := r.ReadArrayStart()
			if yyl1500 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1500, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1501Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1501Slc
	var yyhl1501 bool = l >= 0
	for yyj1501 := 0; ; yyj1501++ {
		if yyhl1501 {
			if yyj1501 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1501Slc = r.DecodeBytes(yys1501Slc, true, true)
		yys1501 := string(yys1501Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1501 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1501)
		} // end switch yys1501
	} // end for yyj1501
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1510 int
	var yyb1510 bool
	var yyhl1510 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1510++
		if yyhl1510 {
			yyb1510 = yyj1510 > l
		} else {
			yyb1510 = r.CheckBreak()
		}
		if yyb1510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1519 := z.EncBinary()
	_ = yym1519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1520 := z.DecBinary()
	_ = yym1520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1521 := z.EncBinary()
	_ = yym1521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1522 := z.DecBinary()
	_ = yym1522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1523 := z.EncBinary()
		_ = yym1523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1524 := !z.EncBinary()
			yy2arr1524 := z.EncBasicHandle().StructToArray
			var yyq1524 [2]bool
			_, _, _ = yysep1524, yyq1524, yy2arr1524
			const yyr1524 bool = false
			yyq1524[0] = len(x.Add) != 0
			yyq1524[1] = len(x.Drop) != 0
			var yynn1524 int
			if yyr1524 || yy2arr1524 {
				r.EncodeArrayStart(2)
			} else {
				yynn1524 = 0
				for _, b := range yyq1524 {
					if b {
						yynn1524++
					}
				}
				r.EncodeMapStart(yynn1524)
				yynn1524 = 0
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1524[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1527 := z.EncBinary()
						_ = yym1527
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1524[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1530 := z.EncBinary()
						_ = yym1530
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1531 := z.DecBinary()
	_ = yym1531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1532 := r.ContainerType()
		if yyct1532 == codecSelferValueTypeMap1234 {
			yyl1532 := r.ReadMapStart()
			if yyl1532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1532, d)
			}
		} else if yyct1532 == codecSelferValueTypeArray1234 {
			yyl1532 := r.ReadArrayStart()
			if yyl1532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1533Slc
	var yyhl1533 bool = l >= 0
	for yyj1533 := 0; ; yyj1533++ {
		if yyhl1533 {
			if yyj1533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1533Slc = r.DecodeBytes(yys1533Slc, true, true)
		yys1533 := string(yys1533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1533 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1534 := &x.Add
				yym1535 := z.DecBinary()
				_ = yym1535
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1534), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1536 := &x.Drop
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1536), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1533)
		} // end switch yys1533
	} // end for yyj1533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1538 int
	var yyb1538 bool
	var yyhl1538 bool = l >= 0
	yyj1538++
	if yyhl1538 {
		yyb1538 = yyj1538 > l
	} else {
		yyb1538 = r.CheckBreak()
	}
	if yyb1538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1539 := &x.Add
		yym1540 := z.DecBinary()
		_ = yym1540
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1539), d)
		}
	}
	yyj1538++
	if yyhl1538 {
		yyb1538 = yyj1538 > l
	} else {
		yyb1538 = r.CheckBreak()
	}
	if yyb1538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1541 := &x.Drop
		yym1542 := z.DecBinary()
		_ = yym1542
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1541), d)
		}
	}
	for {
		yyj1538++
		if yyhl1538 {
			yyb1538 = yyj1538 > l
		} else {
			yyb1538 = r.CheckBreak()
		}
		if yyb1538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1543 := z.EncBinary()
		_ = yym1543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1544 := !z.EncBinary()
			yy2arr1544 := z.EncBasicHandle().StructToArray
			var yyq1544 [2]bool
			_, _, _ = yysep1544, yyq1544, yy2arr1544
			const yyr1544 bool = false
			yyq1544[0] = len(x.Limits) != 0
			yyq1544[1] = len(x.Requests) != 0
			var yynn1544 int
			if yyr1544 || yy2arr1544 {
				r.EncodeArrayStart(2)
			} else {
				yynn1544 = 0
				for _, b := range yyq1544 {
					if b {
						yynn1544++
					}
				}
				r.EncodeMapStart(yynn1544)
				yynn1544 = 0
			}
			if yyr1544 || yy2arr1544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1544[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1544 || yy2arr1544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1544[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1544 || yy2arr1544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1547 := z.DecBinary()
	_ = yym1547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1548 := r.ContainerType()
		if yyct1548 == codecSelferValueTypeMap1234 {
			yyl1548 := r.ReadMapStart()
			if yyl1548 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1548, d)
			}
		} else if yyct1548 == codecSelferValueTypeArray1234 {
			yyl1548 := r.ReadArrayStart()
			if yyl1548 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1549Slc
	var yyhl1549 bool = l >= 0
	for yyj1549 := 0; ; yyj1549++ {
		if yyhl1549 {
			if yyj1549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1549Slc = r.DecodeBytes(yys1549Slc, true, true)
		yys1549 := string(yys1549Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1549 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1550 := &x.Limits
				yyv1550.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1551 := &x.Requests
				yyv1551.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1549)
		} // end switch yys1549
	} // end for yyj1549
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1552 int
	var yyb1552 bool
	var yyhl1552 bool = l >= 0
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1553 := &x.Limits
		yyv1553.CodecDecodeSelf(d)
	}
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1554 := &x.Requests
		yyv1554.CodecDecodeSelf(d)
	}
	for {
		yyj1552++
		if yyhl1552 {
			yyb1552 = yyj1552 > l
		} else {
			yyb1552 = r.CheckBreak()
		}
		if yyb1552 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1552-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1555 := z.EncBinary()
		_ = yym1555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1556 := !z.EncBinary()
			yy2arr1556 := z.EncBasicHandle().StructToArray
			var yyq1556 [18]bool
			_, _, _ = yysep1556, yyq1556, yy2arr1556
			const yyr1556 bool = false
			yyq1556[2] = len(x.Command) != 0
			yyq1556[3] = len(x.Args) != 0
			yyq1556[4] = x.WorkingDir != ""
			yyq1556[5] = len(x.Ports) != 0
			yyq1556[6] = len(x.Env) != 0
			yyq1556[7] = true
			yyq1556[8] = len(x.VolumeMounts) != 0
			yyq1556[9] = x.LivenessProbe != nil
			yyq1556[10] = x.ReadinessProbe != nil
			yyq1556[11] = x.Lifecycle != nil
			yyq1556[12] = x.TerminationMessagePath != ""
			yyq1556[14] = x.SecurityContext != nil
			yyq1556[15] = x.Stdin != false
			yyq1556[16] = x.StdinOnce != false
			yyq1556[17] = x.TTY != false
			var yynn1556 int
			if yyr1556 || yy2arr1556 {
				r.EncodeArrayStart(18)
			} else {
				yynn1556 = 3
				for _, b := range yyq1556 {
					if b {
						yynn1556++
					}
				}
				r.EncodeMapStart(yynn1556)
				yynn1556 = 0
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1558 := z.EncBinary()
				_ = yym1558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1559 := z.EncBinary()
				_ = yym1559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1561 := z.EncBinary()
				_ = yym1561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1562 := z.EncBinary()
				_ = yym1562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1564 := z.EncBinary()
						_ = yym1564
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1565 := z.EncBinary()
						_ = yym1565
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1567 := z.EncBinary()
						_ = yym1567
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1568 := z.EncBinary()
						_ = yym1568
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[4] {
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1556[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1574 := z.EncBinary()
						_ = yym1574
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1576 := z.EncBinary()
						_ = yym1576
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[7] {
					yy1579 := &x.Resources
					yy1579.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1580 := &x.Resources
					yy1580.CodecEncodeSelf(e)
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1582 := z.EncBinary()
						_ = yym1582
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1583 := z.EncBinary()
						_ = yym1583
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[12] {
					yym1588 := z.EncBinary()
					_ = yym1588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1556[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[15] {
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1556[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[16] {
					yym1596 := z.EncBinary()
					_ = yym1596
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1556[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[17] {
					yym1599 := z.EncBinary()
					_ = yym1599
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1556[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1600 := z.EncBinary()
					_ = yym1600
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1601 := z.DecBinary()
	_ = yym1601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1602 := r.ContainerType()
		if yyct1602 == codecSelferValueTypeMap1234 {
			yyl1602 := r.ReadMapStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1602, d)
			}
		} else if yyct1602 == codecSelferValueTypeArray1234 {
			yyl1602 := r.ReadArrayStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1603Slc
	var yyhl1603 bool = l >= 0
	for yyj1603 := 0; ; yyj1603++ {
		if yyhl1603 {
			if yyj1603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1603Slc = r.DecodeBytes(yys1603Slc, true, true)
		yys1603 := string(yys1603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1603 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1606 := &x.Command
				yym1607 := z.DecBinary()
				_ = yym1607
				if false {
				} else {
					z.F.DecSliceStringX(yyv1606, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1608 := &x.Args
				yym1609 := z.DecBinary()
				_ = yym1609
				if false {
				} else {
					z.F.DecSliceStringX(yyv1608, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1611 := &x.Ports
				yym1612 := z.DecBinary()
				_ = yym1612
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1611), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1613 := &x.Env
				yym1614 := z.DecBinary()
				_ = yym1614
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1613), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1615 := &x.Resources
				yyv1615.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1616 := &x.VolumeMounts
				yym1617 := z.DecBinary()
				_ = yym1617
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1616), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1603)
		} // end switch yys1603
	} // end for yyj1603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1627 int
	var yyb1627 bool
	var yyhl1627 bool = l >= 0
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1630 := &x.Command
		yym1631 := z.DecBinary()
		_ = yym1631
		if false {
		} else {
			z.F.DecSliceStringX(yyv1630, false, d)
		}
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1632 := &x.Args
		yym1633 := z.DecBinary()
		_ = yym1633
		if false {
		} else {
			z.F.DecSliceStringX(yyv1632, false, d)
		}
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1635 := &x.Ports
		yym1636 := z.DecBinary()
		_ = yym1636
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1635), d)
		}
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1637 := &x.Env
		yym1638 := z.DecBinary()
		_ = yym1638
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1637), d)
		}
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1639 := &x.Resources
		yyv1639.CodecDecodeSelf(d)
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1640 := &x.VolumeMounts
		yym1641 := z.DecBinary()
		_ = yym1641
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1640), d)
		}
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1627++
		if yyhl1627 {
			yyb1627 = yyj1627 > l
		} else {
			yyb1627 = r.CheckBreak()
		}
		if yyb1627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1651 := z.EncBinary()
		_ = yym1651
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1652 := !z.EncBinary()
			yy2arr1652 := z.EncBasicHandle().StructToArray
			var yyq1652 [3]bool
			_, _, _ = yysep1652, yyq1652, yy2arr1652
			const yyr1652 bool = false
			yyq1652[0] = x.Exec != nil
			yyq1652[1] = x.HTTPGet != nil
			yyq1652[2] = x.TCPSocket != nil
			var yynn1652 int
			if yyr1652 || yy2arr1652 {
				r.EncodeArrayStart(3)
			} else {
				yynn1652 = 0
				for _, b := range yyq1652 {
					if b {
						yynn1652++
					}
				}
				r.EncodeMapStart(yynn1652)
				yynn1652 = 0
			}
			if yyr1652 || yy2arr1652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1652[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1652[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1652 || yy2arr1652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1652[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1652[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1652 || yy2arr1652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1652[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1652[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1652 || yy2arr1652 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1656 := z.DecBinary()
	_ = yym1656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1657 := r.ContainerType()
		if yyct1657 == codecSelferValueTypeMap1234 {
			yyl1657 := r.ReadMapStart()
			if yyl1657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1657, d)
			}
		} else if yyct1657 == codecSelferValueTypeArray1234 {
			yyl1657 := r.ReadArrayStart()
			if yyl1657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1658Slc
	var yyhl1658 bool = l >= 0
	for yyj1658 := 0; ; yyj1658++ {
		if yyhl1658 {
			if yyj1658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1658Slc = r.DecodeBytes(yys1658Slc, true, true)
		yys1658 := string(yys1658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1658 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1658)
		} // end switch yys1658
	} // end for yyj1658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1662 int
	var yyb1662 bool
	var yyhl1662 bool = l >= 0
	yyj1662++
	if yyhl1662 {
		yyb1662 = yyj1662 > l
	} else {
		yyb1662 = r.CheckBreak()
	}
	if yyb1662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1662++
	if yyhl1662 {
		yyb1662 = yyj1662 > l
	} else {
		yyb1662 = r.CheckBreak()
	}
	if yyb1662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1662++
	if yyhl1662 {
		yyb1662 = yyj1662 > l
	} else {
		yyb1662 = r.CheckBreak()
	}
	if yyb1662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1662++
		if yyhl1662 {
			yyb1662 = yyj1662 > l
		} else {
			yyb1662 = r.CheckBreak()
		}
		if yyb1662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1666 := z.EncBinary()
		_ = yym1666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1667 := !z.EncBinary()
			yy2arr1667 := z.EncBasicHandle().StructToArray
			var yyq1667 [2]bool
			_, _, _ = yysep1667, yyq1667, yy2arr1667
			const yyr1667 bool = false
			yyq1667[0] = x.PostStart != nil
			yyq1667[1] = x.PreStop != nil
			var yynn1667 int
			if yyr1667 || yy2arr1667 {
				r.EncodeArrayStart(2)
			} else {
				yynn1667 = 0
				for _, b := range yyq1667 {
					if b {
						yynn1667++
					}
				}
				r.EncodeMapStart(yynn1667)
				yynn1667 = 0
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1667[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1667[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1670 := z.DecBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1671 := r.ContainerType()
		if yyct1671 == codecSelferValueTypeMap1234 {
			yyl1671 := r.ReadMapStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1671, d)
			}
		} else if yyct1671 == codecSelferValueTypeArray1234 {
			yyl1671 := r.ReadArrayStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1672Slc
	var yyhl1672 bool = l >= 0
	for yyj1672 := 0; ; yyj1672++ {
		if yyhl1672 {
			if yyj1672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1672Slc = r.DecodeBytes(yys1672Slc, true, true)
		yys1672 := string(yys1672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1672 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1672)
		} // end switch yys1672
	} // end for yyj1672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1675 int
	var yyb1675 bool
	var yyhl1675 bool = l >= 0
	yyj1675++
	if yyhl1675 {
		yyb1675 = yyj1675 > l
	} else {
		yyb1675 = r.CheckBreak()
	}
	if yyb1675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1675++
	if yyhl1675 {
		yyb1675 = yyj1675 > l
	} else {
		yyb1675 = r.CheckBreak()
	}
	if yyb1675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1675++
		if yyhl1675 {
			yyb1675 = yyj1675 > l
		} else {
			yyb1675 = r.CheckBreak()
		}
		if yyb1675 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1675-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1678 := z.EncBinary()
	_ = yym1678
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1679 := z.DecBinary()
	_ = yym1679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1680 := z.EncBinary()
		_ = yym1680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1681 := !z.EncBinary()
			yy2arr1681 := z.EncBasicHandle().StructToArray
			var yyq1681 [2]bool
			_, _, _ = yysep1681, yyq1681, yy2arr1681
			const yyr1681 bool = false
			yyq1681[0] = x.Reason != ""
			yyq1681[1] = x.Message != ""
			var yynn1681 int
			if yyr1681 || yy2arr1681 {
				r.EncodeArrayStart(2)
			} else {
				yynn1681 = 0
				for _, b := range yyq1681 {
					if b {
						yynn1681++
					}
				}
				r.EncodeMapStart(yynn1681)
				yynn1681 = 0
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[0] {
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1681[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[1] {
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1688 := z.DecBinary()
	_ = yym1688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1689 := r.ContainerType()
		if yyct1689 == codecSelferValueTypeMap1234 {
			yyl1689 := r.ReadMapStart()
			if yyl1689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1689, d)
			}
		} else if yyct1689 == codecSelferValueTypeArray1234 {
			yyl1689 := r.ReadArrayStart()
			if yyl1689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1690Slc
	var yyhl1690 bool = l >= 0
	for yyj1690 := 0; ; yyj1690++ {
		if yyhl1690 {
			if yyj1690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1690Slc = r.DecodeBytes(yys1690Slc, true, true)
		yys1690 := string(yys1690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1690 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1690)
		} // end switch yys1690
	} // end for yyj1690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1693 int
	var yyb1693 bool
	var yyhl1693 bool = l >= 0
	yyj1693++
	if yyhl1693 {
		yyb1693 = yyj1693 > l
	} else {
		yyb1693 = r.CheckBreak()
	}
	if yyb1693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1693++
	if yyhl1693 {
		yyb1693 = yyj1693 > l
	} else {
		yyb1693 = r.CheckBreak()
	}
	if yyb1693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1693++
		if yyhl1693 {
			yyb1693 = yyj1693 > l
		} else {
			yyb1693 = r.CheckBreak()
		}
		if yyb1693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1696 := z.EncBinary()
		_ = yym1696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1697 := !z.EncBinary()
			yy2arr1697 := z.EncBasicHandle().StructToArray
			var yyq1697 [1]bool
			_, _, _ = yysep1697, yyq1697, yy2arr1697
			const yyr1697 bool = false
			yyq1697[0] = true
			var yynn1697 int
			if yyr1697 || yy2arr1697 {
				r.EncodeArrayStart(1)
			} else {
				yynn1697 = 0
				for _, b := range yyq1697 {
					if b {
						yynn1697++
					}
				}
				r.EncodeMapStart(yynn1697)
				yynn1697 = 0
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[0] {
					yy1699 := &x.StartedAt
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1699) {
					} else if yym1700 {
						z.EncBinaryMarshal(yy1699)
					} else if !yym1700 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1699)
					} else {
						z.EncFallback(yy1699)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1701 := &x.StartedAt
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1701) {
					} else if yym1702 {
						z.EncBinaryMarshal(yy1701)
					} else if !yym1702 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1701)
					} else {
						z.EncFallback(yy1701)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1703 := z.DecBinary()
	_ = yym1703
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1704 := r.ContainerType()
		if yyct1704 == codecSelferValueTypeMap1234 {
			yyl1704 := r.ReadMapStart()
			if yyl1704 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1704, d)
			}
		} else if yyct1704 == codecSelferValueTypeArray1234 {
			yyl1704 := r.ReadArrayStart()
			if yyl1704 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1704, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1705Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1705Slc
	var yyhl1705 bool = l >= 0
	for yyj1705 := 0; ; yyj1705++ {
		if yyhl1705 {
			if yyj1705 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1705Slc = r.DecodeBytes(yys1705Slc, true, true)
		yys1705 := string(yys1705Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1705 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1706 := &x.StartedAt
				yym1707 := z.DecBinary()
				_ = yym1707
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1706) {
				} else if yym1707 {
					z.DecBinaryUnmarshal(yyv1706)
				} else if !yym1707 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1706)
				} else {
					z.DecFallback(yyv1706, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1705)
		} // end switch yys1705
	} // end for yyj1705
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1708 int
	var yyb1708 bool
	var yyhl1708 bool = l >= 0
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1709 := &x.StartedAt
		yym1710 := z.DecBinary()
		_ = yym1710
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1709) {
		} else if yym1710 {
			z.DecBinaryUnmarshal(yyv1709)
		} else if !yym1710 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1709)
		} else {
			z.DecFallback(yyv1709, false)
		}
	}
	for {
		yyj1708++
		if yyhl1708 {
			yyb1708 = yyj1708 > l
		} else {
			yyb1708 = r.CheckBreak()
		}
		if yyb1708 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1708-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1711 := z.EncBinary()
		_ = yym1711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1712 := !z.EncBinary()
			yy2arr1712 := z.EncBasicHandle().StructToArray
			var yyq1712 [7]bool
			_, _, _ = yysep1712, yyq1712, yy2arr1712
			const yyr1712 bool = false
			yyq1712[1] = x.Signal != 0
			yyq1712[2] = x.Reason != ""
			yyq1712[3] = x.Message != ""
			yyq1712[4] = true
			yyq1712[5] = true
			yyq1712[6] = x.ContainerID != ""
			var yynn1712 int
			if yyr1712 || yy2arr1712 {
				r.EncodeArrayStart(7)
			} else {
				yynn1712 = 1
				for _, b := range yyq1712 {
					if b {
						yynn1712++
					}
				}
				r.EncodeMapStart(yynn1712)
				yynn1712 = 0
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1714 := z.EncBinary()
				_ = yym1714
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1715 := z.EncBinary()
				_ = yym1715
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[1] {
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1718 := z.EncBinary()
					_ = yym1718
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[2] {
					yym1720 := z.EncBinary()
					_ = yym1720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[3] {
					yym1723 := z.EncBinary()
					_ = yym1723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[4] {
					yy1726 := &x.StartedAt
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1726) {
					} else if yym1727 {
						z.EncBinaryMarshal(yy1726)
					} else if !yym1727 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1726)
					} else {
						z.EncFallback(yy1726)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1712[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1728 := &x.StartedAt
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1728) {
					} else if yym1729 {
						z.EncBinaryMarshal(yy1728)
					} else if !yym1729 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1728)
					} else {
						z.EncFallback(yy1728)
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[5] {
					yy1731 := &x.FinishedAt
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1731) {
					} else if yym1732 {
						z.EncBinaryMarshal(yy1731)
					} else if !yym1732 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1731)
					} else {
						z.EncFallback(yy1731)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1712[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1733 := &x.FinishedAt
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1733) {
					} else if yym1734 {
						z.EncBinaryMarshal(yy1733)
					} else if !yym1734 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1733)
					} else {
						z.EncFallback(yy1733)
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[6] {
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1712[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1738 := z.DecBinary()
	_ = yym1738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1739 := r.ContainerType()
		if yyct1739 == codecSelferValueTypeMap1234 {
			yyl1739 := r.ReadMapStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1739, d)
			}
		} else if yyct1739 == codecSelferValueTypeArray1234 {
			yyl1739 := r.ReadArrayStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1740Slc
	var yyhl1740 bool = l >= 0
	for yyj1740 := 0; ; yyj1740++ {
		if yyhl1740 {
			if yyj1740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1740Slc = r.DecodeBytes(yys1740Slc, true, true)
		yys1740 := string(yys1740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1740 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1745 := &x.StartedAt
				yym1746 := z.DecBinary()
				_ = yym1746
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1745) {
				} else if yym1746 {
					z.DecBinaryUnmarshal(yyv1745)
				} else if !yym1746 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1745)
				} else {
					z.DecFallback(yyv1745, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1747 := &x.FinishedAt
				yym1748 := z.DecBinary()
				_ = yym1748
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1747) {
				} else if yym1748 {
					z.DecBinaryUnmarshal(yyv1747)
				} else if !yym1748 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1747)
				} else {
					z.DecFallback(yyv1747, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1740)
		} // end switch yys1740
	} // end for yyj1740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1750 int
	var yyb1750 bool
	var yyhl1750 bool = l >= 0
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1755 := &x.StartedAt
		yym1756 := z.DecBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1755) {
		} else if yym1756 {
			z.DecBinaryUnmarshal(yyv1755)
		} else if !yym1756 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1755)
		} else {
			z.DecFallback(yyv1755, false)
		}
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1757 := &x.FinishedAt
		yym1758 := z.DecBinary()
		_ = yym1758
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1757) {
		} else if yym1758 {
			z.DecBinaryUnmarshal(yyv1757)
		} else if !yym1758 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1757)
		} else {
			z.DecFallback(yyv1757, false)
		}
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1750++
		if yyhl1750 {
			yyb1750 = yyj1750 > l
		} else {
			yyb1750 = r.CheckBreak()
		}
		if yyb1750 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1750-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [3]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[0] = x.Waiting != nil
			yyq1761[1] = x.Running != nil
			yyq1761[2] = x.Terminated != nil
			var yynn1761 int
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(3)
			} else {
				yynn1761 = 0
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
				yynn1761 = 0
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1765 := z.DecBinary()
	_ = yym1765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1766 := r.ContainerType()
		if yyct1766 == codecSelferValueTypeMap1234 {
			yyl1766 := r.ReadMapStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1766, d)
			}
		} else if yyct1766 == codecSelferValueTypeArray1234 {
			yyl1766 := r.ReadArrayStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1767Slc
	var yyhl1767 bool = l >= 0
	for yyj1767 := 0; ; yyj1767++ {
		if yyhl1767 {
			if yyj1767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1767Slc = r.DecodeBytes(yys1767Slc, true, true)
		yys1767 := string(yys1767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1767 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1767)
		} // end switch yys1767
	} // end for yyj1767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1771 int
	var yyb1771 bool
	var yyhl1771 bool = l >= 0
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1771++
		if yyhl1771 {
			yyb1771 = yyj1771 > l
		} else {
			yyb1771 = r.CheckBreak()
		}
		if yyb1771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1775 := z.EncBinary()
		_ = yym1775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1776 := !z.EncBinary()
			yy2arr1776 := z.EncBasicHandle().StructToArray
			var yyq1776 [9]bool
			_, _, _ = yysep1776, yyq1776, yy2arr1776
			const yyr1776 bool = false
			yyq1776[1] = true
			yyq1776[2] = true
			yyq1776[7] = x.ContainerID != ""
			yyq1776[8] = len(x.Ports) != 0
			var yynn1776 int
			if yyr1776 || yy2arr1776 {
				r.EncodeArrayStart(9)
			} else {
				yynn1776 = 5
				for _, b := range yyq1776 {
					if b {
						yynn1776++
					}
				}
				r.EncodeMapStart(yynn1776)
				yynn1776 = 0
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1778 := z.EncBinary()
				_ = yym1778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1779 := z.EncBinary()
				_ = yym1779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1776[1] {
					yy1781 := &x.State
					yy1781.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1776[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1782 := &x.State
					yy1782.CodecEncodeSelf(e)
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1776[2] {
					yy1784 := &x.LastTerminationState
					yy1784.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1776[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1785 := &x.LastTerminationState
					yy1785.CodecEncodeSelf(e)
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1787 := z.EncBinary()
				_ = yym1787
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1788 := z.EncBinary()
				_ = yym1788
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1790 := z.EncBinary()
				_ = yym1790
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1791 := z.EncBinary()
				_ = yym1791
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1793 := z.EncBinary()
				_ = yym1793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1794 := z.EncBinary()
				_ = yym1794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1796 := z.EncBinary()
				_ = yym1796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1797 := z.EncBinary()
				_ = yym1797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1776[7] {
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1776[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1800 := z.EncBinary()
					_ = yym1800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1776[8] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1802 := z.EncBinary()
						_ = yym1802
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1776[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1803 := z.EncBinary()
						_ = yym1803
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1805 := r.ContainerType()
		if yyct1805 == codecSelferValueTypeMap1234 {
			yyl1805 := r.ReadMapStart()
			if yyl1805 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1805, d)
			}
		} else if yyct1805 == codecSelferValueTypeArray1234 {
			yyl1805 := r.ReadArrayStart()
			if yyl1805 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1805, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1806Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1806Slc
	var yyhl1806 bool = l >= 0
	for yyj1806 := 0; ; yyj1806++ {
		if yyhl1806 {
			if yyj1806 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1806Slc = r.DecodeBytes(yys1806Slc, true, true)
		yys1806 := string(yys1806Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1806 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1808 := &x.State
				yyv1808.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1809 := &x.LastTerminationState
				yyv1809.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1815 := &x.Ports
				yym1816 := z.DecBinary()
				_ = yym1816
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1815), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1806)
		} // end switch yys1806
	} // end for yyj1806
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1817 int
	var yyb1817 bool
	var yyhl1817 bool = l >= 0
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1819 := &x.State
		yyv1819.CodecDecodeSelf(d)
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1820 := &x.LastTerminationState
		yyv1820.CodecDecodeSelf(d)
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1826 := &x.Ports
		yym1827 := z.DecBinary()
		_ = yym1827
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1826), d)
		}
	}
	for {
		yyj1817++
		if yyhl1817 {
			yyb1817 = yyj1817 > l
		} else {
			yyb1817 = r.CheckBreak()
		}
		if yyb1817 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1817-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1828 := z.EncBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1829 := z.DecBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1830 := z.EncBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1831 := z.DecBinary()
	_ = yym1831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1832 := z.EncBinary()
		_ = yym1832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1833 := !z.EncBinary()
			yy2arr1833 := z.EncBasicHandle().StructToArray
			var yyq1833 [6]bool
			_, _, _ = yysep1833, yyq1833, yy2arr1833
			const yyr1833 bool = false
			yyq1833[2] = true
			yyq1833[3] = true
			yyq1833[4] = x.Reason != ""
			yyq1833[5] = x.Message != ""
			var yynn1833 int
			if yyr1833 || yy2arr1833 {
				r.EncodeArrayStart(6)
			} else {
				yynn1833 = 2
				for _, b := range yyq1833 {
					if b {
						yynn1833++
					}
				}
				r.EncodeMapStart(yynn1833)
				yynn1833 = 0
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[2] {
					yy1837 := &x.LastProbeTime
					yym1838 := z.EncBinary()
					_ = yym1838
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1837) {
					} else if yym1838 {
						z.EncBinaryMarshal(yy1837)
					} else if !yym1838 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1837)
					} else {
						z.EncFallback(yy1837)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1833[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1839 := &x.LastProbeTime
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1839) {
					} else if yym1840 {
						z.EncBinaryMarshal(yy1839)
					} else if !yym1840 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1839)
					} else {
						z.EncFallback(yy1839)
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[3] {
					yy1842 := &x.LastTransitionTime
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1842) {
					} else if yym1843 {
						z.EncBinaryMarshal(yy1842)
					} else if !yym1843 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1842)
					} else {
						z.EncFallback(yy1842)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1833[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1844 := &x.LastTransitionTime
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1844) {
					} else if yym1845 {
						z.EncBinaryMarshal(yy1844)
					} else if !yym1845 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1844)
					} else {
						z.EncFallback(yy1844)
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[4] {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1833[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[5] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1833[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1852 := z.DecBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1853 := r.ContainerType()
		if yyct1853 == codecSelferValueTypeMap1234 {
			yyl1853 := r.ReadMapStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1853, d)
			}
		} else if yyct1853 == codecSelferValueTypeArray1234 {
			yyl1853 := r.ReadArrayStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1854Slc
	var yyhl1854 bool = l >= 0
	for yyj1854 := 0; ; yyj1854++ {
		if yyhl1854 {
			if yyj1854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1854Slc = r.DecodeBytes(yys1854Slc, true, true)
		yys1854 := string(yys1854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1854 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1857 := &x.LastProbeTime
				yym1858 := z.DecBinary()
				_ = yym1858
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1857) {
				} else if yym1858 {
					z.DecBinaryUnmarshal(yyv1857)
				} else if !yym1858 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1857)
				} else {
					z.DecFallback(yyv1857, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1859 := &x.LastTransitionTime
				yym1860 := z.DecBinary()
				_ = yym1860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1859) {
				} else if yym1860 {
					z.DecBinaryUnmarshal(yyv1859)
				} else if !yym1860 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1859)
				} else {
					z.DecFallback(yyv1859, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1854)
		} // end switch yys1854
	} // end for yyj1854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1863 int
	var yyb1863 bool
	var yyhl1863 bool = l >= 0
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1866 := &x.LastProbeTime
		yym1867 := z.DecBinary()
		_ = yym1867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1866) {
		} else if yym1867 {
			z.DecBinaryUnmarshal(yyv1866)
		} else if !yym1867 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1866)
		} else {
			z.DecFallback(yyv1866, false)
		}
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1868 := &x.LastTransitionTime
		yym1869 := z.DecBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1868) {
		} else if yym1869 {
			z.DecBinaryUnmarshal(yyv1868)
		} else if !yym1869 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1868)
		} else {
			z.DecFallback(yyv1868, false)
		}
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1863++
		if yyhl1863 {
			yyb1863 = yyj1863 > l
		} else {
			yyb1863 = r.CheckBreak()
		}
		if yyb1863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1872 := z.EncBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1873 := z.DecBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1874 := z.EncBinary()
		_ = yym1874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1875 := !z.EncBinary()
			yy2arr1875 := z.EncBasicHandle().StructToArray
			var yyq1875 [4]bool
			_, _, _ = yysep1875, yyq1875, yy2arr1875
			const yyr1875 bool = false
			yyq1875[0] = x.Kind != ""
			yyq1875[1] = x.APIVersion != ""
			yyq1875[2] = true
			var yynn1875 int
			if yyr1875 || yy2arr1875 {
				r.EncodeArrayStart(4)
			} else {
				yynn1875 = 1
				for _, b := range yyq1875 {
					if b {
						yynn1875++
					}
				}
				r.EncodeMapStart(yynn1875)
				yynn1875 = 0
			}
			if yyr1875 || yy2arr1875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1875[0] {
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1875[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1878 := z.EncBinary()
					_ = yym1878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1875 || yy2arr1875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1875[1] {
					yym1880 := z.EncBinary()
					_ = yym1880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1875[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1881 := z.EncBinary()
					_ = yym1881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1875 || yy2arr1875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1875[2] {
					yy1883 := &x.ListMeta
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1883) {
					} else {
						z.EncFallback(yy1883)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1875[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1885 := &x.ListMeta
					yym1886 := z.EncBinary()
					_ = yym1886
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1885) {
					} else {
						z.EncFallback(yy1885)
					}
				}
			}
			if yyr1875 || yy2arr1875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1875 || yy2arr1875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1890 := z.DecBinary()
	_ = yym1890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1891 := r.ContainerType()
		if yyct1891 == codecSelferValueTypeMap1234 {
			yyl1891 := r.ReadMapStart()
			if yyl1891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1891, d)
			}
		} else if yyct1891 == codecSelferValueTypeArray1234 {
			yyl1891 := r.ReadArrayStart()
			if yyl1891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1892Slc
	var yyhl1892 bool = l >= 0
	for yyj1892 := 0; ; yyj1892++ {
		if yyhl1892 {
			if yyj1892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1892Slc = r.DecodeBytes(yys1892Slc, true, true)
		yys1892 := string(yys1892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1892 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1895 := &x.ListMeta
				yym1896 := z.DecBinary()
				_ = yym1896
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1895) {
				} else {
					z.DecFallback(yyv1895, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1897 := &x.Items
				yym1898 := z.DecBinary()
				_ = yym1898
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1897), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1892)
		} // end switch yys1892
	} // end for yyj1892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1899 int
	var yyb1899 bool
	var yyhl1899 bool = l >= 0
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1902 := &x.ListMeta
		yym1903 := z.DecBinary()
		_ = yym1903
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1902) {
		} else {
			z.DecFallback(yyv1902, false)
		}
	}
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1904 := &x.Items
		yym1905 := z.DecBinary()
		_ = yym1905
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1904), d)
		}
	}
	for {
		yyj1899++
		if yyhl1899 {
			yyb1899 = yyj1899 > l
		} else {
			yyb1899 = r.CheckBreak()
		}
		if yyb1899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1906 := z.EncBinary()
	_ = yym1906
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1907 := z.DecBinary()
	_ = yym1907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1908 := z.EncBinary()
		_ = yym1908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1909 := !z.EncBinary()
			yy2arr1909 := z.EncBasicHandle().StructToArray
			var yyq1909 [1]bool
			_, _, _ = yysep1909, yyq1909, yy2arr1909
			const yyr1909 bool = false
			var yynn1909 int
			if yyr1909 || yy2arr1909 {
				r.EncodeArrayStart(1)
			} else {
				yynn1909 = 1
				for _, b := range yyq1909 {
					if b {
						yynn1909++
					}
				}
				r.EncodeMapStart(yynn1909)
				yynn1909 = 0
			}
			if yyr1909 || yy2arr1909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1909 || yy2arr1909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1913 := z.DecBinary()
	_ = yym1913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1914 := r.ContainerType()
		if yyct1914 == codecSelferValueTypeMap1234 {
			yyl1914 := r.ReadMapStart()
			if yyl1914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1914, d)
			}
		} else if yyct1914 == codecSelferValueTypeArray1234 {
			yyl1914 := r.ReadArrayStart()
			if yyl1914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1915Slc
	var yyhl1915 bool = l >= 0
	for yyj1915 := 0; ; yyj1915++ {
		if yyhl1915 {
			if yyj1915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1915Slc = r.DecodeBytes(yys1915Slc, true, true)
		yys1915 := string(yys1915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1915 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1916 := &x.NodeSelectorTerms
				yym1917 := z.DecBinary()
				_ = yym1917
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1916), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1915)
		} // end switch yys1915
	} // end for yyj1915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1918 int
	var yyb1918 bool
	var yyhl1918 bool = l >= 0
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1919 := &x.NodeSelectorTerms
		yym1920 := z.DecBinary()
		_ = yym1920
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1919), d)
		}
	}
	for {
		yyj1918++
		if yyhl1918 {
			yyb1918 = yyj1918 > l
		} else {
			yyb1918 = r.CheckBreak()
		}
		if yyb1918 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1918-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1921 := z.EncBinary()
		_ = yym1921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1922 := !z.EncBinary()
			yy2arr1922 := z.EncBasicHandle().StructToArray
			var yyq1922 [1]bool
			_, _, _ = yysep1922, yyq1922, yy2arr1922
			const yyr1922 bool = false
			var yynn1922 int
			if yyr1922 || yy2arr1922 {
				r.EncodeArrayStart(1)
			} else {
				yynn1922 = 1
				for _, b := range yyq1922 {
					if b {
						yynn1922++
					}
				}
				r.EncodeMapStart(yynn1922)
				yynn1922 = 0
			}
			if yyr1922 || yy2arr1922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1922 || yy2arr1922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1926 := z.DecBinary()
	_ = yym1926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1927 := r.ContainerType()
		if yyct1927 == codecSelferValueTypeMap1234 {
			yyl1927 := r.ReadMapStart()
			if yyl1927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1927, d)
			}
		} else if yyct1927 == codecSelferValueTypeArray1234 {
			yyl1927 := r.ReadArrayStart()
			if yyl1927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1928Slc
	var yyhl1928 bool = l >= 0
	for yyj1928 := 0; ; yyj1928++ {
		if yyhl1928 {
			if yyj1928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1928Slc = r.DecodeBytes(yys1928Slc, true, true)
		yys1928 := string(yys1928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1928 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1929 := &x.MatchExpressions
				yym1930 := z.DecBinary()
				_ = yym1930
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1929), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1928)
		} // end switch yys1928
	} // end for yyj1928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1931 int
	var yyb1931 bool
	var yyhl1931 bool = l >= 0
	yyj1931++
	if yyhl1931 {
		yyb1931 = yyj1931 > l
	} else {
		yyb1931 = r.CheckBreak()
	}
	if yyb1931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1932 := &x.MatchExpressions
		yym1933 := z.DecBinary()
		_ = yym1933
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1932), d)
		}
	}
	for {
		yyj1931++
		if yyhl1931 {
			yyb1931 = yyj1931 > l
		} else {
			yyb1931 = r.CheckBreak()
		}
		if yyb1931 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1931-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1934 := z.EncBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1935 := !z.EncBinary()
			yy2arr1935 := z.EncBasicHandle().StructToArray
			var yyq1935 [3]bool
			_, _, _ = yysep1935, yyq1935, yy2arr1935
			const yyr1935 bool = false
			yyq1935[2] = len(x.Values) != 0
			var yynn1935 int
			if yyr1935 || yy2arr1935 {
				r.EncodeArrayStart(3)
			} else {
				yynn1935 = 2
				for _, b := range yyq1935 {
					if b {
						yynn1935++
					}
				}
				r.EncodeMapStart(yynn1935)
				yynn1935 = 0
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1937 := z.EncBinary()
				_ = yym1937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1938 := z.EncBinary()
				_ = yym1938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1941 := z.EncBinary()
						_ = yym1941
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1942 := z.EncBinary()
						_ = yym1942
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1943 := z.DecBinary()
	_ = yym1943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1944 := r.ContainerType()
		if yyct1944 == codecSelferValueTypeMap1234 {
			yyl1944 := r.ReadMapStart()
			if yyl1944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1944, d)
			}
		} else if yyct1944 == codecSelferValueTypeArray1234 {
			yyl1944 := r.ReadArrayStart()
			if yyl1944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1945Slc
	var yyhl1945 bool = l >= 0
	for yyj1945 := 0; ; yyj1945++ {
		if yyhl1945 {
			if yyj1945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1945Slc = r.DecodeBytes(yys1945Slc, true, true)
		yys1945 := string(yys1945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1945 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1948 := &x.Values
				yym1949 := z.DecBinary()
				_ = yym1949
				if false {
				} else {
					z.F.DecSliceStringX(yyv1948, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1945)
		} // end switch yys1945
	} // end for yyj1945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1950 int
	var yyb1950 bool
	var yyhl1950 bool = l >= 0
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1953 := &x.Values
		yym1954 := z.DecBinary()
		_ = yym1954
		if false {
		} else {
			z.F.DecSliceStringX(yyv1953, false, d)
		}
	}
	for {
		yyj1950++
		if yyhl1950 {
			yyb1950 = yyj1950 > l
		} else {
			yyb1950 = r.CheckBreak()
		}
		if yyb1950 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1950-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1955 := z.EncBinary()
	_ = yym1955
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1956 := z.DecBinary()
	_ = yym1956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1957 := z.EncBinary()
		_ = yym1957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1958 := !z.EncBinary()
			yy2arr1958 := z.EncBasicHandle().StructToArray
			var yyq1958 [3]bool
			_, _, _ = yysep1958, yyq1958, yy2arr1958
			const yyr1958 bool = false
			yyq1958[0] = x.NodeAffinity != nil
			yyq1958[1] = x.PodAffinity != nil
			yyq1958[2] = x.PodAntiAffinity != nil
			var yynn1958 int
			if yyr1958 || yy2arr1958 {
				r.EncodeArrayStart(3)
			} else {
				yynn1958 = 0
				for _, b := range yyq1958 {
					if b {
						yynn1958++
					}
				}
				r.EncodeMapStart(yynn1958)
				yynn1958 = 0
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1958[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1962 := z.DecBinary()
	_ = yym1962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1963 := r.ContainerType()
		if yyct1963 == codecSelferValueTypeMap1234 {
			yyl1963 := r.ReadMapStart()
			if yyl1963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1963, d)
			}
		} else if yyct1963 == codecSelferValueTypeArray1234 {
			yyl1963 := r.ReadArrayStart()
			if yyl1963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1964Slc
	var yyhl1964 bool = l >= 0
	for yyj1964 := 0; ; yyj1964++ {
		if yyhl1964 {
			if yyj1964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1964Slc = r.DecodeBytes(yys1964Slc, true, true)
		yys1964 := string(yys1964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1964 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1964)
		} // end switch yys1964
	} // end for yyj1964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1968 int
	var yyb1968 bool
	var yyhl1968 bool = l >= 0
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1968++
		if yyhl1968 {
			yyb1968 = yyj1968 > l
		} else {
			yyb1968 = r.CheckBreak()
		}
		if yyb1968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1972 := z.EncBinary()
		_ = yym1972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1973 := !z.EncBinary()
			yy2arr1973 := z.EncBasicHandle().StructToArray
			var yyq1973 [2]bool
			_, _, _ = yysep1973, yyq1973, yy2arr1973
			const yyr1973 bool = false
			yyq1973[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1973[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1973 int
			if yyr1973 || yy2arr1973 {
				r.EncodeArrayStart(2)
			} else {
				yynn1973 = 0
				for _, b := range yyq1973 {
					if b {
						yynn1973++
					}
				}
				r.EncodeMapStart(yynn1973)
				yynn1973 = 0
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1973[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1975 := z.EncBinary()
						_ = yym1975
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1976 := z.EncBinary()
						_ = yym1976
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1973[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1978 := z.EncBinary()
						_ = yym1978
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1979 := z.EncBinary()
						_ = yym1979
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1980 := z.DecBinary()
	_ = yym1980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1981 := r.ContainerType()
		if yyct1981 == codecSelferValueTypeMap1234 {
			yyl1981 := r.ReadMapStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1981, d)
			}
		} else if yyct1981 == codecSelferValueTypeArray1234 {
			yyl1981 := r.ReadArrayStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1982Slc
	var yyhl1982 bool = l >= 0
	for yyj1982 := 0; ; yyj1982++ {
		if yyhl1982 {
			if yyj1982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1982Slc = r.DecodeBytes(yys1982Slc, true, true)
		yys1982 := string(yys1982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1982 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1983 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1984 := z.DecBinary()
				_ = yym1984
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1983), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1985 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1986 := z.DecBinary()
				_ = yym1986
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1985), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1982)
		} // end switch yys1982
	} // end for yyj1982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1987 int
	var yyb1987 bool
	var yyhl1987 bool = l >= 0
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1988 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1989 := z.DecBinary()
		_ = yym1989
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1988), d)
		}
	}
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1990 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1991 := z.DecBinary()
		_ = yym1991
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1990), d)
		}
	}
	for {
		yyj1987++
		if yyhl1987 {
			yyb1987 = yyj1987 > l
		} else {
			yyb1987 = r.CheckBreak()
		}
		if yyb1987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1992 := z.EncBinary()
		_ = yym1992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1993 := !z.EncBinary()
			yy2arr1993 := z.EncBasicHandle().StructToArray
			var yyq1993 [2]bool
			_, _, _ = yysep1993, yyq1993, yy2arr1993
			const yyr1993 bool = false
			yyq1993[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1993[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1993 int
			if yyr1993 || yy2arr1993 {
				r.EncodeArrayStart(2)
			} else {
				yynn1993 = 0
				for _, b := range yyq1993 {
					if b {
						yynn1993++
					}
				}
				r.EncodeMapStart(yynn1993)
				yynn1993 = 0
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1995 := z.EncBinary()
						_ = yym1995
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1996 := z.EncBinary()
						_ = yym1996
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1998 := z.EncBinary()
						_ = yym1998
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1999 := z.EncBinary()
						_ = yym1999
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2000 := z.DecBinary()
	_ = yym2000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2001 := r.ContainerType()
		if yyct2001 == codecSelferValueTypeMap1234 {
			yyl2001 := r.ReadMapStart()
			if yyl2001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2001, d)
			}
		} else if yyct2001 == codecSelferValueTypeArray1234 {
			yyl2001 := r.ReadArrayStart()
			if yyl2001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2002Slc
	var yyhl2002 bool = l >= 0
	for yyj2002 := 0; ; yyj2002++ {
		if yyhl2002 {
			if yyj2002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2002Slc = r.DecodeBytes(yys2002Slc, true, true)
		yys2002 := string(yys2002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2002 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2003 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym2004 := z.DecBinary()
				_ = yym2004
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2003), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2005 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2006 := z.DecBinary()
				_ = yym2006
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2005), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2002)
		} // end switch yys2002
	} // end for yyj2002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2007 int
	var yyb2007 bool
	var yyhl2007 bool = l >= 0
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2008 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym2009 := z.DecBinary()
		_ = yym2009
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2008), d)
		}
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2010 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2011 := z.DecBinary()
		_ = yym2011
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2010), d)
		}
	}
	for {
		yyj2007++
		if yyhl2007 {
			yyb2007 = yyj2007 > l
		} else {
			yyb2007 = r.CheckBreak()
		}
		if yyb2007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2012 := z.EncBinary()
		_ = yym2012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2013 := !z.EncBinary()
			yy2arr2013 := z.EncBasicHandle().StructToArray
			var yyq2013 [2]bool
			_, _, _ = yysep2013, yyq2013, yy2arr2013
			const yyr2013 bool = false
			var yynn2013 int
			if yyr2013 || yy2arr2013 {
				r.EncodeArrayStart(2)
			} else {
				yynn2013 = 2
				for _, b := range yyq2013 {
					if b {
						yynn2013++
					}
				}
				r.EncodeMapStart(yynn2013)
				yynn2013 = 0
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2015 := z.EncBinary()
				_ = yym2015
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2016 := z.EncBinary()
				_ = yym2016
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2018 := &x.PodAffinityTerm
				yy2018.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2019 := &x.PodAffinityTerm
				yy2019.CodecEncodeSelf(e)
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2020 := z.DecBinary()
	_ = yym2020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2021 := r.ContainerType()
		if yyct2021 == codecSelferValueTypeMap1234 {
			yyl2021 := r.ReadMapStart()
			if yyl2021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2021, d)
			}
		} else if yyct2021 == codecSelferValueTypeArray1234 {
			yyl2021 := r.ReadArrayStart()
			if yyl2021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2022Slc
	var yyhl2022 bool = l >= 0
	for yyj2022 := 0; ; yyj2022++ {
		if yyhl2022 {
			if yyj2022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2022Slc = r.DecodeBytes(yys2022Slc, true, true)
		yys2022 := string(yys2022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2022 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv2024 := &x.PodAffinityTerm
				yyv2024.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2022)
		} // end switch yys2022
	} // end for yyj2022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2025 int
	var yyb2025 bool
	var yyhl2025 bool = l >= 0
	yyj2025++
	if yyhl2025 {
		yyb2025 = yyj2025 > l
	} else {
		yyb2025 = r.CheckBreak()
	}
	if yyb2025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2025++
	if yyhl2025 {
		yyb2025 = yyj2025 > l
	} else {
		yyb2025 = r.CheckBreak()
	}
	if yyb2025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv2027 := &x.PodAffinityTerm
		yyv2027.CodecDecodeSelf(d)
	}
	for {
		yyj2025++
		if yyhl2025 {
			yyb2025 = yyj2025 > l
		} else {
			yyb2025 = r.CheckBreak()
		}
		if yyb2025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2028 := z.EncBinary()
		_ = yym2028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2029 := !z.EncBinary()
			yy2arr2029 := z.EncBasicHandle().StructToArray
			var yyq2029 [3]bool
			_, _, _ = yysep2029, yyq2029, yy2arr2029
			const yyr2029 bool = false
			yyq2029[0] = x.LabelSelector != nil
			yyq2029[2] = x.TopologyKey != ""
			var yynn2029 int
			if yyr2029 || yy2arr2029 {
				r.EncodeArrayStart(3)
			} else {
				yynn2029 = 1
				for _, b := range yyq2029 {
					if b {
						yynn2029++
					}
				}
				r.EncodeMapStart(yynn2029)
				yynn2029 = 0
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2031 := z.EncBinary()
						_ = yym2031
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2029[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[2] {
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2029[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2039 := z.DecBinary()
	_ = yym2039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2040 := r.ContainerType()
		if yyct2040 == codecSelferValueTypeMap1234 {
			yyl2040 := r.ReadMapStart()
			if yyl2040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2040, d)
			}
		} else if yyct2040 == codecSelferValueTypeArray1234 {
			yyl2040 := r.ReadArrayStart()
			if yyl2040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2041Slc
	var yyhl2041 bool = l >= 0
	for yyj2041 := 0; ; yyj2041++ {
		if yyhl2041 {
			if yyj2041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2041Slc = r.DecodeBytes(yys2041Slc, true, true)
		yys2041 := string(yys2041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2041 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2043 := z.DecBinary()
				_ = yym2043
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2044 := &x.Namespaces
				yym2045 := z.DecBinary()
				_ = yym2045
				if false {
				} else {
					z.F.DecSliceStringX(yyv2044, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2041)
		} // end switch yys2041
	} // end for yyj2041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2047 int
	var yyb2047 bool
	var yyhl2047 bool = l >= 0
	yyj2047++
	if yyhl2047 {
		yyb2047 = yyj2047 > l
	} else {
		yyb2047 = r.CheckBreak()
	}
	if yyb2047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2049 := z.DecBinary()
		_ = yym2049
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2047++
	if yyhl2047 {
		yyb2047 = yyj2047 > l
	} else {
		yyb2047 = r.CheckBreak()
	}
	if yyb2047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2050 := &x.Namespaces
		yym2051 := z.DecBinary()
		_ = yym2051
		if false {
		} else {
			z.F.DecSliceStringX(yyv2050, false, d)
		}
	}
	yyj2047++
	if yyhl2047 {
		yyb2047 = yyj2047 > l
	} else {
		yyb2047 = r.CheckBreak()
	}
	if yyb2047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2047++
		if yyhl2047 {
			yyb2047 = yyj2047 > l
		} else {
			yyb2047 = r.CheckBreak()
		}
		if yyb2047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2053 := z.EncBinary()
		_ = yym2053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2054 := !z.EncBinary()
			yy2arr2054 := z.EncBasicHandle().StructToArray
			var yyq2054 [2]bool
			_, _, _ = yysep2054, yyq2054, yy2arr2054
			const yyr2054 bool = false
			yyq2054[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2054[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2054 int
			if yyr2054 || yy2arr2054 {
				r.EncodeArrayStart(2)
			} else {
				yynn2054 = 0
				for _, b := range yyq2054 {
					if b {
						yynn2054++
					}
				}
				r.EncodeMapStart(yynn2054)
				yynn2054 = 0
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2054[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2054[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2054[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2057 := z.EncBinary()
						_ = yym2057
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2054[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2058 := z.EncBinary()
						_ = yym2058
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2059 := z.DecBinary()
	_ = yym2059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2060 := r.ContainerType()
		if yyct2060 == codecSelferValueTypeMap1234 {
			yyl2060 := r.ReadMapStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2060, d)
			}
		} else if yyct2060 == codecSelferValueTypeArray1234 {
			yyl2060 := r.ReadArrayStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2061Slc
	var yyhl2061 bool = l >= 0
	for yyj2061 := 0; ; yyj2061++ {
		if yyhl2061 {
			if yyj2061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2061Slc = r.DecodeBytes(yys2061Slc, true, true)
		yys2061 := string(yys2061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2061 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2063 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2064 := z.DecBinary()
				_ = yym2064
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2063), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2061)
		} // end switch yys2061
	} // end for yyj2061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2065 int
	var yyb2065 bool
	var yyhl2065 bool = l >= 0
	yyj2065++
	if yyhl2065 {
		yyb2065 = yyj2065 > l
	} else {
		yyb2065 = r.CheckBreak()
	}
	if yyb2065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2065++
	if yyhl2065 {
		yyb2065 = yyj2065 > l
	} else {
		yyb2065 = r.CheckBreak()
	}
	if yyb2065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2067 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2068 := z.DecBinary()
		_ = yym2068
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2067), d)
		}
	}
	for {
		yyj2065++
		if yyhl2065 {
			yyb2065 = yyj2065 > l
		} else {
			yyb2065 = r.CheckBreak()
		}
		if yyb2065 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2065-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2069 := z.EncBinary()
		_ = yym2069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2070 := !z.EncBinary()
			yy2arr2070 := z.EncBasicHandle().StructToArray
			var yyq2070 [2]bool
			_, _, _ = yysep2070, yyq2070, yy2arr2070
			const yyr2070 bool = false
			var yynn2070 int
			if yyr2070 || yy2arr2070 {
				r.EncodeArrayStart(2)
			} else {
				yynn2070 = 2
				for _, b := range yyq2070 {
					if b {
						yynn2070++
					}
				}
				r.EncodeMapStart(yynn2070)
				yynn2070 = 0
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2072 := z.EncBinary()
				_ = yym2072
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2073 := z.EncBinary()
				_ = yym2073
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2075 := &x.Preference
				yy2075.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2076 := &x.Preference
				yy2076.CodecEncodeSelf(e)
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2077 := z.DecBinary()
	_ = yym2077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2078 := r.ContainerType()
		if yyct2078 == codecSelferValueTypeMap1234 {
			yyl2078 := r.ReadMapStart()
			if yyl2078 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2078, d)
			}
		} else if yyct2078 == codecSelferValueTypeArray1234 {
			yyl2078 := r.ReadArrayStart()
			if yyl2078 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2079Slc
	var yyhl2079 bool = l >= 0
	for yyj2079 := 0; ; yyj2079++ {
		if yyhl2079 {
			if yyj2079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2079Slc = r.DecodeBytes(yys2079Slc, true, true)
		yys2079 := string(yys2079Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2079 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2081 := &x.Preference
				yyv2081.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2079)
		} // end switch yys2079
	} // end for yyj2079
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2082 int
	var yyb2082 bool
	var yyhl2082 bool = l >= 0
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2084 := &x.Preference
		yyv2084.CodecDecodeSelf(d)
	}
	for {
		yyj2082++
		if yyhl2082 {
			yyb2082 = yyj2082 > l
		} else {
			yyb2082 = r.CheckBreak()
		}
		if yyb2082 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2082-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2085 := z.EncBinary()
		_ = yym2085
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2086 := !z.EncBinary()
			yy2arr2086 := z.EncBasicHandle().StructToArray
			var yyq2086 [3]bool
			_, _, _ = yysep2086, yyq2086, yy2arr2086
			const yyr2086 bool = false
			yyq2086[1] = x.Value != ""
			var yynn2086 int
			if yyr2086 || yy2arr2086 {
				r.EncodeArrayStart(3)
			} else {
				yynn2086 = 2
				for _, b := range yyq2086 {
					if b {
						yynn2086++
					}
				}
				r.EncodeMapStart(yynn2086)
				yynn2086 = 0
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2088 := z.EncBinary()
				_ = yym2088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2089 := z.EncBinary()
				_ = yym2089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[1] {
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2086[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2094 := z.DecBinary()
	_ = yym2094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2095 := r.ContainerType()
		if yyct2095 == codecSelferValueTypeMap1234 {
			yyl2095 := r.ReadMapStart()
			if yyl2095 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2095, d)
			}
		} else if yyct2095 == codecSelferValueTypeArray1234 {
			yyl2095 := r.ReadArrayStart()
			if yyl2095 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2096Slc
	var yyhl2096 bool = l >= 0
	for yyj2096 := 0; ; yyj2096++ {
		if yyhl2096 {
			if yyj2096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2096Slc = r.DecodeBytes(yys2096Slc, true, true)
		yys2096 := string(yys2096Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2096 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2096)
		} // end switch yys2096
	} // end for yyj2096
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2104 := z.EncBinary()
	_ = yym2104
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2105 := z.DecBinary()
	_ = yym2105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2106 := z.EncBinary()
		_ = yym2106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2107 := !z.EncBinary()
			yy2arr2107 := z.EncBasicHandle().StructToArray
			var yyq2107 [4]bool
			_, _, _ = yysep2107, yyq2107, yy2arr2107
			const yyr2107 bool = false
			yyq2107[0] = x.Key != ""
			yyq2107[1] = x.Operator != ""
			yyq2107[2] = x.Value != ""
			yyq2107[3] = x.Effect != ""
			var yynn2107 int
			if yyr2107 || yy2arr2107 {
				r.EncodeArrayStart(4)
			} else {
				yynn2107 = 0
				for _, b := range yyq2107 {
					if b {
						yynn2107++
					}
				}
				r.EncodeMapStart(yynn2107)
				yynn2107 = 0
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[0] {
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2107[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2110 := z.EncBinary()
					_ = yym2110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2107[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[2] {
					yym2113 := z.EncBinary()
					_ = yym2113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2107[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2116 := z.DecBinary()
	_ = yym2116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2117 := r.ContainerType()
		if yyct2117 == codecSelferValueTypeMap1234 {
			yyl2117 := r.ReadMapStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2117, d)
			}
		} else if yyct2117 == codecSelferValueTypeArray1234 {
			yyl2117 := r.ReadArrayStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2118Slc
	var yyhl2118 bool = l >= 0
	for yyj2118 := 0; ; yyj2118++ {
		if yyhl2118 {
			if yyj2118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2118Slc = r.DecodeBytes(yys2118Slc, true, true)
		yys2118 := string(yys2118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2118 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2118)
		} // end switch yys2118
	} // end for yyj2118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2123 int
	var yyb2123 bool
	var yyhl2123 bool = l >= 0
	yyj2123++
	if yyhl2123 {
		yyb2123 = yyj2123 > l
	} else {
		yyb2123 = r.CheckBreak()
	}
	if yyb2123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2123++
	if yyhl2123 {
		yyb2123 = yyj2123 > l
	} else {
		yyb2123 = r.CheckBreak()
	}
	if yyb2123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2123++
	if yyhl2123 {
		yyb2123 = yyj2123 > l
	} else {
		yyb2123 = r.CheckBreak()
	}
	if yyb2123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2123++
	if yyhl2123 {
		yyb2123 = yyj2123 > l
	} else {
		yyb2123 = r.CheckBreak()
	}
	if yyb2123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2123++
		if yyhl2123 {
			yyb2123 = yyj2123 > l
		} else {
			yyb2123 = r.CheckBreak()
		}
		if yyb2123 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2123-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2128 := z.EncBinary()
	_ = yym2128
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2129 := z.DecBinary()
	_ = yym2129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2130 := z.EncBinary()
		_ = yym2130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2131 := !z.EncBinary()
			yy2arr2131 := z.EncBasicHandle().StructToArray
			var yyq2131 [13]bool
			_, _, _ = yysep2131, yyq2131, yy2arr2131
			const yyr2131 bool = false
			yyq2131[2] = x.RestartPolicy != ""
			yyq2131[3] = x.TerminationGracePeriodSeconds != nil
			yyq2131[4] = x.ActiveDeadlineSeconds != nil
			yyq2131[5] = x.DNSPolicy != ""
			yyq2131[6] = len(x.NodeSelector) != 0
			yyq2131[8] = x.NodeName != ""
			yyq2131[9] = x.SecurityContext != nil
			yyq2131[10] = len(x.ImagePullSecrets) != 0
			yyq2131[11] = x.Hostname != ""
			yyq2131[12] = x.Subdomain != ""
			var yynn2131 int
			if yyr2131 || yy2arr2131 {
				r.EncodeArrayStart(13)
			} else {
				yynn2131 = 3
				for _, b := range yyq2131 {
					if b {
						yynn2131++
					}
				}
				r.EncodeMapStart(yynn2131)
				yynn2131 = 0
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2140 := *x.TerminationGracePeriodSeconds
						yym2141 := z.EncBinary()
						_ = yym2141
						if false {
						} else {
							r.EncodeInt(int64(yy2140))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2142 := *x.TerminationGracePeriodSeconds
						yym2143 := z.EncBinary()
						_ = yym2143
						if false {
						} else {
							r.EncodeInt(int64(yy2142))
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2145 := *x.ActiveDeadlineSeconds
						yym2146 := z.EncBinary()
						_ = yym2146
						if false {
						} else {
							r.EncodeInt(int64(yy2145))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2147 := *x.ActiveDeadlineSeconds
						yym2148 := z.EncBinary()
						_ = yym2148
						if false {
						} else {
							r.EncodeInt(int64(yy2147))
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2152 := z.EncBinary()
						_ = yym2152
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2154 := z.EncBinary()
				_ = yym2154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2155 := z.EncBinary()
				_ = yym2155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[8] {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2161 := z.EncBinary()
						_ = yym2161
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2162 := z.EncBinary()
						_ = yym2162
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[11] {
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2165 := z.EncBinary()
					_ = yym2165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[12] {
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2169 := z.DecBinary()
	_ = yym2169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2170 := r.ContainerType()
		if yyct2170 == codecSelferValueTypeMap1234 {
			yyl2170 := r.ReadMapStart()
			if yyl2170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2170, d)
			}
		} else if yyct2170 == codecSelferValueTypeArray1234 {
			yyl2170 := r.ReadArrayStart()
			if yyl2170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2171Slc
	var yyhl2171 bool = l >= 0
	for yyj2171 := 0; ; yyj2171++ {
		if yyhl2171 {
			if yyj2171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2171Slc = r.DecodeBytes(yys2171Slc, true, true)
		yys2171 := string(yys2171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2171 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2172 := &x.Volumes
				yym2173 := z.DecBinary()
				_ = yym2173
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2172), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2174 := &x.Containers
				yym2175 := z.DecBinary()
				_ = yym2175
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2174), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2178 := z.DecBinary()
				_ = yym2178
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2180 := z.DecBinary()
				_ = yym2180
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2182 := &x.NodeSelector
				yym2183 := z.DecBinary()
				_ = yym2183
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2182, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2187 := &x.ImagePullSecrets
				yym2188 := z.DecBinary()
				_ = yym2188
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2187), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2171)
		} // end switch yys2171
	} // end for yyj2171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2191 int
	var yyb2191 bool
	var yyhl2191 bool = l >= 0
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2192 := &x.Volumes
		yym2193 := z.DecBinary()
		_ = yym2193
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2192), d)
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2194 := &x.Containers
		yym2195 := z.DecBinary()
		_ = yym2195
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2194), d)
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2198 := z.DecBinary()
		_ = yym2198
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2200 := z.DecBinary()
		_ = yym2200
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2202 := &x.NodeSelector
		yym2203 := z.DecBinary()
		_ = yym2203
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2202, false, d)
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2207 := &x.ImagePullSecrets
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2207), d)
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2191++
		if yyhl2191 {
			yyb2191 = yyj2191 > l
		} else {
			yyb2191 = r.CheckBreak()
		}
		if yyb2191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2211 := z.EncBinary()
		_ = yym2211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2212 := !z.EncBinary()
			yy2arr2212 := z.EncBasicHandle().StructToArray
			var yyq2212 [2]bool
			_, _, _ = yysep2212, yyq2212, yy2arr2212
			const yyr2212 bool = false
			var yynn2212 int
			if yyr2212 || yy2arr2212 {
				r.EncodeArrayStart(2)
			} else {
				yynn2212 = 2
				for _, b := range yyq2212 {
					if b {
						yynn2212++
					}
				}
				r.EncodeMapStart(yynn2212)
				yynn2212 = 0
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2214 := z.EncBinary()
				_ = yym2214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2215 := z.EncBinary()
				_ = yym2215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2217 := z.EncBinary()
				_ = yym2217
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2218 := z.EncBinary()
				_ = yym2218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2219 := z.DecBinary()
	_ = yym2219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2220 := r.ContainerType()
		if yyct2220 == codecSelferValueTypeMap1234 {
			yyl2220 := r.ReadMapStart()
			if yyl2220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2220, d)
			}
		} else if yyct2220 == codecSelferValueTypeArray1234 {
			yyl2220 := r.ReadArrayStart()
			if yyl2220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2221Slc
	var yyhl2221 bool = l >= 0
	for yyj2221 := 0; ; yyj2221++ {
		if yyhl2221 {
			if yyj2221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2221Slc = r.DecodeBytes(yys2221Slc, true, true)
		yys2221 := string(yys2221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2221 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2221)
		} // end switch yys2221
	} // end for yyj2221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2224 int
	var yyb2224 bool
	var yyhl2224 bool = l >= 0
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2224++
		if yyhl2224 {
			yyb2224 = yyj2224 > l
		} else {
			yyb2224 = r.CheckBreak()
		}
		if yyb2224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2227 := z.EncBinary()
		_ = yym2227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2228 := !z.EncBinary()
			yy2arr2228 := z.EncBasicHandle().StructToArray
			var yyq2228 [8]bool
			_, _, _ = yysep2228, yyq2228, yy2arr2228
			const yyr2228 bool = false
			yyq2228[0] = x.HostNetwork != false
			yyq2228[1] = x.HostPID != false
			yyq2228[2] = x.HostIPC != false
			yyq2228[3] = x.SELinuxOptions != nil
			yyq2228[4] = x.RunAsUser != nil
			yyq2228[5] = x.RunAsNonRoot != nil
			yyq2228[6] = len(x.SupplementalGroups) != 0
			yyq2228[7] = x.FSGroup != nil
			var yynn2228 int
			if yyr2228 || yy2arr2228 {
				r.EncodeArrayStart(8)
			} else {
				yynn2228 = 0
				for _, b := range yyq2228 {
					if b {
						yynn2228++
					}
				}
				r.EncodeMapStart(yynn2228)
				yynn2228 = 0
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[0] {
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2228[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[1] {
					yym2233 := z.EncBinary()
					_ = yym2233
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2228[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2234 := z.EncBinary()
					_ = yym2234
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[2] {
					yym2236 := z.EncBinary()
					_ = yym2236
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2228[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2237 := z.EncBinary()
					_ = yym2237
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2228[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2240 := *x.RunAsUser
						yym2241 := z.EncBinary()
						_ = yym2241
						if false {
						} else {
							r.EncodeInt(int64(yy2240))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2228[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2242 := *x.RunAsUser
						yym2243 := z.EncBinary()
						_ = yym2243
						if false {
						} else {
							r.EncodeInt(int64(yy2242))
						}
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2245 := *x.RunAsNonRoot
						yym2246 := z.EncBinary()
						_ = yym2246
						if false {
						} else {
							r.EncodeBool(bool(yy2245))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2228[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2247 := *x.RunAsNonRoot
						yym2248 := z.EncBinary()
						_ = yym2248
						if false {
						} else {
							r.EncodeBool(bool(yy2247))
						}
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2250 := z.EncBinary()
						_ = yym2250
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2228[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2251 := z.EncBinary()
						_ = yym2251
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2228[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2253 := *x.FSGroup
						yym2254 := z.EncBinary()
						_ = yym2254
						if false {
						} else {
							r.EncodeInt(int64(yy2253))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2228[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2255 := *x.FSGroup
						yym2256 := z.EncBinary()
						_ = yym2256
						if false {
						} else {
							r.EncodeInt(int64(yy2255))
						}
					}
				}
			}
			if yyr2228 || yy2arr2228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2257 := z.DecBinary()
	_ = yym2257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2258 := r.ContainerType()
		if yyct2258 == codecSelferValueTypeMap1234 {
			yyl2258 := r.ReadMapStart()
			if yyl2258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2258, d)
			}
		} else if yyct2258 == codecSelferValueTypeArray1234 {
			yyl2258 := r.ReadArrayStart()
			if yyl2258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2259Slc
	var yyhl2259 bool = l >= 0
	for yyj2259 := 0; ; yyj2259++ {
		if yyhl2259 {
			if yyj2259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2259Slc = r.DecodeBytes(yys2259Slc, true, true)
		yys2259 := string(yys2259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2259 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2265 := z.DecBinary()
				_ = yym2265
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2267 := z.DecBinary()
				_ = yym2267
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2268 := &x.SupplementalGroups
				yym2269 := z.DecBinary()
				_ = yym2269
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2268, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2271 := z.DecBinary()
				_ = yym2271
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2259)
		} // end switch yys2259
	} // end for yyj2259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2272 int
	var yyb2272 bool
	var yyhl2272 bool = l >= 0
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2278 := z.DecBinary()
		_ = yym2278
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2280 := z.DecBinary()
		_ = yym2280
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2281 := &x.SupplementalGroups
		yym2282 := z.DecBinary()
		_ = yym2282
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2281, false, d)
		}
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2284 := z.DecBinary()
		_ = yym2284
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2272++
		if yyhl2272 {
			yyb2272 = yyj2272 > l
		} else {
			yyb2272 = r.CheckBreak()
		}
		if yyb2272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2285 := z.EncBinary()
		_ = yym2285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2286 := !z.EncBinary()
			yy2arr2286 := z.EncBasicHandle().StructToArray
			var yyq2286 [8]bool
			_, _, _ = yysep2286, yyq2286, yy2arr2286
			const yyr2286 bool = false
			yyq2286[0] = x.Phase != ""
			yyq2286[1] = len(x.Conditions) != 0
			yyq2286[2] = x.Message != ""
			yyq2286[3] = x.Reason != ""
			yyq2286[4] = x.HostIP != ""
			yyq2286[5] = x.PodIP != ""
			yyq2286[6] = x.StartTime != nil
			yyq2286[7] = len(x.ContainerStatuses) != 0
			var yynn2286 int
			if yyr2286 || yy2arr2286 {
				r.EncodeArrayStart(8)
			} else {
				yynn2286 = 0
				for _, b := range yyq2286 {
					if b {
						yynn2286++
					}
				}
				r.EncodeMapStart(yynn2286)
				yynn2286 = 0
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2289 := z.EncBinary()
						_ = yym2289
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2290 := z.EncBinary()
						_ = yym2290
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[2] {
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2293 := z.EncBinary()
					_ = yym2293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[3] {
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2296 := z.EncBinary()
					_ = yym2296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[4] {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[5] {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2304 := z.EncBinary()
						_ = yym2304
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2304 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2304 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2305 := z.EncBinary()
						_ = yym2305
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2305 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2305 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2307 := z.EncBinary()
						_ = yym2307
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2308 := z.EncBinary()
						_ = yym2308
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2309 := z.DecBinary()
	_ = yym2309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2310 := r.ContainerType()
		if yyct2310 == codecSelferValueTypeMap1234 {
			yyl2310 := r.ReadMapStart()
			if yyl2310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2310, d)
			}
		} else if yyct2310 == codecSelferValueTypeArray1234 {
			yyl2310 := r.ReadArrayStart()
			if yyl2310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2311Slc
	var yyhl2311 bool = l >= 0
	for yyj2311 := 0; ; yyj2311++ {
		if yyhl2311 {
			if yyj2311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2311Slc = r.DecodeBytes(yys2311Slc, true, true)
		yys2311 := string(yys2311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2311 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2313 := &x.Conditions
				yym2314 := z.DecBinary()
				_ = yym2314
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2313), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2320 := z.DecBinary()
				_ = yym2320
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2320 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2320 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2321 := &x.ContainerStatuses
				yym2322 := z.DecBinary()
				_ = yym2322
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2321), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2311)
		} // end switch yys2311
	} // end for yyj2311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2323 int
	var yyb2323 bool
	var yyhl2323 bool = l >= 0
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2325 := &x.Conditions
		yym2326 := z.DecBinary()
		_ = yym2326
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2325), d)
		}
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2332 := z.DecBinary()
		_ = yym2332
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2332 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2332 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2333 := &x.ContainerStatuses
		yym2334 := z.DecBinary()
		_ = yym2334
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2333), d)
		}
	}
	for {
		yyj2323++
		if yyhl2323 {
			yyb2323 = yyj2323 > l
		} else {
			yyb2323 = r.CheckBreak()
		}
		if yyb2323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2335 := z.EncBinary()
		_ = yym2335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2336 := !z.EncBinary()
			yy2arr2336 := z.EncBasicHandle().StructToArray
			var yyq2336 [4]bool
			_, _, _ = yysep2336, yyq2336, yy2arr2336
			const yyr2336 bool = false
			yyq2336[0] = x.Kind != ""
			yyq2336[1] = x.APIVersion != ""
			yyq2336[2] = true
			yyq2336[3] = true
			var yynn2336 int
			if yyr2336 || yy2arr2336 {
				r.EncodeArrayStart(4)
			} else {
				yynn2336 = 0
				for _, b := range yyq2336 {
					if b {
						yynn2336++
					}
				}
				r.EncodeMapStart(yynn2336)
				yynn2336 = 0
			}
			if yyr2336 || yy2arr2336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2336[0] {
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2336[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2339 := z.EncBinary()
					_ = yym2339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2336 || yy2arr2336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2336[1] {
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2336[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2336 || yy2arr2336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2336[2] {
					yy2344 := &x.ObjectMeta
					yy2344.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2336[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2345 := &x.ObjectMeta
					yy2345.CodecEncodeSelf(e)
				}
			}
			if yyr2336 || yy2arr2336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2336[3] {
					yy2347 := &x.Status
					yy2347.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2336[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2348 := &x.Status
					yy2348.CodecEncodeSelf(e)
				}
			}
			if yyr2336 || yy2arr2336 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2349 := z.DecBinary()
	_ = yym2349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2350 := r.ContainerType()
		if yyct2350 == codecSelferValueTypeMap1234 {
			yyl2350 := r.ReadMapStart()
			if yyl2350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2350, d)
			}
		} else if yyct2350 == codecSelferValueTypeArray1234 {
			yyl2350 := r.ReadArrayStart()
			if yyl2350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2351Slc
	var yyhl2351 bool = l >= 0
	for yyj2351 := 0; ; yyj2351++ {
		if yyhl2351 {
			if yyj2351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2351Slc = r.DecodeBytes(yys2351Slc, true, true)
		yys2351 := string(yys2351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2351 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2354 := &x.ObjectMeta
				yyv2354.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2355 := &x.Status
				yyv2355.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2351)
		} // end switch yys2351
	} // end for yyj2351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2356 int
	var yyb2356 bool
	var yyhl2356 bool = l >= 0
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2359 := &x.ObjectMeta
		yyv2359.CodecDecodeSelf(d)
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2360 := &x.Status
		yyv2360.CodecDecodeSelf(d)
	}
	for {
		yyj2356++
		if yyhl2356 {
			yyb2356 = yyj2356 > l
		} else {
			yyb2356 = r.CheckBreak()
		}
		if yyb2356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2361 := z.EncBinary()
		_ = yym2361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2362 := !z.EncBinary()
			yy2arr2362 := z.EncBasicHandle().StructToArray
			var yyq2362 [5]bool
			_, _, _ = yysep2362, yyq2362, yy2arr2362
			const yyr2362 bool = false
			yyq2362[0] = x.Kind != ""
			yyq2362[1] = x.APIVersion != ""
			yyq2362[2] = true
			yyq2362[3] = true
			yyq2362[4] = true
			var yynn2362 int
			if yyr2362 || yy2arr2362 {
				r.EncodeArrayStart(5)
			} else {
				yynn2362 = 0
				for _, b := range yyq2362 {
					if b {
						yynn2362++
					}
				}
				r.EncodeMapStart(yynn2362)
				yynn2362 = 0
			}
			if yyr2362 || yy2arr2362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2362[0] {
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2362 || yy2arr2362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2362[1] {
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2362[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2362 || yy2arr2362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2362[2] {
					yy2370 := &x.ObjectMeta
					yy2370.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2371 := &x.ObjectMeta
					yy2371.CodecEncodeSelf(e)
				}
			}
			if yyr2362 || yy2arr2362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2362[3] {
					yy2373 := &x.Spec
					yy2373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2374 := &x.Spec
					yy2374.CodecEncodeSelf(e)
				}
			}
			if yyr2362 || yy2arr2362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2362[4] {
					yy2376 := &x.Status
					yy2376.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2377 := &x.Status
					yy2377.CodecEncodeSelf(e)
				}
			}
			if yyr2362 || yy2arr2362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2378 := z.DecBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2379 := r.ContainerType()
		if yyct2379 == codecSelferValueTypeMap1234 {
			yyl2379 := r.ReadMapStart()
			if yyl2379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2379, d)
			}
		} else if yyct2379 == codecSelferValueTypeArray1234 {
			yyl2379 := r.ReadArrayStart()
			if yyl2379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2380Slc
	var yyhl2380 bool = l >= 0
	for yyj2380 := 0; ; yyj2380++ {
		if yyhl2380 {
			if yyj2380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2380Slc = r.DecodeBytes(yys2380Slc, true, true)
		yys2380 := string(yys2380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2383 := &x.ObjectMeta
				yyv2383.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2384 := &x.Spec
				yyv2384.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2385 := &x.Status
				yyv2385.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2380)
		} // end switch yys2380
	} // end for yyj2380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2386 int
	var yyb2386 bool
	var yyhl2386 bool = l >= 0
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2389 := &x.ObjectMeta
		yyv2389.CodecDecodeSelf(d)
	}
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2390 := &x.Spec
		yyv2390.CodecDecodeSelf(d)
	}
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2391 := &x.Status
		yyv2391.CodecDecodeSelf(d)
	}
	for {
		yyj2386++
		if yyhl2386 {
			yyb2386 = yyj2386 > l
		} else {
			yyb2386 = r.CheckBreak()
		}
		if yyb2386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2392 := z.EncBinary()
		_ = yym2392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2393 := !z.EncBinary()
			yy2arr2393 := z.EncBasicHandle().StructToArray
			var yyq2393 [2]bool
			_, _, _ = yysep2393, yyq2393, yy2arr2393
			const yyr2393 bool = false
			yyq2393[0] = true
			yyq2393[1] = true
			var yynn2393 int
			if yyr2393 || yy2arr2393 {
				r.EncodeArrayStart(2)
			} else {
				yynn2393 = 0
				for _, b := range yyq2393 {
					if b {
						yynn2393++
					}
				}
				r.EncodeMapStart(yynn2393)
				yynn2393 = 0
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[0] {
					yy2395 := &x.ObjectMeta
					yy2395.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2396 := &x.ObjectMeta
					yy2396.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[1] {
					yy2398 := &x.Spec
					yy2398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2399 := &x.Spec
					yy2399.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2401 := r.ContainerType()
		if yyct2401 == codecSelferValueTypeMap1234 {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if yyct2401 == codecSelferValueTypeArray1234 {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2402 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2403 := &x.ObjectMeta
				yyv2403.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2404 := &x.Spec
				yyv2404.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2405 int
	var yyb2405 bool
	var yyhl2405 bool = l >= 0
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2406 := &x.ObjectMeta
		yyv2406.CodecDecodeSelf(d)
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2407 := &x.Spec
		yyv2407.CodecDecodeSelf(d)
	}
	for {
		yyj2405++
		if yyhl2405 {
			yyb2405 = yyj2405 > l
		} else {
			yyb2405 = r.CheckBreak()
		}
		if yyb2405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2408 := z.EncBinary()
		_ = yym2408
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2409 := !z.EncBinary()
			yy2arr2409 := z.EncBasicHandle().StructToArray
			var yyq2409 [4]bool
			_, _, _ = yysep2409, yyq2409, yy2arr2409
			const yyr2409 bool = false
			yyq2409[0] = x.Kind != ""
			yyq2409[1] = x.APIVersion != ""
			yyq2409[2] = true
			yyq2409[3] = true
			var yynn2409 int
			if yyr2409 || yy2arr2409 {
				r.EncodeArrayStart(4)
			} else {
				yynn2409 = 0
				for _, b := range yyq2409 {
					if b {
						yynn2409++
					}
				}
				r.EncodeMapStart(yynn2409)
				yynn2409 = 0
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[0] {
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2409[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[1] {
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2409[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[2] {
					yy2417 := &x.ObjectMeta
					yy2417.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2409[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2418 := &x.ObjectMeta
					yy2418.CodecEncodeSelf(e)
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[3] {
					yy2420 := &x.Template
					yy2420.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2409[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2421 := &x.Template
					yy2421.CodecEncodeSelf(e)
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2422 := z.DecBinary()
	_ = yym2422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2423 := r.ContainerType()
		if yyct2423 == codecSelferValueTypeMap1234 {
			yyl2423 := r.ReadMapStart()
			if yyl2423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2423, d)
			}
		} else if yyct2423 == codecSelferValueTypeArray1234 {
			yyl2423 := r.ReadArrayStart()
			if yyl2423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2424Slc
	var yyhl2424 bool = l >= 0
	for yyj2424 := 0; ; yyj2424++ {
		if yyhl2424 {
			if yyj2424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2424Slc = r.DecodeBytes(yys2424Slc, true, true)
		yys2424 := string(yys2424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2424 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2427 := &x.ObjectMeta
				yyv2427.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2428 := &x.Template
				yyv2428.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2424)
		} // end switch yys2424
	} // end for yyj2424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2429 int
	var yyb2429 bool
	var yyhl2429 bool = l >= 0
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2432 := &x.ObjectMeta
		yyv2432.CodecDecodeSelf(d)
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2433 := &x.Template
		yyv2433.CodecDecodeSelf(d)
	}
	for {
		yyj2429++
		if yyhl2429 {
			yyb2429 = yyj2429 > l
		} else {
			yyb2429 = r.CheckBreak()
		}
		if yyb2429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2434 := z.EncBinary()
		_ = yym2434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2435 := !z.EncBinary()
			yy2arr2435 := z.EncBasicHandle().StructToArray
			var yyq2435 [4]bool
			_, _, _ = yysep2435, yyq2435, yy2arr2435
			const yyr2435 bool = false
			yyq2435[0] = x.Kind != ""
			yyq2435[1] = x.APIVersion != ""
			yyq2435[2] = true
			var yynn2435 int
			if yyr2435 || yy2arr2435 {
				r.EncodeArrayStart(4)
			} else {
				yynn2435 = 1
				for _, b := range yyq2435 {
					if b {
						yynn2435++
					}
				}
				r.EncodeMapStart(yynn2435)
				yynn2435 = 0
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[0] {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[1] {
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[2] {
					yy2443 := &x.ListMeta
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2443) {
					} else {
						z.EncFallback(yy2443)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2445 := &x.ListMeta
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2445) {
					} else {
						z.EncFallback(yy2445)
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2448 := z.EncBinary()
					_ = yym2448
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2450 := z.DecBinary()
	_ = yym2450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2451 := r.ContainerType()
		if yyct2451 == codecSelferValueTypeMap1234 {
			yyl2451 := r.ReadMapStart()
			if yyl2451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2451, d)
			}
		} else if yyct2451 == codecSelferValueTypeArray1234 {
			yyl2451 := r.ReadArrayStart()
			if yyl2451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2452Slc
	var yyhl2452 bool = l >= 0
	for yyj2452 := 0; ; yyj2452++ {
		if yyhl2452 {
			if yyj2452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2452Slc = r.DecodeBytes(yys2452Slc, true, true)
		yys2452 := string(yys2452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2452 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2455 := &x.ListMeta
				yym2456 := z.DecBinary()
				_ = yym2456
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2455) {
				} else {
					z.DecFallback(yyv2455, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2457 := &x.Items
				yym2458 := z.DecBinary()
				_ = yym2458
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2457), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2452)
		} // end switch yys2452
	} // end for yyj2452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2459 int
	var yyb2459 bool
	var yyhl2459 bool = l >= 0
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2462 := &x.ListMeta
		yym2463 := z.DecBinary()
		_ = yym2463
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2462) {
		} else {
			z.DecFallback(yyv2462, false)
		}
	}
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2464 := &x.Items
		yym2465 := z.DecBinary()
		_ = yym2465
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2464), d)
		}
	}
	for {
		yyj2459++
		if yyhl2459 {
			yyb2459 = yyj2459 > l
		} else {
			yyb2459 = r.CheckBreak()
		}
		if yyb2459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2466 := z.EncBinary()
		_ = yym2466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2467 := !z.EncBinary()
			yy2arr2467 := z.EncBasicHandle().StructToArray
			var yyq2467 [3]bool
			_, _, _ = yysep2467, yyq2467, yy2arr2467
			const yyr2467 bool = false
			yyq2467[2] = x.Template != nil
			var yynn2467 int
			if yyr2467 || yy2arr2467 {
				r.EncodeArrayStart(3)
			} else {
				yynn2467 = 2
				for _, b := range yyq2467 {
					if b {
						yynn2467++
					}
				}
				r.EncodeMapStart(yynn2467)
				yynn2467 = 0
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2469 := z.EncBinary()
				_ = yym2469
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2470 := z.EncBinary()
				_ = yym2470
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2467[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2475 := z.DecBinary()
	_ = yym2475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2476 := r.ContainerType()
		if yyct2476 == codecSelferValueTypeMap1234 {
			yyl2476 := r.ReadMapStart()
			if yyl2476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2476, d)
			}
		} else if yyct2476 == codecSelferValueTypeArray1234 {
			yyl2476 := r.ReadArrayStart()
			if yyl2476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2477Slc
	var yyhl2477 bool = l >= 0
	for yyj2477 := 0; ; yyj2477++ {
		if yyhl2477 {
			if yyj2477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2477Slc = r.DecodeBytes(yys2477Slc, true, true)
		yys2477 := string(yys2477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2477 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2479 := &x.Selector
				yym2480 := z.DecBinary()
				_ = yym2480
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2479, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2477)
		} // end switch yys2477
	} // end for yyj2477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2482 int
	var yyb2482 bool
	var yyhl2482 bool = l >= 0
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2484 := &x.Selector
		yym2485 := z.DecBinary()
		_ = yym2485
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2484, false, d)
		}
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2482++
		if yyhl2482 {
			yyb2482 = yyj2482 > l
		} else {
			yyb2482 = r.CheckBreak()
		}
		if yyb2482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2487 := z.EncBinary()
		_ = yym2487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2488 := !z.EncBinary()
			yy2arr2488 := z.EncBasicHandle().StructToArray
			var yyq2488 [4]bool
			_, _, _ = yysep2488, yyq2488, yy2arr2488
			const yyr2488 bool = false
			yyq2488[1] = x.FullyLabeledReplicas != 0
			yyq2488[2] = x.ReadyReplicas != 0
			yyq2488[3] = x.ObservedGeneration != 0
			var yynn2488 int
			if yyr2488 || yy2arr2488 {
				r.EncodeArrayStart(4)
			} else {
				yynn2488 = 1
				for _, b := range yyq2488 {
					if b {
						yynn2488++
					}
				}
				r.EncodeMapStart(yynn2488)
				yynn2488 = 0
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2490 := z.EncBinary()
				_ = yym2490
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2491 := z.EncBinary()
				_ = yym2491
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[1] {
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[2] {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[3] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2488[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2501 := z.DecBinary()
	_ = yym2501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2502 := r.ContainerType()
		if yyct2502 == codecSelferValueTypeMap1234 {
			yyl2502 := r.ReadMapStart()
			if yyl2502 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2502, d)
			}
		} else if yyct2502 == codecSelferValueTypeArray1234 {
			yyl2502 := r.ReadArrayStart()
			if yyl2502 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2503Slc
	var yyhl2503 bool = l >= 0
	for yyj2503 := 0; ; yyj2503++ {
		if yyhl2503 {
			if yyj2503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2503Slc = r.DecodeBytes(yys2503Slc, true, true)
		yys2503 := string(yys2503Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2503 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2503)
		} // end switch yys2503
	} // end for yyj2503
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2508 int
	var yyb2508 bool
	var yyhl2508 bool = l >= 0
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2508++
		if yyhl2508 {
			yyb2508 = yyj2508 > l
		} else {
			yyb2508 = r.CheckBreak()
		}
		if yyb2508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2513 := z.EncBinary()
		_ = yym2513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2514 := !z.EncBinary()
			yy2arr2514 := z.EncBasicHandle().StructToArray
			var yyq2514 [5]bool
			_, _, _ = yysep2514, yyq2514, yy2arr2514
			const yyr2514 bool = false
			yyq2514[0] = x.Kind != ""
			yyq2514[1] = x.APIVersion != ""
			yyq2514[2] = true
			yyq2514[3] = true
			yyq2514[4] = true
			var yynn2514 int
			if yyr2514 || yy2arr2514 {
				r.EncodeArrayStart(5)
			} else {
				yynn2514 = 0
				for _, b := range yyq2514 {
					if b {
						yynn2514++
					}
				}
				r.EncodeMapStart(yynn2514)
				yynn2514 = 0
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[0] {
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2514[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[1] {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2514[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[2] {
					yy2522 := &x.ObjectMeta
					yy2522.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2514[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2523 := &x.ObjectMeta
					yy2523.CodecEncodeSelf(e)
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[3] {
					yy2525 := &x.Spec
					yy2525.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2514[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2526 := &x.Spec
					yy2526.CodecEncodeSelf(e)
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[4] {
					yy2528 := &x.Status
					yy2528.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2514[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2529 := &x.Status
					yy2529.CodecEncodeSelf(e)
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2530 := z.DecBinary()
	_ = yym2530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2531 := r.ContainerType()
		if yyct2531 == codecSelferValueTypeMap1234 {
			yyl2531 := r.ReadMapStart()
			if yyl2531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2531, d)
			}
		} else if yyct2531 == codecSelferValueTypeArray1234 {
			yyl2531 := r.ReadArrayStart()
			if yyl2531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2532Slc
	var yyhl2532 bool = l >= 0
	for yyj2532 := 0; ; yyj2532++ {
		if yyhl2532 {
			if yyj2532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2532Slc = r.DecodeBytes(yys2532Slc, true, true)
		yys2532 := string(yys2532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2532 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2535 := &x.ObjectMeta
				yyv2535.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2536 := &x.Spec
				yyv2536.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2537 := &x.Status
				yyv2537.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2532)
		} // end switch yys2532
	} // end for yyj2532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2538 int
	var yyb2538 bool
	var yyhl2538 bool = l >= 0
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2541 := &x.ObjectMeta
		yyv2541.CodecDecodeSelf(d)
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2542 := &x.Spec
		yyv2542.CodecDecodeSelf(d)
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2543 := &x.Status
		yyv2543.CodecDecodeSelf(d)
	}
	for {
		yyj2538++
		if yyhl2538 {
			yyb2538 = yyj2538 > l
		} else {
			yyb2538 = r.CheckBreak()
		}
		if yyb2538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2544 := z.EncBinary()
		_ = yym2544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2545 := !z.EncBinary()
			yy2arr2545 := z.EncBasicHandle().StructToArray
			var yyq2545 [4]bool
			_, _, _ = yysep2545, yyq2545, yy2arr2545
			const yyr2545 bool = false
			yyq2545[0] = x.Kind != ""
			yyq2545[1] = x.APIVersion != ""
			yyq2545[2] = true
			var yynn2545 int
			if yyr2545 || yy2arr2545 {
				r.EncodeArrayStart(4)
			} else {
				yynn2545 = 1
				for _, b := range yyq2545 {
					if b {
						yynn2545++
					}
				}
				r.EncodeMapStart(yynn2545)
				yynn2545 = 0
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[0] {
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[1] {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[2] {
					yy2553 := &x.ListMeta
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2553) {
					} else {
						z.EncFallback(yy2553)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2555 := &x.ListMeta
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2555) {
					} else {
						z.EncFallback(yy2555)
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2560 := z.DecBinary()
	_ = yym2560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2561 := r.ContainerType()
		if yyct2561 == codecSelferValueTypeMap1234 {
			yyl2561 := r.ReadMapStart()
			if yyl2561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2561, d)
			}
		} else if yyct2561 == codecSelferValueTypeArray1234 {
			yyl2561 := r.ReadArrayStart()
			if yyl2561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2562Slc
	var yyhl2562 bool = l >= 0
	for yyj2562 := 0; ; yyj2562++ {
		if yyhl2562 {
			if yyj2562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2562Slc = r.DecodeBytes(yys2562Slc, true, true)
		yys2562 := string(yys2562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2562 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2565 := &x.ListMeta
				yym2566 := z.DecBinary()
				_ = yym2566
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2565) {
				} else {
					z.DecFallback(yyv2565, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2567 := &x.Items
				yym2568 := z.DecBinary()
				_ = yym2568
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2567), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2562)
		} // end switch yys2562
	} // end for yyj2562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2569 int
	var yyb2569 bool
	var yyhl2569 bool = l >= 0
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2572 := &x.ListMeta
		yym2573 := z.DecBinary()
		_ = yym2573
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2572) {
		} else {
			z.DecFallback(yyv2572, false)
		}
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2574 := &x.Items
		yym2575 := z.DecBinary()
		_ = yym2575
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2574), d)
		}
	}
	for {
		yyj2569++
		if yyhl2569 {
			yyb2569 = yyj2569 > l
		} else {
			yyb2569 = r.CheckBreak()
		}
		if yyb2569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2576 := z.EncBinary()
		_ = yym2576
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2577 := !z.EncBinary()
			yy2arr2577 := z.EncBasicHandle().StructToArray
			var yyq2577 [4]bool
			_, _, _ = yysep2577, yyq2577, yy2arr2577
			const yyr2577 bool = false
			yyq2577[0] = x.Kind != ""
			yyq2577[1] = x.APIVersion != ""
			yyq2577[2] = true
			var yynn2577 int
			if yyr2577 || yy2arr2577 {
				r.EncodeArrayStart(4)
			} else {
				yynn2577 = 1
				for _, b := range yyq2577 {
					if b {
						yynn2577++
					}
				}
				r.EncodeMapStart(yynn2577)
				yynn2577 = 0
			}
			if yyr2577 || yy2arr2577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2577[0] {
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2577[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2577 || yy2arr2577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2577[1] {
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2577[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2577 || yy2arr2577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2577[2] {
					yy2585 := &x.ListMeta
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2585) {
					} else {
						z.EncFallback(yy2585)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2577[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2587 := &x.ListMeta
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2587) {
					} else {
						z.EncFallback(yy2587)
					}
				}
			}
			if yyr2577 || yy2arr2577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2577 || yy2arr2577 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2592 := z.DecBinary()
	_ = yym2592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2593 := r.ContainerType()
		if yyct2593 == codecSelferValueTypeMap1234 {
			yyl2593 := r.ReadMapStart()
			if yyl2593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2593, d)
			}
		} else if yyct2593 == codecSelferValueTypeArray1234 {
			yyl2593 := r.ReadArrayStart()
			if yyl2593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2594Slc
	var yyhl2594 bool = l >= 0
	for yyj2594 := 0; ; yyj2594++ {
		if yyhl2594 {
			if yyj2594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2594Slc = r.DecodeBytes(yys2594Slc, true, true)
		yys2594 := string(yys2594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2594 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2597 := &x.ListMeta
				yym2598 := z.DecBinary()
				_ = yym2598
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2597) {
				} else {
					z.DecFallback(yyv2597, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2599 := &x.Items
				yym2600 := z.DecBinary()
				_ = yym2600
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2599), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2594)
		} // end switch yys2594
	} // end for yyj2594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2601 int
	var yyb2601 bool
	var yyhl2601 bool = l >= 0
	yyj2601++
	if yyhl2601 {
		yyb2601 = yyj2601 > l
	} else {
		yyb2601 = r.CheckBreak()
	}
	if yyb2601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2601++
	if yyhl2601 {
		yyb2601 = yyj2601 > l
	} else {
		yyb2601 = r.CheckBreak()
	}
	if yyb2601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2601++
	if yyhl2601 {
		yyb2601 = yyj2601 > l
	} else {
		yyb2601 = r.CheckBreak()
	}
	if yyb2601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2604 := &x.ListMeta
		yym2605 := z.DecBinary()
		_ = yym2605
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2604) {
		} else {
			z.DecFallback(yyv2604, false)
		}
	}
	yyj2601++
	if yyhl2601 {
		yyb2601 = yyj2601 > l
	} else {
		yyb2601 = r.CheckBreak()
	}
	if yyb2601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2606 := &x.Items
		yym2607 := z.DecBinary()
		_ = yym2607
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2606), d)
		}
	}
	for {
		yyj2601++
		if yyhl2601 {
			yyb2601 = yyj2601 > l
		} else {
			yyb2601 = r.CheckBreak()
		}
		if yyb2601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2608 := z.EncBinary()
	_ = yym2608
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2609 := z.DecBinary()
	_ = yym2609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2610 := z.EncBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2611 := z.DecBinary()
	_ = yym2611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2612 := z.EncBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2613 := !z.EncBinary()
			yy2arr2613 := z.EncBasicHandle().StructToArray
			var yyq2613 [1]bool
			_, _, _ = yysep2613, yyq2613, yy2arr2613
			const yyr2613 bool = false
			yyq2613[0] = true
			var yynn2613 int
			if yyr2613 || yy2arr2613 {
				r.EncodeArrayStart(1)
			} else {
				yynn2613 = 0
				for _, b := range yyq2613 {
					if b {
						yynn2613++
					}
				}
				r.EncodeMapStart(yynn2613)
				yynn2613 = 0
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2613[0] {
					yy2615 := &x.LoadBalancer
					yy2615.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2616 := &x.LoadBalancer
					yy2616.CodecEncodeSelf(e)
				}
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2617 := z.DecBinary()
	_ = yym2617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2618 := r.ContainerType()
		if yyct2618 == codecSelferValueTypeMap1234 {
			yyl2618 := r.ReadMapStart()
			if yyl2618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2618, d)
			}
		} else if yyct2618 == codecSelferValueTypeArray1234 {
			yyl2618 := r.ReadArrayStart()
			if yyl2618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2619Slc
	var yyhl2619 bool = l >= 0
	for yyj2619 := 0; ; yyj2619++ {
		if yyhl2619 {
			if yyj2619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2619Slc = r.DecodeBytes(yys2619Slc, true, true)
		yys2619 := string(yys2619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2619 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2620 := &x.LoadBalancer
				yyv2620.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2619)
		} // end switch yys2619
	} // end for yyj2619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2621 int
	var yyb2621 bool
	var yyhl2621 bool = l >= 0
	yyj2621++
	if yyhl2621 {
		yyb2621 = yyj2621 > l
	} else {
		yyb2621 = r.CheckBreak()
	}
	if yyb2621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2622 := &x.LoadBalancer
		yyv2622.CodecDecodeSelf(d)
	}
	for {
		yyj2621++
		if yyhl2621 {
			yyb2621 = yyj2621 > l
		} else {
			yyb2621 = r.CheckBreak()
		}
		if yyb2621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2623 := z.EncBinary()
		_ = yym2623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2624 := !z.EncBinary()
			yy2arr2624 := z.EncBasicHandle().StructToArray
			var yyq2624 [1]bool
			_, _, _ = yysep2624, yyq2624, yy2arr2624
			const yyr2624 bool = false
			yyq2624[0] = len(x.Ingress) != 0
			var yynn2624 int
			if yyr2624 || yy2arr2624 {
				r.EncodeArrayStart(1)
			} else {
				yynn2624 = 0
				for _, b := range yyq2624 {
					if b {
						yynn2624++
					}
				}
				r.EncodeMapStart(yynn2624)
				yynn2624 = 0
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2626 := z.EncBinary()
						_ = yym2626
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2627 := z.EncBinary()
						_ = yym2627
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2628 := z.DecBinary()
	_ = yym2628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2629 := r.ContainerType()
		if yyct2629 == codecSelferValueTypeMap1234 {
			yyl2629 := r.ReadMapStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2629, d)
			}
		} else if yyct2629 == codecSelferValueTypeArray1234 {
			yyl2629 := r.ReadArrayStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2630Slc
	var yyhl2630 bool = l >= 0
	for yyj2630 := 0; ; yyj2630++ {
		if yyhl2630 {
			if yyj2630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2630Slc = r.DecodeBytes(yys2630Slc, true, true)
		yys2630 := string(yys2630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2630 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2631 := &x.Ingress
				yym2632 := z.DecBinary()
				_ = yym2632
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2631), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2630)
		} // end switch yys2630
	} // end for yyj2630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2633 int
	var yyb2633 bool
	var yyhl2633 bool = l >= 0
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2634 := &x.Ingress
		yym2635 := z.DecBinary()
		_ = yym2635
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2634), d)
		}
	}
	for {
		yyj2633++
		if yyhl2633 {
			yyb2633 = yyj2633 > l
		} else {
			yyb2633 = r.CheckBreak()
		}
		if yyb2633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2636 := z.EncBinary()
		_ = yym2636
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2637 := !z.EncBinary()
			yy2arr2637 := z.EncBasicHandle().StructToArray
			var yyq2637 [2]bool
			_, _, _ = yysep2637, yyq2637, yy2arr2637
			const yyr2637 bool = false
			yyq2637[0] = x.IP != ""
			yyq2637[1] = x.Hostname != ""
			var yynn2637 int
			if yyr2637 || yy2arr2637 {
				r.EncodeArrayStart(2)
			} else {
				yynn2637 = 0
				for _, b := range yyq2637 {
					if b {
						yynn2637++
					}
				}
				r.EncodeMapStart(yynn2637)
				yynn2637 = 0
			}
			if yyr2637 || yy2arr2637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2637[0] {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2637[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2637 || yy2arr2637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2637[1] {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2637[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2637 || yy2arr2637 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2644 := z.DecBinary()
	_ = yym2644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2645 := r.ContainerType()
		if yyct2645 == codecSelferValueTypeMap1234 {
			yyl2645 := r.ReadMapStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2645, d)
			}
		} else if yyct2645 == codecSelferValueTypeArray1234 {
			yyl2645 := r.ReadArrayStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2646Slc
	var yyhl2646 bool = l >= 0
	for yyj2646 := 0; ; yyj2646++ {
		if yyhl2646 {
			if yyj2646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2646Slc = r.DecodeBytes(yys2646Slc, true, true)
		yys2646 := string(yys2646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2646 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2646)
		} // end switch yys2646
	} // end for yyj2646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2649 int
	var yyb2649 bool
	var yyhl2649 bool = l >= 0
	yyj2649++
	if yyhl2649 {
		yyb2649 = yyj2649 > l
	} else {
		yyb2649 = r.CheckBreak()
	}
	if yyb2649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2649++
	if yyhl2649 {
		yyb2649 = yyj2649 > l
	} else {
		yyb2649 = r.CheckBreak()
	}
	if yyb2649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2649++
		if yyhl2649 {
			yyb2649 = yyj2649 > l
		} else {
			yyb2649 = r.CheckBreak()
		}
		if yyb2649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2652 := z.EncBinary()
		_ = yym2652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2653 := !z.EncBinary()
			yy2arr2653 := z.EncBasicHandle().StructToArray
			var yyq2653 [9]bool
			_, _, _ = yysep2653, yyq2653, yy2arr2653
			const yyr2653 bool = false
			yyq2653[0] = x.Type != ""
			yyq2653[3] = x.ClusterIP != ""
			yyq2653[5] = len(x.ExternalIPs) != 0
			yyq2653[6] = x.LoadBalancerIP != ""
			yyq2653[7] = x.SessionAffinity != ""
			yyq2653[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2653 int
			if yyr2653 || yy2arr2653 {
				r.EncodeArrayStart(9)
			} else {
				yynn2653 = 3
				for _, b := range yyq2653 {
					if b {
						yynn2653++
					}
				}
				r.EncodeMapStart(yynn2653)
				yynn2653 = 0
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[3] {
					yym2662 := z.EncBinary()
					_ = yym2662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2653[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2665 := z.EncBinary()
				_ = yym2665
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2666 := z.EncBinary()
				_ = yym2666
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2668 := z.EncBinary()
						_ = yym2668
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2653[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2669 := z.EncBinary()
						_ = yym2669
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[6] {
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2653[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2653[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2675 := z.EncBinary()
						_ = yym2675
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2653[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2676 := z.EncBinary()
						_ = yym2676
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2677 := z.DecBinary()
	_ = yym2677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2678 := r.ContainerType()
		if yyct2678 == codecSelferValueTypeMap1234 {
			yyl2678 := r.ReadMapStart()
			if yyl2678 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2678, d)
			}
		} else if yyct2678 == codecSelferValueTypeArray1234 {
			yyl2678 := r.ReadArrayStart()
			if yyl2678 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2679Slc
	var yyhl2679 bool = l >= 0
	for yyj2679 := 0; ; yyj2679++ {
		if yyhl2679 {
			if yyj2679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2679Slc = r.DecodeBytes(yys2679Slc, true, true)
		yys2679 := string(yys2679Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2679 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2681 := &x.Ports
				yym2682 := z.DecBinary()
				_ = yym2682
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2681), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2683 := &x.Selector
				yym2684 := z.DecBinary()
				_ = yym2684
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2683, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2687 := &x.ExternalIPs
				yym2688 := z.DecBinary()
				_ = yym2688
				if false {
				} else {
					z.F.DecSliceStringX(yyv2687, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2691 := &x.LoadBalancerSourceRanges
				yym2692 := z.DecBinary()
				_ = yym2692
				if false {
				} else {
					z.F.DecSliceStringX(yyv2691, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2679)
		} // end switch yys2679
	} // end for yyj2679
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2693 int
	var yyb2693 bool
	var yyhl2693 bool = l >= 0
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2695 := &x.Ports
		yym2696 := z.DecBinary()
		_ = yym2696
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2695), d)
		}
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2697 := &x.Selector
		yym2698 := z.DecBinary()
		_ = yym2698
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2697, false, d)
		}
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2701 := &x.ExternalIPs
		yym2702 := z.DecBinary()
		_ = yym2702
		if false {
		} else {
			z.F.DecSliceStringX(yyv2701, false, d)
		}
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2705 := &x.LoadBalancerSourceRanges
		yym2706 := z.DecBinary()
		_ = yym2706
		if false {
		} else {
			z.F.DecSliceStringX(yyv2705, false, d)
		}
	}
	for {
		yyj2693++
		if yyhl2693 {
			yyb2693 = yyj2693 > l
		} else {
			yyb2693 = r.CheckBreak()
		}
		if yyb2693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2707 := z.EncBinary()
		_ = yym2707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2708 := !z.EncBinary()
			yy2arr2708 := z.EncBasicHandle().StructToArray
			var yyq2708 [5]bool
			_, _, _ = yysep2708, yyq2708, yy2arr2708
			const yyr2708 bool = false
			var yynn2708 int
			if yyr2708 || yy2arr2708 {
				r.EncodeArrayStart(5)
			} else {
				yynn2708 = 5
				for _, b := range yyq2708 {
					if b {
						yynn2708++
					}
				}
				r.EncodeMapStart(yynn2708)
				yynn2708 = 0
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2710 := z.EncBinary()
				_ = yym2710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2711 := z.EncBinary()
				_ = yym2711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2714 := z.EncBinary()
				_ = yym2714
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2715 := z.EncBinary()
				_ = yym2715
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2717 := &x.TargetPort
				yym2718 := z.EncBinary()
				_ = yym2718
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2717) {
				} else if !yym2718 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2717)
				} else {
					z.EncFallback(yy2717)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2719 := &x.TargetPort
				yym2720 := z.EncBinary()
				_ = yym2720
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2719) {
				} else if !yym2720 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2719)
				} else {
					z.EncFallback(yy2719)
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2722 := z.EncBinary()
				_ = yym2722
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2723 := z.EncBinary()
				_ = yym2723
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2724 := z.DecBinary()
	_ = yym2724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2725 := r.ContainerType()
		if yyct2725 == codecSelferValueTypeMap1234 {
			yyl2725 := r.ReadMapStart()
			if yyl2725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2725, d)
			}
		} else if yyct2725 == codecSelferValueTypeArray1234 {
			yyl2725 := r.ReadArrayStart()
			if yyl2725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2726Slc
	var yyhl2726 bool = l >= 0
	for yyj2726 := 0; ; yyj2726++ {
		if yyhl2726 {
			if yyj2726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2726Slc = r.DecodeBytes(yys2726Slc, true, true)
		yys2726 := string(yys2726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2726 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2730 := &x.TargetPort
				yym2731 := z.DecBinary()
				_ = yym2731
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2730) {
				} else if !yym2731 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2730)
				} else {
					z.DecFallback(yyv2730, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2726)
		} // end switch yys2726
	} // end for yyj2726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2733 int
	var yyb2733 bool
	var yyhl2733 bool = l >= 0
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2737 := &x.TargetPort
		yym2738 := z.DecBinary()
		_ = yym2738
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2737) {
		} else if !yym2738 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2737)
		} else {
			z.DecFallback(yyv2737, false)
		}
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2733++
		if yyhl2733 {
			yyb2733 = yyj2733 > l
		} else {
			yyb2733 = r.CheckBreak()
		}
		if yyb2733 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2733-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2740 := z.EncBinary()
		_ = yym2740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2741 := !z.EncBinary()
			yy2arr2741 := z.EncBasicHandle().StructToArray
			var yyq2741 [5]bool
			_, _, _ = yysep2741, yyq2741, yy2arr2741
			const yyr2741 bool = false
			yyq2741[0] = x.Kind != ""
			yyq2741[1] = x.APIVersion != ""
			yyq2741[2] = true
			yyq2741[3] = true
			yyq2741[4] = true
			var yynn2741 int
			if yyr2741 || yy2arr2741 {
				r.EncodeArrayStart(5)
			} else {
				yynn2741 = 0
				for _, b := range yyq2741 {
					if b {
						yynn2741++
					}
				}
				r.EncodeMapStart(yynn2741)
				yynn2741 = 0
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[0] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[1] {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[2] {
					yy2749 := &x.ObjectMeta
					yy2749.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2750 := &x.ObjectMeta
					yy2750.CodecEncodeSelf(e)
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[3] {
					yy2752 := &x.Spec
					yy2752.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2753 := &x.Spec
					yy2753.CodecEncodeSelf(e)
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[4] {
					yy2755 := &x.Status
					yy2755.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2741[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2756 := &x.Status
					yy2756.CodecEncodeSelf(e)
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2757 := z.DecBinary()
	_ = yym2757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2758 := r.ContainerType()
		if yyct2758 == codecSelferValueTypeMap1234 {
			yyl2758 := r.ReadMapStart()
			if yyl2758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2758, d)
			}
		} else if yyct2758 == codecSelferValueTypeArray1234 {
			yyl2758 := r.ReadArrayStart()
			if yyl2758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2759Slc
	var yyhl2759 bool = l >= 0
	for yyj2759 := 0; ; yyj2759++ {
		if yyhl2759 {
			if yyj2759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2759Slc = r.DecodeBytes(yys2759Slc, true, true)
		yys2759 := string(yys2759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2759 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2762 := &x.ObjectMeta
				yyv2762.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2763 := &x.Spec
				yyv2763.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2764 := &x.Status
				yyv2764.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2759)
		} // end switch yys2759
	} // end for yyj2759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2765 int
	var yyb2765 bool
	var yyhl2765 bool = l >= 0
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2768 := &x.ObjectMeta
		yyv2768.CodecDecodeSelf(d)
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2769 := &x.Spec
		yyv2769.CodecDecodeSelf(d)
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2770 := &x.Status
		yyv2770.CodecDecodeSelf(d)
	}
	for {
		yyj2765++
		if yyhl2765 {
			yyb2765 = yyj2765 > l
		} else {
			yyb2765 = r.CheckBreak()
		}
		if yyb2765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2771 := z.EncBinary()
		_ = yym2771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2772 := !z.EncBinary()
			yy2arr2772 := z.EncBasicHandle().StructToArray
			var yyq2772 [5]bool
			_, _, _ = yysep2772, yyq2772, yy2arr2772
			const yyr2772 bool = false
			yyq2772[0] = x.Kind != ""
			yyq2772[1] = x.APIVersion != ""
			yyq2772[2] = true
			yyq2772[4] = len(x.ImagePullSecrets) != 0
			var yynn2772 int
			if yyr2772 || yy2arr2772 {
				r.EncodeArrayStart(5)
			} else {
				yynn2772 = 1
				for _, b := range yyq2772 {
					if b {
						yynn2772++
					}
				}
				r.EncodeMapStart(yynn2772)
				yynn2772 = 0
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[0] {
					yym2774 := z.EncBinary()
					_ = yym2774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2772[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[1] {
					yym2777 := z.EncBinary()
					_ = yym2777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2772[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2778 := z.EncBinary()
					_ = yym2778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[2] {
					yy2780 := &x.ObjectMeta
					yy2780.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2772[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2781 := &x.ObjectMeta
					yy2781.CodecEncodeSelf(e)
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2786 := z.EncBinary()
						_ = yym2786
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2772[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2787 := z.EncBinary()
						_ = yym2787
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2788 := z.DecBinary()
	_ = yym2788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2789 := r.ContainerType()
		if yyct2789 == codecSelferValueTypeMap1234 {
			yyl2789 := r.ReadMapStart()
			if yyl2789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2789, d)
			}
		} else if yyct2789 == codecSelferValueTypeArray1234 {
			yyl2789 := r.ReadArrayStart()
			if yyl2789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2790Slc
	var yyhl2790 bool = l >= 0
	for yyj2790 := 0; ; yyj2790++ {
		if yyhl2790 {
			if yyj2790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2790Slc = r.DecodeBytes(yys2790Slc, true, true)
		yys2790 := string(yys2790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2790 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2793 := &x.ObjectMeta
				yyv2793.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2794 := &x.Secrets
				yym2795 := z.DecBinary()
				_ = yym2795
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2794), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2796 := &x.ImagePullSecrets
				yym2797 := z.DecBinary()
				_ = yym2797
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2796), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2790)
		} // end switch yys2790
	} // end for yyj2790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2798 int
	var yyb2798 bool
	var yyhl2798 bool = l >= 0
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2801 := &x.ObjectMeta
		yyv2801.CodecDecodeSelf(d)
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2802 := &x.Secrets
		yym2803 := z.DecBinary()
		_ = yym2803
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2802), d)
		}
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2804 := &x.ImagePullSecrets
		yym2805 := z.DecBinary()
		_ = yym2805
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2804), d)
		}
	}
	for {
		yyj2798++
		if yyhl2798 {
			yyb2798 = yyj2798 > l
		} else {
			yyb2798 = r.CheckBreak()
		}
		if yyb2798 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2798-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2806 := z.EncBinary()
		_ = yym2806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2807 := !z.EncBinary()
			yy2arr2807 := z.EncBasicHandle().StructToArray
			var yyq2807 [4]bool
			_, _, _ = yysep2807, yyq2807, yy2arr2807
			const yyr2807 bool = false
			yyq2807[0] = x.Kind != ""
			yyq2807[1] = x.APIVersion != ""
			yyq2807[2] = true
			var yynn2807 int
			if yyr2807 || yy2arr2807 {
				r.EncodeArrayStart(4)
			} else {
				yynn2807 = 1
				for _, b := range yyq2807 {
					if b {
						yynn2807++
					}
				}
				r.EncodeMapStart(yynn2807)
				yynn2807 = 0
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2807[0] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2807[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2807[1] {
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2807[2] {
					yy2815 := &x.ListMeta
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2815) {
					} else {
						z.EncFallback(yy2815)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2817 := &x.ListMeta
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2817) {
					} else {
						z.EncFallback(yy2817)
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2822 := z.DecBinary()
	_ = yym2822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2823 := r.ContainerType()
		if yyct2823 == codecSelferValueTypeMap1234 {
			yyl2823 := r.ReadMapStart()
			if yyl2823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2823, d)
			}
		} else if yyct2823 == codecSelferValueTypeArray1234 {
			yyl2823 := r.ReadArrayStart()
			if yyl2823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2824Slc
	var yyhl2824 bool = l >= 0
	for yyj2824 := 0; ; yyj2824++ {
		if yyhl2824 {
			if yyj2824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2824Slc = r.DecodeBytes(yys2824Slc, true, true)
		yys2824 := string(yys2824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2824 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2827 := &x.ListMeta
				yym2828 := z.DecBinary()
				_ = yym2828
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2827) {
				} else {
					z.DecFallback(yyv2827, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2829 := &x.Items
				yym2830 := z.DecBinary()
				_ = yym2830
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2829), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2824)
		} // end switch yys2824
	} // end for yyj2824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2831 int
	var yyb2831 bool
	var yyhl2831 bool = l >= 0
	yyj2831++
	if yyhl2831 {
		yyb2831 = yyj2831 > l
	} else {
		yyb2831 = r.CheckBreak()
	}
	if yyb2831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2831++
	if yyhl2831 {
		yyb2831 = yyj2831 > l
	} else {
		yyb2831 = r.CheckBreak()
	}
	if yyb2831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2831++
	if yyhl2831 {
		yyb2831 = yyj2831 > l
	} else {
		yyb2831 = r.CheckBreak()
	}
	if yyb2831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2834 := &x.ListMeta
		yym2835 := z.DecBinary()
		_ = yym2835
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2834) {
		} else {
			z.DecFallback(yyv2834, false)
		}
	}
	yyj2831++
	if yyhl2831 {
		yyb2831 = yyj2831 > l
	} else {
		yyb2831 = r.CheckBreak()
	}
	if yyb2831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2836 := &x.Items
		yym2837 := z.DecBinary()
		_ = yym2837
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2836), d)
		}
	}
	for {
		yyj2831++
		if yyhl2831 {
			yyb2831 = yyj2831 > l
		} else {
			yyb2831 = r.CheckBreak()
		}
		if yyb2831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2838 := z.EncBinary()
		_ = yym2838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2839 := !z.EncBinary()
			yy2arr2839 := z.EncBasicHandle().StructToArray
			var yyq2839 [4]bool
			_, _, _ = yysep2839, yyq2839, yy2arr2839
			const yyr2839 bool = false
			yyq2839[0] = x.Kind != ""
			yyq2839[1] = x.APIVersion != ""
			yyq2839[2] = true
			var yynn2839 int
			if yyr2839 || yy2arr2839 {
				r.EncodeArrayStart(4)
			} else {
				yynn2839 = 1
				for _, b := range yyq2839 {
					if b {
						yynn2839++
					}
				}
				r.EncodeMapStart(yynn2839)
				yynn2839 = 0
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[0] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[1] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[2] {
					yy2847 := &x.ObjectMeta
					yy2847.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2848 := &x.ObjectMeta
					yy2848.CodecEncodeSelf(e)
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2852 := z.DecBinary()
	_ = yym2852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2853 := r.ContainerType()
		if yyct2853 == codecSelferValueTypeMap1234 {
			yyl2853 := r.ReadMapStart()
			if yyl2853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2853, d)
			}
		} else if yyct2853 == codecSelferValueTypeArray1234 {
			yyl2853 := r.ReadArrayStart()
			if yyl2853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2854Slc
	var yyhl2854 bool = l >= 0
	for yyj2854 := 0; ; yyj2854++ {
		if yyhl2854 {
			if yyj2854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2854Slc = r.DecodeBytes(yys2854Slc, true, true)
		yys2854 := string(yys2854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2854 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2857 := &x.ObjectMeta
				yyv2857.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2858 := &x.Subsets
				yym2859 := z.DecBinary()
				_ = yym2859
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2858), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2854)
		} // end switch yys2854
	} // end for yyj2854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2860 int
	var yyb2860 bool
	var yyhl2860 bool = l >= 0
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2863 := &x.ObjectMeta
		yyv2863.CodecDecodeSelf(d)
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2864 := &x.Subsets
		yym2865 := z.DecBinary()
		_ = yym2865
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2864), d)
		}
	}
	for {
		yyj2860++
		if yyhl2860 {
			yyb2860 = yyj2860 > l
		} else {
			yyb2860 = r.CheckBreak()
		}
		if yyb2860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2866 := z.EncBinary()
		_ = yym2866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2867 := !z.EncBinary()
			yy2arr2867 := z.EncBasicHandle().StructToArray
			var yyq2867 [3]bool
			_, _, _ = yysep2867, yyq2867, yy2arr2867
			const yyr2867 bool = false
			var yynn2867 int
			if yyr2867 || yy2arr2867 {
				r.EncodeArrayStart(3)
			} else {
				yynn2867 = 3
				for _, b := range yyq2867 {
					if b {
						yynn2867++
					}
				}
				r.EncodeMapStart(yynn2867)
				yynn2867 = 0
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2877 := z.DecBinary()
	_ = yym2877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2878 := r.ContainerType()
		if yyct2878 == codecSelferValueTypeMap1234 {
			yyl2878 := r.ReadMapStart()
			if yyl2878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2878, d)
			}
		} else if yyct2878 == codecSelferValueTypeArray1234 {
			yyl2878 := r.ReadArrayStart()
			if yyl2878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2879Slc
	var yyhl2879 bool = l >= 0
	for yyj2879 := 0; ; yyj2879++ {
		if yyhl2879 {
			if yyj2879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2879Slc = r.DecodeBytes(yys2879Slc, true, true)
		yys2879 := string(yys2879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2879 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2880 := &x.Addresses
				yym2881 := z.DecBinary()
				_ = yym2881
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2880), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2882 := &x.NotReadyAddresses
				yym2883 := z.DecBinary()
				_ = yym2883
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2882), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2884 := &x.Ports
				yym2885 := z.DecBinary()
				_ = yym2885
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2884), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2879)
		} // end switch yys2879
	} // end for yyj2879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2886 int
	var yyb2886 bool
	var yyhl2886 bool = l >= 0
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2887 := &x.Addresses
		yym2888 := z.DecBinary()
		_ = yym2888
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2887), d)
		}
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2889 := &x.NotReadyAddresses
		yym2890 := z.DecBinary()
		_ = yym2890
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2889), d)
		}
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2891 := &x.Ports
		yym2892 := z.DecBinary()
		_ = yym2892
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2891), d)
		}
	}
	for {
		yyj2886++
		if yyhl2886 {
			yyb2886 = yyj2886 > l
		} else {
			yyb2886 = r.CheckBreak()
		}
		if yyb2886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2893 := z.EncBinary()
		_ = yym2893
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2894 := !z.EncBinary()
			yy2arr2894 := z.EncBasicHandle().StructToArray
			var yyq2894 [4]bool
			_, _, _ = yysep2894, yyq2894, yy2arr2894
			const yyr2894 bool = false
			yyq2894[1] = x.Hostname != ""
			yyq2894[2] = x.NodeName != nil
			var yynn2894 int
			if yyr2894 || yy2arr2894 {
				r.EncodeArrayStart(4)
			} else {
				yynn2894 = 2
				for _, b := range yyq2894 {
					if b {
						yynn2894++
					}
				}
				r.EncodeMapStart(yynn2894)
				yynn2894 = 0
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2896 := z.EncBinary()
				_ = yym2896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2897 := z.EncBinary()
				_ = yym2897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2894[1] {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2894[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2894[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2902 := *x.NodeName
						yym2903 := z.EncBinary()
						_ = yym2903
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2902))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2894[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2904 := *x.NodeName
						yym2905 := z.EncBinary()
						_ = yym2905
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2904))
						}
					}
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2907 := z.DecBinary()
	_ = yym2907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2908 := r.ContainerType()
		if yyct2908 == codecSelferValueTypeMap1234 {
			yyl2908 := r.ReadMapStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2908, d)
			}
		} else if yyct2908 == codecSelferValueTypeArray1234 {
			yyl2908 := r.ReadArrayStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2909Slc
	var yyhl2909 bool = l >= 0
	for yyj2909 := 0; ; yyj2909++ {
		if yyhl2909 {
			if yyj2909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2909Slc = r.DecodeBytes(yys2909Slc, true, true)
		yys2909 := string(yys2909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2909 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2913 := z.DecBinary()
				_ = yym2913
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2909)
		} // end switch yys2909
	} // end for yyj2909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2915 int
	var yyb2915 bool
	var yyhl2915 bool = l >= 0
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2919 := z.DecBinary()
		_ = yym2919
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2915++
		if yyhl2915 {
			yyb2915 = yyj2915 > l
		} else {
			yyb2915 = r.CheckBreak()
		}
		if yyb2915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2921 := z.EncBinary()
		_ = yym2921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2922 := !z.EncBinary()
			yy2arr2922 := z.EncBasicHandle().StructToArray
			var yyq2922 [3]bool
			_, _, _ = yysep2922, yyq2922, yy2arr2922
			const yyr2922 bool = false
			var yynn2922 int
			if yyr2922 || yy2arr2922 {
				r.EncodeArrayStart(3)
			} else {
				yynn2922 = 3
				for _, b := range yyq2922 {
					if b {
						yynn2922++
					}
				}
				r.EncodeMapStart(yynn2922)
				yynn2922 = 0
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2924 := z.EncBinary()
				_ = yym2924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2925 := z.EncBinary()
				_ = yym2925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2927 := z.EncBinary()
				_ = yym2927
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2928 := z.EncBinary()
				_ = yym2928
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2930 := z.DecBinary()
	_ = yym2930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2931 := r.ContainerType()
		if yyct2931 == codecSelferValueTypeMap1234 {
			yyl2931 := r.ReadMapStart()
			if yyl2931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2931, d)
			}
		} else if yyct2931 == codecSelferValueTypeArray1234 {
			yyl2931 := r.ReadArrayStart()
			if yyl2931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2932Slc
	var yyhl2932 bool = l >= 0
	for yyj2932 := 0; ; yyj2932++ {
		if yyhl2932 {
			if yyj2932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2932Slc = r.DecodeBytes(yys2932Slc, true, true)
		yys2932 := string(yys2932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2932 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2932)
		} // end switch yys2932
	} // end for yyj2932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2936 int
	var yyb2936 bool
	var yyhl2936 bool = l >= 0
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2936++
		if yyhl2936 {
			yyb2936 = yyj2936 > l
		} else {
			yyb2936 = r.CheckBreak()
		}
		if yyb2936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2940 := z.EncBinary()
		_ = yym2940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2941 := !z.EncBinary()
			yy2arr2941 := z.EncBasicHandle().StructToArray
			var yyq2941 [4]bool
			_, _, _ = yysep2941, yyq2941, yy2arr2941
			const yyr2941 bool = false
			yyq2941[0] = x.Kind != ""
			yyq2941[1] = x.APIVersion != ""
			yyq2941[2] = true
			var yynn2941 int
			if yyr2941 || yy2arr2941 {
				r.EncodeArrayStart(4)
			} else {
				yynn2941 = 1
				for _, b := range yyq2941 {
					if b {
						yynn2941++
					}
				}
				r.EncodeMapStart(yynn2941)
				yynn2941 = 0
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2941[0] {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2941[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2941[1] {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2941[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2941[2] {
					yy2949 := &x.ListMeta
					yym2950 := z.EncBinary()
					_ = yym2950
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2949) {
					} else {
						z.EncFallback(yy2949)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2941[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2951 := &x.ListMeta
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2951) {
					} else {
						z.EncFallback(yy2951)
					}
				}
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2956 := z.DecBinary()
	_ = yym2956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2957 := r.ContainerType()
		if yyct2957 == codecSelferValueTypeMap1234 {
			yyl2957 := r.ReadMapStart()
			if yyl2957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2957, d)
			}
		} else if yyct2957 == codecSelferValueTypeArray1234 {
			yyl2957 := r.ReadArrayStart()
			if yyl2957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2958Slc
	var yyhl2958 bool = l >= 0
	for yyj2958 := 0; ; yyj2958++ {
		if yyhl2958 {
			if yyj2958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2958Slc = r.DecodeBytes(yys2958Slc, true, true)
		yys2958 := string(yys2958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2958 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2961 := &x.ListMeta
				yym2962 := z.DecBinary()
				_ = yym2962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2961) {
				} else {
					z.DecFallback(yyv2961, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2963 := &x.Items
				yym2964 := z.DecBinary()
				_ = yym2964
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2963), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2958)
		} // end switch yys2958
	} // end for yyj2958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2965 int
	var yyb2965 bool
	var yyhl2965 bool = l >= 0
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2968 := &x.ListMeta
		yym2969 := z.DecBinary()
		_ = yym2969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2968) {
		} else {
			z.DecFallback(yyv2968, false)
		}
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2970 := &x.Items
		yym2971 := z.DecBinary()
		_ = yym2971
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2970), d)
		}
	}
	for {
		yyj2965++
		if yyhl2965 {
			yyb2965 = yyj2965 > l
		} else {
			yyb2965 = r.CheckBreak()
		}
		if yyb2965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2972 := z.EncBinary()
		_ = yym2972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2973 := !z.EncBinary()
			yy2arr2973 := z.EncBasicHandle().StructToArray
			var yyq2973 [4]bool
			_, _, _ = yysep2973, yyq2973, yy2arr2973
			const yyr2973 bool = false
			yyq2973[0] = x.PodCIDR != ""
			yyq2973[1] = x.ExternalID != ""
			yyq2973[2] = x.ProviderID != ""
			yyq2973[3] = x.Unschedulable != false
			var yynn2973 int
			if yyr2973 || yy2arr2973 {
				r.EncodeArrayStart(4)
			} else {
				yynn2973 = 0
				for _, b := range yyq2973 {
					if b {
						yynn2973++
					}
				}
				r.EncodeMapStart(yynn2973)
				yynn2973 = 0
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[0] {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[1] {
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[2] {
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2973[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[3] {
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2973[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2986 := z.DecBinary()
	_ = yym2986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2987 := r.ContainerType()
		if yyct2987 == codecSelferValueTypeMap1234 {
			yyl2987 := r.ReadMapStart()
			if yyl2987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2987, d)
			}
		} else if yyct2987 == codecSelferValueTypeArray1234 {
			yyl2987 := r.ReadArrayStart()
			if yyl2987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2988Slc
	var yyhl2988 bool = l >= 0
	for yyj2988 := 0; ; yyj2988++ {
		if yyhl2988 {
			if yyj2988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2988Slc = r.DecodeBytes(yys2988Slc, true, true)
		yys2988 := string(yys2988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2988 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2988)
		} // end switch yys2988
	} // end for yyj2988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2993 int
	var yyb2993 bool
	var yyhl2993 bool = l >= 0
	yyj2993++
	if yyhl2993 {
		yyb2993 = yyj2993 > l
	} else {
		yyb2993 = r.CheckBreak()
	}
	if yyb2993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2993++
	if yyhl2993 {
		yyb2993 = yyj2993 > l
	} else {
		yyb2993 = r.CheckBreak()
	}
	if yyb2993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2993++
	if yyhl2993 {
		yyb2993 = yyj2993 > l
	} else {
		yyb2993 = r.CheckBreak()
	}
	if yyb2993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2993++
	if yyhl2993 {
		yyb2993 = yyj2993 > l
	} else {
		yyb2993 = r.CheckBreak()
	}
	if yyb2993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2993++
		if yyhl2993 {
			yyb2993 = yyj2993 > l
		} else {
			yyb2993 = r.CheckBreak()
		}
		if yyb2993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2998 := z.EncBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2999 := !z.EncBinary()
			yy2arr2999 := z.EncBasicHandle().StructToArray
			var yyq2999 [1]bool
			_, _, _ = yysep2999, yyq2999, yy2arr2999
			const yyr2999 bool = false
			var yynn2999 int
			if yyr2999 || yy2arr2999 {
				r.EncodeArrayStart(1)
			} else {
				yynn2999 = 1
				for _, b := range yyq2999 {
					if b {
						yynn2999++
					}
				}
				r.EncodeMapStart(yynn2999)
				yynn2999 = 0
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3001 := z.EncBinary()
				_ = yym3001
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3002 := z.EncBinary()
				_ = yym3002
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3003 := z.DecBinary()
	_ = yym3003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3004 := r.ContainerType()
		if yyct3004 == codecSelferValueTypeMap1234 {
			yyl3004 := r.ReadMapStart()
			if yyl3004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3004, d)
			}
		} else if yyct3004 == codecSelferValueTypeArray1234 {
			yyl3004 := r.ReadArrayStart()
			if yyl3004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3005Slc
	var yyhl3005 bool = l >= 0
	for yyj3005 := 0; ; yyj3005++ {
		if yyhl3005 {
			if yyj3005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3005Slc = r.DecodeBytes(yys3005Slc, true, true)
		yys3005 := string(yys3005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3005 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3005)
		} // end switch yys3005
	} // end for yyj3005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3007 int
	var yyb3007 bool
	var yyhl3007 bool = l >= 0
	yyj3007++
	if yyhl3007 {
		yyb3007 = yyj3007 > l
	} else {
		yyb3007 = r.CheckBreak()
	}
	if yyb3007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3007++
		if yyhl3007 {
			yyb3007 = yyj3007 > l
		} else {
			yyb3007 = r.CheckBreak()
		}
		if yyb3007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3009 := z.EncBinary()
		_ = yym3009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3010 := !z.EncBinary()
			yy2arr3010 := z.EncBasicHandle().StructToArray
			var yyq3010 [1]bool
			_, _, _ = yysep3010, yyq3010, yy2arr3010
			const yyr3010 bool = false
			yyq3010[0] = true
			var yynn3010 int
			if yyr3010 || yy2arr3010 {
				r.EncodeArrayStart(1)
			} else {
				yynn3010 = 0
				for _, b := range yyq3010 {
					if b {
						yynn3010++
					}
				}
				r.EncodeMapStart(yynn3010)
				yynn3010 = 0
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3010[0] {
					yy3012 := &x.KubeletEndpoint
					yy3012.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3010[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3013 := &x.KubeletEndpoint
					yy3013.CodecEncodeSelf(e)
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3014 := z.DecBinary()
	_ = yym3014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3015 := r.ContainerType()
		if yyct3015 == codecSelferValueTypeMap1234 {
			yyl3015 := r.ReadMapStart()
			if yyl3015 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3015, d)
			}
		} else if yyct3015 == codecSelferValueTypeArray1234 {
			yyl3015 := r.ReadArrayStart()
			if yyl3015 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3016Slc
	var yyhl3016 bool = l >= 0
	for yyj3016 := 0; ; yyj3016++ {
		if yyhl3016 {
			if yyj3016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3016Slc = r.DecodeBytes(yys3016Slc, true, true)
		yys3016 := string(yys3016Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3016 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3017 := &x.KubeletEndpoint
				yyv3017.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3016)
		} // end switch yys3016
	} // end for yyj3016
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3018 int
	var yyb3018 bool
	var yyhl3018 bool = l >= 0
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3019 := &x.KubeletEndpoint
		yyv3019.CodecDecodeSelf(d)
	}
	for {
		yyj3018++
		if yyhl3018 {
			yyb3018 = yyj3018 > l
		} else {
			yyb3018 = r.CheckBreak()
		}
		if yyb3018 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3018-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3020 := z.EncBinary()
		_ = yym3020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3021 := !z.EncBinary()
			yy2arr3021 := z.EncBasicHandle().StructToArray
			var yyq3021 [10]bool
			_, _, _ = yysep3021, yyq3021, yy2arr3021
			const yyr3021 bool = false
			var yynn3021 int
			if yyr3021 || yy2arr3021 {
				r.EncodeArrayStart(10)
			} else {
				yynn3021 = 10
				for _, b := range yyq3021 {
					if b {
						yynn3021++
					}
				}
				r.EncodeMapStart(yynn3021)
				yynn3021 = 0
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3023 := z.EncBinary()
				_ = yym3023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3024 := z.EncBinary()
				_ = yym3024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3026 := z.EncBinary()
				_ = yym3026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3027 := z.EncBinary()
				_ = yym3027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3029 := z.EncBinary()
				_ = yym3029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3030 := z.EncBinary()
				_ = yym3030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3032 := z.EncBinary()
				_ = yym3032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3033 := z.EncBinary()
				_ = yym3033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3035 := z.EncBinary()
				_ = yym3035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3036 := z.EncBinary()
				_ = yym3036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3038 := z.EncBinary()
				_ = yym3038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3039 := z.EncBinary()
				_ = yym3039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3041 := z.EncBinary()
				_ = yym3041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3042 := z.EncBinary()
				_ = yym3042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3044 := z.EncBinary()
				_ = yym3044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3045 := z.EncBinary()
				_ = yym3045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3047 := z.EncBinary()
				_ = yym3047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3048 := z.EncBinary()
				_ = yym3048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3050 := z.EncBinary()
				_ = yym3050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3051 := z.EncBinary()
				_ = yym3051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3052 := z.DecBinary()
	_ = yym3052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3053 := r.ContainerType()
		if yyct3053 == codecSelferValueTypeMap1234 {
			yyl3053 := r.ReadMapStart()
			if yyl3053 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3053, d)
			}
		} else if yyct3053 == codecSelferValueTypeArray1234 {
			yyl3053 := r.ReadArrayStart()
			if yyl3053 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3054Slc
	var yyhl3054 bool = l >= 0
	for yyj3054 := 0; ; yyj3054++ {
		if yyhl3054 {
			if yyj3054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3054Slc = r.DecodeBytes(yys3054Slc, true, true)
		yys3054 := string(yys3054Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3054 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3054)
		} // end switch yys3054
	} // end for yyj3054
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3065 int
	var yyb3065 bool
	var yyhl3065 bool = l >= 0
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3065++
		if yyhl3065 {
			yyb3065 = yyj3065 > l
		} else {
			yyb3065 = r.CheckBreak()
		}
		if yyb3065 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3065-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3076 := z.EncBinary()
		_ = yym3076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3077 := !z.EncBinary()
			yy2arr3077 := z.EncBasicHandle().StructToArray
			var yyq3077 [12]bool
			_, _, _ = yysep3077, yyq3077, yy2arr3077
			const yyr3077 bool = false
			yyq3077[0] = len(x.Capacity) != 0
			yyq3077[1] = len(x.Allocatable) != 0
			yyq3077[3] = x.Phase != ""
			yyq3077[4] = len(x.Conditions) != 0
			yyq3077[5] = len(x.Addresses) != 0
			yyq3077[6] = true
			yyq3077[7] = true
			yyq3077[8] = len(x.Images) != 0
			yyq3077[9] = len(x.VolumesInUse) != 0
			yyq3077[10] = len(x.VolumesAttached) != 0
			yyq3077[11] = len(x.Topology) != 0
			var yynn3077 int
			if yyr3077 || yy2arr3077 {
				r.EncodeArrayStart(12)
			} else {
				yynn3077 = 1
				for _, b := range yyq3077 {
					if b {
						yynn3077++
					}
				}
				r.EncodeMapStart(yynn3077)
				yynn3077 = 0
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LocalDisks == nil {
					r.EncodeNil()
				} else {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						h.encSliceLocalDisk(([]LocalDisk)(x.LocalDisks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LocalDisks"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LocalDisks == nil {
					r.EncodeNil()
				} else {
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						h.encSliceLocalDisk(([]LocalDisk)(x.LocalDisks), e)
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[3] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3077[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[4] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3085 := z.EncBinary()
						_ = yym3085
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3086 := z.EncBinary()
						_ = yym3086
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[5] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3088 := z.EncBinary()
						_ = yym3088
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3089 := z.EncBinary()
						_ = yym3089
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[6] {
					yy3091 := &x.DaemonEndpoints
					yy3091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3092 := &x.DaemonEndpoints
					yy3092.CodecEncodeSelf(e)
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[7] {
					yy3094 := &x.NodeInfo
					yy3094.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3095 := &x.NodeInfo
					yy3095.CodecEncodeSelf(e)
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[8] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3097 := z.EncBinary()
						_ = yym3097
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3098 := z.EncBinary()
						_ = yym3098
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[9] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3100 := z.EncBinary()
						_ = yym3100
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3101 := z.EncBinary()
						_ = yym3101
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[10] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3103 := z.EncBinary()
						_ = yym3103
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3104 := z.EncBinary()
						_ = yym3104
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3077[11] {
					if x.Topology == nil {
						r.EncodeNil()
					} else {
						yym3106 := z.EncBinary()
						_ = yym3106
						if false {
						} else {
							h.encSliceNUMANode(([]NUMANode)(x.Topology), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3077[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topology"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Topology == nil {
						r.EncodeNil()
					} else {
						yym3107 := z.EncBinary()
						_ = yym3107
						if false {
						} else {
							h.encSliceNUMANode(([]NUMANode)(x.Topology), e)
						}
					}
				}
			}
			if yyr3077 || yy2arr3077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3108 := z.DecBinary()
	_ = yym3108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3109 := r.ContainerType()
		if yyct3109 == codecSelferValueTypeMap1234 {
			yyl3109 := r.ReadMapStart()
			if yyl3109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3109, d)
			}
		} else if yyct3109 == codecSelferValueTypeArray1234 {
			yyl3109 := r.ReadArrayStart()
			if yyl3109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3110Slc
	var yyhl3110 bool = l >= 0
	for yyj3110 := 0; ; yyj3110++ {
		if yyhl3110 {
			if yyj3110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3110Slc = r.DecodeBytes(yys3110Slc, true, true)
		yys3110 := string(yys3110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3110 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3111 := &x.Capacity
				yyv3111.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3112 := &x.Allocatable
				yyv3112.CodecDecodeSelf(d)
			}
		case "LocalDisks":
			if r.TryDecodeAsNil() {
				x.LocalDisks = nil
			} else {
				yyv3113 := &x.LocalDisks
				yym3114 := z.DecBinary()
				_ = yym3114
				if false {
				} else {
					h.decSliceLocalDisk((*[]LocalDisk)(yyv3113), d)
				}
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3116 := &x.Conditions
				yym3117 := z.DecBinary()
				_ = yym3117
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3116), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3118 := &x.Addresses
				yym3119 := z.DecBinary()
				_ = yym3119
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3118), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3120 := &x.DaemonEndpoints
				yyv3120.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3121 := &x.NodeInfo
				yyv3121.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3122 := &x.Images
				yym3123 := z.DecBinary()
				_ = yym3123
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3122), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3124 := &x.VolumesInUse
				yym3125 := z.DecBinary()
				_ = yym3125
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3124), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3126 := &x.VolumesAttached
				yym3127 := z.DecBinary()
				_ = yym3127
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3126), d)
				}
			}
		case "topology":
			if r.TryDecodeAsNil() {
				x.Topology = nil
			} else {
				yyv3128 := &x.Topology
				yym3129 := z.DecBinary()
				_ = yym3129
				if false {
				} else {
					h.decSliceNUMANode((*[]NUMANode)(yyv3128), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3110)
		} // end switch yys3110
	} // end for yyj3110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3130 int
	var yyb3130 bool
	var yyhl3130 bool = l >= 0
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3131 := &x.Capacity
		yyv3131.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3132 := &x.Allocatable
		yyv3132.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LocalDisks = nil
	} else {
		yyv3133 := &x.LocalDisks
		yym3134 := z.DecBinary()
		_ = yym3134
		if false {
		} else {
			h.decSliceLocalDisk((*[]LocalDisk)(yyv3133), d)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3136 := &x.Conditions
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3136), d)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3138 := &x.Addresses
		yym3139 := z.DecBinary()
		_ = yym3139
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3138), d)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3140 := &x.DaemonEndpoints
		yyv3140.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3141 := &x.NodeInfo
		yyv3141.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3142 := &x.Images
		yym3143 := z.DecBinary()
		_ = yym3143
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3142), d)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3144 := &x.VolumesInUse
		yym3145 := z.DecBinary()
		_ = yym3145
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3144), d)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3146 := &x.VolumesAttached
		yym3147 := z.DecBinary()
		_ = yym3147
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3146), d)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Topology = nil
	} else {
		yyv3148 := &x.Topology
		yym3149 := z.DecBinary()
		_ = yym3149
		if false {
		} else {
			h.decSliceNUMANode((*[]NUMANode)(yyv3148), d)
		}
	}
	for {
		yyj3130++
		if yyhl3130 {
			yyb3130 = yyj3130 > l
		} else {
			yyb3130 = r.CheckBreak()
		}
		if yyb3130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NUMANode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3150 := z.EncBinary()
		_ = yym3150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3151 := !z.EncBinary()
			yy2arr3151 := z.EncBasicHandle().StructToArray
			var yyq3151 [4]bool
			_, _, _ = yysep3151, yyq3151, yy2arr3151
			const yyr3151 bool = false
			yyq3151[0] = x.NUMANodeID != 0
			yyq3151[1] = len(x.Capacity) != 0
			yyq3151[2] = len(x.Allocatable) != 0
			yyq3151[3] = x.CPUSet != ""
			var yynn3151 int
			if yyr3151 || yy2arr3151 {
				r.EncodeArrayStart(4)
			} else {
				yynn3151 = 0
				for _, b := range yyq3151 {
					if b {
						yynn3151++
					}
				}
				r.EncodeMapStart(yynn3151)
				yynn3151 = 0
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[0] {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeInt(int64(x.NUMANodeID))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("numaNodeId"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeInt(int64(x.NUMANodeID))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[1] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[2] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3151[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[3] {
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.CPUSet))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3151[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuSet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.CPUSet))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NUMANode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3160 := z.DecBinary()
	_ = yym3160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3161 := r.ContainerType()
		if yyct3161 == codecSelferValueTypeMap1234 {
			yyl3161 := r.ReadMapStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3161, d)
			}
		} else if yyct3161 == codecSelferValueTypeArray1234 {
			yyl3161 := r.ReadArrayStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NUMANode) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3162Slc
	var yyhl3162 bool = l >= 0
	for yyj3162 := 0; ; yyj3162++ {
		if yyhl3162 {
			if yyj3162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3162Slc = r.DecodeBytes(yys3162Slc, true, true)
		yys3162 := string(yys3162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3162 {
		case "numaNodeId":
			if r.TryDecodeAsNil() {
				x.NUMANodeID = 0
			} else {
				x.NUMANodeID = int64(r.DecodeInt(64))
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3164 := &x.Capacity
				yyv3164.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3165 := &x.Allocatable
				yyv3165.CodecDecodeSelf(d)
			}
		case "cpuSet":
			if r.TryDecodeAsNil() {
				x.CPUSet = ""
			} else {
				x.CPUSet = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3162)
		} // end switch yys3162
	} // end for yyj3162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NUMANode) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3167 int
	var yyb3167 bool
	var yyhl3167 bool = l >= 0
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NUMANodeID = 0
	} else {
		x.NUMANodeID = int64(r.DecodeInt(64))
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3169 := &x.Capacity
		yyv3169.CodecDecodeSelf(d)
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3170 := &x.Allocatable
		yyv3170.CodecDecodeSelf(d)
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CPUSet = ""
	} else {
		x.CPUSet = string(r.DecodeString())
	}
	for {
		yyj3167++
		if yyhl3167 {
			yyb3167 = yyj3167 > l
		} else {
			yyb3167 = r.CheckBreak()
		}
		if yyb3167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalDisk) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [3]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(3)
			} else {
				yynn3173 = 3
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3175 := z.EncBinary()
				_ = yym3175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.LocalDir))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LocalDir"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3176 := z.EncBinary()
				_ = yym3176
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.LocalDir))
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3178 := z.EncBinary()
				_ = yym3178
				if false {
				} else {
					r.EncodeInt(int64(x.Capacity))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3179 := z.EncBinary()
				_ = yym3179
				if false {
				} else {
					r.EncodeInt(int64(x.Capacity))
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3181 := z.EncBinary()
				_ = yym3181
				if false {
				} else {
					r.EncodeInt(int64(x.Allocatable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Allocatable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3182 := z.EncBinary()
				_ = yym3182
				if false {
				} else {
					r.EncodeInt(int64(x.Allocatable))
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalDisk) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3183 := z.DecBinary()
	_ = yym3183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3184 := r.ContainerType()
		if yyct3184 == codecSelferValueTypeMap1234 {
			yyl3184 := r.ReadMapStart()
			if yyl3184 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3184, d)
			}
		} else if yyct3184 == codecSelferValueTypeArray1234 {
			yyl3184 := r.ReadArrayStart()
			if yyl3184 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3184, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalDisk) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3185Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3185Slc
	var yyhl3185 bool = l >= 0
	for yyj3185 := 0; ; yyj3185++ {
		if yyhl3185 {
			if yyj3185 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3185Slc = r.DecodeBytes(yys3185Slc, true, true)
		yys3185 := string(yys3185Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3185 {
		case "LocalDir":
			if r.TryDecodeAsNil() {
				x.LocalDir = ""
			} else {
				x.LocalDir = string(r.DecodeString())
			}
		case "Capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = 0
			} else {
				x.Capacity = int64(r.DecodeInt(64))
			}
		case "Allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = 0
			} else {
				x.Allocatable = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3185)
		} // end switch yys3185
	} // end for yyj3185
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalDisk) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3189 int
	var yyb3189 bool
	var yyhl3189 bool = l >= 0
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LocalDir = ""
	} else {
		x.LocalDir = string(r.DecodeString())
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = 0
	} else {
		x.Capacity = int64(r.DecodeInt(64))
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = 0
	} else {
		x.Allocatable = int64(r.DecodeInt(64))
	}
	for {
		yyj3189++
		if yyhl3189 {
			yyb3189 = yyj3189 > l
		} else {
			yyb3189 = r.CheckBreak()
		}
		if yyb3189 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3189-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3193 := z.EncBinary()
	_ = yym3193
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3194 := z.DecBinary()
	_ = yym3194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3195 := z.EncBinary()
		_ = yym3195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3196 := !z.EncBinary()
			yy2arr3196 := z.EncBasicHandle().StructToArray
			var yyq3196 [2]bool
			_, _, _ = yysep3196, yyq3196, yy2arr3196
			const yyr3196 bool = false
			var yynn3196 int
			if yyr3196 || yy2arr3196 {
				r.EncodeArrayStart(2)
			} else {
				yynn3196 = 2
				for _, b := range yyq3196 {
					if b {
						yynn3196++
					}
				}
				r.EncodeMapStart(yynn3196)
				yynn3196 = 0
			}
			if yyr3196 || yy2arr3196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3196 || yy2arr3196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3199 := z.EncBinary()
				_ = yym3199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3200 := z.EncBinary()
				_ = yym3200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3196 || yy2arr3196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3201 := z.DecBinary()
	_ = yym3201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3202 := r.ContainerType()
		if yyct3202 == codecSelferValueTypeMap1234 {
			yyl3202 := r.ReadMapStart()
			if yyl3202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3202, d)
			}
		} else if yyct3202 == codecSelferValueTypeArray1234 {
			yyl3202 := r.ReadArrayStart()
			if yyl3202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3203Slc
	var yyhl3203 bool = l >= 0
	for yyj3203 := 0; ; yyj3203++ {
		if yyhl3203 {
			if yyj3203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3203Slc = r.DecodeBytes(yys3203Slc, true, true)
		yys3203 := string(yys3203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3203 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3203)
		} // end switch yys3203
	} // end for yyj3203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3206 int
	var yyb3206 bool
	var yyhl3206 bool = l >= 0
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3206++
		if yyhl3206 {
			yyb3206 = yyj3206 > l
		} else {
			yyb3206 = r.CheckBreak()
		}
		if yyb3206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3209 := z.EncBinary()
		_ = yym3209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3210 := !z.EncBinary()
			yy2arr3210 := z.EncBasicHandle().StructToArray
			var yyq3210 [1]bool
			_, _, _ = yysep3210, yyq3210, yy2arr3210
			const yyr3210 bool = false
			yyq3210[0] = len(x.PreferAvoidPods) != 0
			var yynn3210 int
			if yyr3210 || yy2arr3210 {
				r.EncodeArrayStart(1)
			} else {
				yynn3210 = 0
				for _, b := range yyq3210 {
					if b {
						yynn3210++
					}
				}
				r.EncodeMapStart(yynn3210)
				yynn3210 = 0
			}
			if yyr3210 || yy2arr3210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3210[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3212 := z.EncBinary()
						_ = yym3212
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3210[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3213 := z.EncBinary()
						_ = yym3213
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3210 || yy2arr3210 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3214 := z.DecBinary()
	_ = yym3214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3215 := r.ContainerType()
		if yyct3215 == codecSelferValueTypeMap1234 {
			yyl3215 := r.ReadMapStart()
			if yyl3215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3215, d)
			}
		} else if yyct3215 == codecSelferValueTypeArray1234 {
			yyl3215 := r.ReadArrayStart()
			if yyl3215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3216Slc
	var yyhl3216 bool = l >= 0
	for yyj3216 := 0; ; yyj3216++ {
		if yyhl3216 {
			if yyj3216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3216Slc = r.DecodeBytes(yys3216Slc, true, true)
		yys3216 := string(yys3216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3216 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3217 := &x.PreferAvoidPods
				yym3218 := z.DecBinary()
				_ = yym3218
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3217), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3216)
		} // end switch yys3216
	} // end for yyj3216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3219 int
	var yyb3219 bool
	var yyhl3219 bool = l >= 0
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3220 := &x.PreferAvoidPods
		yym3221 := z.DecBinary()
		_ = yym3221
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3220), d)
		}
	}
	for {
		yyj3219++
		if yyhl3219 {
			yyb3219 = yyj3219 > l
		} else {
			yyb3219 = r.CheckBreak()
		}
		if yyb3219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3222 := z.EncBinary()
		_ = yym3222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3223 := !z.EncBinary()
			yy2arr3223 := z.EncBasicHandle().StructToArray
			var yyq3223 [4]bool
			_, _, _ = yysep3223, yyq3223, yy2arr3223
			const yyr3223 bool = false
			yyq3223[1] = true
			yyq3223[2] = x.Reason != ""
			yyq3223[3] = x.Message != ""
			var yynn3223 int
			if yyr3223 || yy2arr3223 {
				r.EncodeArrayStart(4)
			} else {
				yynn3223 = 1
				for _, b := range yyq3223 {
					if b {
						yynn3223++
					}
				}
				r.EncodeMapStart(yynn3223)
				yynn3223 = 0
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3225 := &x.PodSignature
				yy3225.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3226 := &x.PodSignature
				yy3226.CodecEncodeSelf(e)
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[1] {
					yy3228 := &x.EvictionTime
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3228) {
					} else if yym3229 {
						z.EncBinaryMarshal(yy3228)
					} else if !yym3229 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3228)
					} else {
						z.EncFallback(yy3228)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3230 := &x.EvictionTime
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3230) {
					} else if yym3231 {
						z.EncBinaryMarshal(yy3230)
					} else if !yym3231 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3230)
					} else {
						z.EncFallback(yy3230)
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[2] {
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[3] {
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3238 := z.DecBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3239 := r.ContainerType()
		if yyct3239 == codecSelferValueTypeMap1234 {
			yyl3239 := r.ReadMapStart()
			if yyl3239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3239, d)
			}
		} else if yyct3239 == codecSelferValueTypeArray1234 {
			yyl3239 := r.ReadArrayStart()
			if yyl3239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3240Slc
	var yyhl3240 bool = l >= 0
	for yyj3240 := 0; ; yyj3240++ {
		if yyhl3240 {
			if yyj3240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3240Slc = r.DecodeBytes(yys3240Slc, true, true)
		yys3240 := string(yys3240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3240 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3241 := &x.PodSignature
				yyv3241.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3242 := &x.EvictionTime
				yym3243 := z.DecBinary()
				_ = yym3243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3242) {
				} else if yym3243 {
					z.DecBinaryUnmarshal(yyv3242)
				} else if !yym3243 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3242)
				} else {
					z.DecFallback(yyv3242, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3240)
		} // end switch yys3240
	} // end for yyj3240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3246 int
	var yyb3246 bool
	var yyhl3246 bool = l >= 0
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3247 := &x.PodSignature
		yyv3247.CodecDecodeSelf(d)
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3248 := &x.EvictionTime
		yym3249 := z.DecBinary()
		_ = yym3249
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3248) {
		} else if yym3249 {
			z.DecBinaryUnmarshal(yyv3248)
		} else if !yym3249 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3248)
		} else {
			z.DecFallback(yyv3248, false)
		}
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3246++
		if yyhl3246 {
			yyb3246 = yyj3246 > l
		} else {
			yyb3246 = r.CheckBreak()
		}
		if yyb3246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3252 := z.EncBinary()
		_ = yym3252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3253 := !z.EncBinary()
			yy2arr3253 := z.EncBasicHandle().StructToArray
			var yyq3253 [1]bool
			_, _, _ = yysep3253, yyq3253, yy2arr3253
			const yyr3253 bool = false
			yyq3253[0] = x.PodController != nil
			var yynn3253 int
			if yyr3253 || yy2arr3253 {
				r.EncodeArrayStart(1)
			} else {
				yynn3253 = 0
				for _, b := range yyq3253 {
					if b {
						yynn3253++
					}
				}
				r.EncodeMapStart(yynn3253)
				yynn3253 = 0
			}
			if yyr3253 || yy2arr3253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3253[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3253[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3253 || yy2arr3253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3255 := z.DecBinary()
	_ = yym3255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3256 := r.ContainerType()
		if yyct3256 == codecSelferValueTypeMap1234 {
			yyl3256 := r.ReadMapStart()
			if yyl3256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3256, d)
			}
		} else if yyct3256 == codecSelferValueTypeArray1234 {
			yyl3256 := r.ReadArrayStart()
			if yyl3256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3257Slc
	var yyhl3257 bool = l >= 0
	for yyj3257 := 0; ; yyj3257++ {
		if yyhl3257 {
			if yyj3257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3257Slc = r.DecodeBytes(yys3257Slc, true, true)
		yys3257 := string(yys3257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3257 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3257)
		} // end switch yys3257
	} // end for yyj3257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3259 int
	var yyb3259 bool
	var yyhl3259 bool = l >= 0
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3259++
		if yyhl3259 {
			yyb3259 = yyj3259 > l
		} else {
			yyb3259 = r.CheckBreak()
		}
		if yyb3259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3261 := z.EncBinary()
		_ = yym3261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3262 := !z.EncBinary()
			yy2arr3262 := z.EncBasicHandle().StructToArray
			var yyq3262 [2]bool
			_, _, _ = yysep3262, yyq3262, yy2arr3262
			const yyr3262 bool = false
			yyq3262[1] = x.SizeBytes != 0
			var yynn3262 int
			if yyr3262 || yy2arr3262 {
				r.EncodeArrayStart(2)
			} else {
				yynn3262 = 1
				for _, b := range yyq3262 {
					if b {
						yynn3262++
					}
				}
				r.EncodeMapStart(yynn3262)
				yynn3262 = 0
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[1] {
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3269 := z.DecBinary()
	_ = yym3269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3270 := r.ContainerType()
		if yyct3270 == codecSelferValueTypeMap1234 {
			yyl3270 := r.ReadMapStart()
			if yyl3270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3270, d)
			}
		} else if yyct3270 == codecSelferValueTypeArray1234 {
			yyl3270 := r.ReadArrayStart()
			if yyl3270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3271Slc
	var yyhl3271 bool = l >= 0
	for yyj3271 := 0; ; yyj3271++ {
		if yyhl3271 {
			if yyj3271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3271Slc = r.DecodeBytes(yys3271Slc, true, true)
		yys3271 := string(yys3271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3271 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3272 := &x.Names
				yym3273 := z.DecBinary()
				_ = yym3273
				if false {
				} else {
					z.F.DecSliceStringX(yyv3272, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3271)
		} // end switch yys3271
	} // end for yyj3271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3275 int
	var yyb3275 bool
	var yyhl3275 bool = l >= 0
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3276 := &x.Names
		yym3277 := z.DecBinary()
		_ = yym3277
		if false {
		} else {
			z.F.DecSliceStringX(yyv3276, false, d)
		}
	}
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3275++
		if yyhl3275 {
			yyb3275 = yyj3275 > l
		} else {
			yyb3275 = r.CheckBreak()
		}
		if yyb3275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3279 := z.EncBinary()
	_ = yym3279
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3280 := z.DecBinary()
	_ = yym3280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3281 := z.EncBinary()
	_ = yym3281
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3282 := z.DecBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3283 := z.EncBinary()
		_ = yym3283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3284 := !z.EncBinary()
			yy2arr3284 := z.EncBasicHandle().StructToArray
			var yyq3284 [6]bool
			_, _, _ = yysep3284, yyq3284, yy2arr3284
			const yyr3284 bool = false
			yyq3284[2] = true
			yyq3284[3] = true
			yyq3284[4] = x.Reason != ""
			yyq3284[5] = x.Message != ""
			var yynn3284 int
			if yyr3284 || yy2arr3284 {
				r.EncodeArrayStart(6)
			} else {
				yynn3284 = 2
				for _, b := range yyq3284 {
					if b {
						yynn3284++
					}
				}
				r.EncodeMapStart(yynn3284)
				yynn3284 = 0
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[2] {
					yy3288 := &x.LastHeartbeatTime
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3288) {
					} else if yym3289 {
						z.EncBinaryMarshal(yy3288)
					} else if !yym3289 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3288)
					} else {
						z.EncFallback(yy3288)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3284[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3290 := &x.LastHeartbeatTime
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3290) {
					} else if yym3291 {
						z.EncBinaryMarshal(yy3290)
					} else if !yym3291 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3290)
					} else {
						z.EncFallback(yy3290)
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[3] {
					yy3293 := &x.LastTransitionTime
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3293) {
					} else if yym3294 {
						z.EncBinaryMarshal(yy3293)
					} else if !yym3294 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3293)
					} else {
						z.EncFallback(yy3293)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3284[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3295 := &x.LastTransitionTime
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3295) {
					} else if yym3296 {
						z.EncBinaryMarshal(yy3295)
					} else if !yym3296 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3295)
					} else {
						z.EncFallback(yy3295)
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[4] {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3284[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[5] {
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3284[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3303 := z.DecBinary()
	_ = yym3303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3304 := r.ContainerType()
		if yyct3304 == codecSelferValueTypeMap1234 {
			yyl3304 := r.ReadMapStart()
			if yyl3304 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3304, d)
			}
		} else if yyct3304 == codecSelferValueTypeArray1234 {
			yyl3304 := r.ReadArrayStart()
			if yyl3304 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3304, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3305Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3305Slc
	var yyhl3305 bool = l >= 0
	for yyj3305 := 0; ; yyj3305++ {
		if yyhl3305 {
			if yyj3305 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3305Slc = r.DecodeBytes(yys3305Slc, true, true)
		yys3305 := string(yys3305Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3305 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3308 := &x.LastHeartbeatTime
				yym3309 := z.DecBinary()
				_ = yym3309
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3308) {
				} else if yym3309 {
					z.DecBinaryUnmarshal(yyv3308)
				} else if !yym3309 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3308)
				} else {
					z.DecFallback(yyv3308, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3310 := &x.LastTransitionTime
				yym3311 := z.DecBinary()
				_ = yym3311
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3310) {
				} else if yym3311 {
					z.DecBinaryUnmarshal(yyv3310)
				} else if !yym3311 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3310)
				} else {
					z.DecFallback(yyv3310, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3305)
		} // end switch yys3305
	} // end for yyj3305
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3314 int
	var yyb3314 bool
	var yyhl3314 bool = l >= 0
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3317 := &x.LastHeartbeatTime
		yym3318 := z.DecBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3317) {
		} else if yym3318 {
			z.DecBinaryUnmarshal(yyv3317)
		} else if !yym3318 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3317)
		} else {
			z.DecFallback(yyv3317, false)
		}
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3319 := &x.LastTransitionTime
		yym3320 := z.DecBinary()
		_ = yym3320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3319) {
		} else if yym3320 {
			z.DecBinaryUnmarshal(yyv3319)
		} else if !yym3320 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3319)
		} else {
			z.DecFallback(yyv3319, false)
		}
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3314++
		if yyhl3314 {
			yyb3314 = yyj3314 > l
		} else {
			yyb3314 = r.CheckBreak()
		}
		if yyb3314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3323 := z.EncBinary()
	_ = yym3323
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3324 := z.DecBinary()
	_ = yym3324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3325 := z.EncBinary()
		_ = yym3325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3326 := !z.EncBinary()
			yy2arr3326 := z.EncBasicHandle().StructToArray
			var yyq3326 [2]bool
			_, _, _ = yysep3326, yyq3326, yy2arr3326
			const yyr3326 bool = false
			var yynn3326 int
			if yyr3326 || yy2arr3326 {
				r.EncodeArrayStart(2)
			} else {
				yynn3326 = 2
				for _, b := range yyq3326 {
					if b {
						yynn3326++
					}
				}
				r.EncodeMapStart(yynn3326)
				yynn3326 = 0
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3329 := z.EncBinary()
				_ = yym3329
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3330 := z.EncBinary()
				_ = yym3330
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3331 := z.DecBinary()
	_ = yym3331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3332 := r.ContainerType()
		if yyct3332 == codecSelferValueTypeMap1234 {
			yyl3332 := r.ReadMapStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3332, d)
			}
		} else if yyct3332 == codecSelferValueTypeArray1234 {
			yyl3332 := r.ReadArrayStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3333Slc
	var yyhl3333 bool = l >= 0
	for yyj3333 := 0; ; yyj3333++ {
		if yyhl3333 {
			if yyj3333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3333Slc = r.DecodeBytes(yys3333Slc, true, true)
		yys3333 := string(yys3333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3333 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3333)
		} // end switch yys3333
	} // end for yyj3333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3336 int
	var yyb3336 bool
	var yyhl3336 bool = l >= 0
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3336++
		if yyhl3336 {
			yyb3336 = yyj3336 > l
		} else {
			yyb3336 = r.CheckBreak()
		}
		if yyb3336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3339 := z.EncBinary()
		_ = yym3339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3340 := !z.EncBinary()
			yy2arr3340 := z.EncBasicHandle().StructToArray
			var yyq3340 [1]bool
			_, _, _ = yysep3340, yyq3340, yy2arr3340
			const yyr3340 bool = false
			yyq3340[0] = len(x.Capacity) != 0
			var yynn3340 int
			if yyr3340 || yy2arr3340 {
				r.EncodeArrayStart(1)
			} else {
				yynn3340 = 0
				for _, b := range yyq3340 {
					if b {
						yynn3340++
					}
				}
				r.EncodeMapStart(yynn3340)
				yynn3340 = 0
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3342 := z.DecBinary()
	_ = yym3342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3343 := r.ContainerType()
		if yyct3343 == codecSelferValueTypeMap1234 {
			yyl3343 := r.ReadMapStart()
			if yyl3343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3343, d)
			}
		} else if yyct3343 == codecSelferValueTypeArray1234 {
			yyl3343 := r.ReadArrayStart()
			if yyl3343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3344Slc
	var yyhl3344 bool = l >= 0
	for yyj3344 := 0; ; yyj3344++ {
		if yyhl3344 {
			if yyj3344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3344Slc = r.DecodeBytes(yys3344Slc, true, true)
		yys3344 := string(yys3344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3344 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3345 := &x.Capacity
				yyv3345.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3344)
		} // end switch yys3344
	} // end for yyj3344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3346 int
	var yyb3346 bool
	var yyhl3346 bool = l >= 0
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3347 := &x.Capacity
		yyv3347.CodecDecodeSelf(d)
	}
	for {
		yyj3346++
		if yyhl3346 {
			yyb3346 = yyj3346 > l
		} else {
			yyb3346 = r.CheckBreak()
		}
		if yyb3346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3348 := z.EncBinary()
	_ = yym3348
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3349 := z.DecBinary()
	_ = yym3349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3350 := z.EncBinary()
		_ = yym3350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3351 := z.DecBinary()
	_ = yym3351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3352 := z.EncBinary()
		_ = yym3352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3353 := !z.EncBinary()
			yy2arr3353 := z.EncBasicHandle().StructToArray
			var yyq3353 [5]bool
			_, _, _ = yysep3353, yyq3353, yy2arr3353
			const yyr3353 bool = false
			yyq3353[0] = x.Kind != ""
			yyq3353[1] = x.APIVersion != ""
			yyq3353[2] = true
			yyq3353[3] = true
			yyq3353[4] = true
			var yynn3353 int
			if yyr3353 || yy2arr3353 {
				r.EncodeArrayStart(5)
			} else {
				yynn3353 = 0
				for _, b := range yyq3353 {
					if b {
						yynn3353++
					}
				}
				r.EncodeMapStart(yynn3353)
				yynn3353 = 0
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[0] {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[1] {
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[2] {
					yy3361 := &x.ObjectMeta
					yy3361.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3362 := &x.ObjectMeta
					yy3362.CodecEncodeSelf(e)
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[3] {
					yy3364 := &x.Spec
					yy3364.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3365 := &x.Spec
					yy3365.CodecEncodeSelf(e)
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[4] {
					yy3367 := &x.Status
					yy3367.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3368 := &x.Status
					yy3368.CodecEncodeSelf(e)
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3369 := z.DecBinary()
	_ = yym3369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3370 := r.ContainerType()
		if yyct3370 == codecSelferValueTypeMap1234 {
			yyl3370 := r.ReadMapStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3370, d)
			}
		} else if yyct3370 == codecSelferValueTypeArray1234 {
			yyl3370 := r.ReadArrayStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3371Slc
	var yyhl3371 bool = l >= 0
	for yyj3371 := 0; ; yyj3371++ {
		if yyhl3371 {
			if yyj3371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3371Slc = r.DecodeBytes(yys3371Slc, true, true)
		yys3371 := string(yys3371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3371 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3374 := &x.ObjectMeta
				yyv3374.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3375 := &x.Spec
				yyv3375.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3376 := &x.Status
				yyv3376.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3371)
		} // end switch yys3371
	} // end for yyj3371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3377 int
	var yyb3377 bool
	var yyhl3377 bool = l >= 0
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3380 := &x.ObjectMeta
		yyv3380.CodecDecodeSelf(d)
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3381 := &x.Spec
		yyv3381.CodecDecodeSelf(d)
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3382 := &x.Status
		yyv3382.CodecDecodeSelf(d)
	}
	for {
		yyj3377++
		if yyhl3377 {
			yyb3377 = yyj3377 > l
		} else {
			yyb3377 = r.CheckBreak()
		}
		if yyb3377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3383 := z.EncBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3384 := !z.EncBinary()
			yy2arr3384 := z.EncBasicHandle().StructToArray
			var yyq3384 [4]bool
			_, _, _ = yysep3384, yyq3384, yy2arr3384
			const yyr3384 bool = false
			yyq3384[0] = x.Kind != ""
			yyq3384[1] = x.APIVersion != ""
			yyq3384[2] = true
			var yynn3384 int
			if yyr3384 || yy2arr3384 {
				r.EncodeArrayStart(4)
			} else {
				yynn3384 = 1
				for _, b := range yyq3384 {
					if b {
						yynn3384++
					}
				}
				r.EncodeMapStart(yynn3384)
				yynn3384 = 0
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[0] {
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[1] {
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[2] {
					yy3392 := &x.ListMeta
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3392) {
					} else {
						z.EncFallback(yy3392)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3394 := &x.ListMeta
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3394) {
					} else {
						z.EncFallback(yy3394)
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3399 := z.DecBinary()
	_ = yym3399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3400 := r.ContainerType()
		if yyct3400 == codecSelferValueTypeMap1234 {
			yyl3400 := r.ReadMapStart()
			if yyl3400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3400, d)
			}
		} else if yyct3400 == codecSelferValueTypeArray1234 {
			yyl3400 := r.ReadArrayStart()
			if yyl3400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3401Slc
	var yyhl3401 bool = l >= 0
	for yyj3401 := 0; ; yyj3401++ {
		if yyhl3401 {
			if yyj3401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3401Slc = r.DecodeBytes(yys3401Slc, true, true)
		yys3401 := string(yys3401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3401 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3404 := &x.ListMeta
				yym3405 := z.DecBinary()
				_ = yym3405
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3404) {
				} else {
					z.DecFallback(yyv3404, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3406 := &x.Items
				yym3407 := z.DecBinary()
				_ = yym3407
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3406), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3401)
		} // end switch yys3401
	} // end for yyj3401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3408 int
	var yyb3408 bool
	var yyhl3408 bool = l >= 0
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3411 := &x.ListMeta
		yym3412 := z.DecBinary()
		_ = yym3412
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3411) {
		} else {
			z.DecFallback(yyv3411, false)
		}
	}
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3413 := &x.Items
		yym3414 := z.DecBinary()
		_ = yym3414
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3413), d)
		}
	}
	for {
		yyj3408++
		if yyhl3408 {
			yyb3408 = yyj3408 > l
		} else {
			yyb3408 = r.CheckBreak()
		}
		if yyb3408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3415 := z.EncBinary()
		_ = yym3415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3416 := !z.EncBinary()
			yy2arr3416 := z.EncBasicHandle().StructToArray
			var yyq3416 [1]bool
			_, _, _ = yysep3416, yyq3416, yy2arr3416
			const yyr3416 bool = false
			var yynn3416 int
			if yyr3416 || yy2arr3416 {
				r.EncodeArrayStart(1)
			} else {
				yynn3416 = 1
				for _, b := range yyq3416 {
					if b {
						yynn3416++
					}
				}
				r.EncodeMapStart(yynn3416)
				yynn3416 = 0
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3420 := z.DecBinary()
	_ = yym3420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3421 := r.ContainerType()
		if yyct3421 == codecSelferValueTypeMap1234 {
			yyl3421 := r.ReadMapStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3421, d)
			}
		} else if yyct3421 == codecSelferValueTypeArray1234 {
			yyl3421 := r.ReadArrayStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3422Slc
	var yyhl3422 bool = l >= 0
	for yyj3422 := 0; ; yyj3422++ {
		if yyhl3422 {
			if yyj3422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3422Slc = r.DecodeBytes(yys3422Slc, true, true)
		yys3422 := string(yys3422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3422 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3423 := &x.Finalizers
				yym3424 := z.DecBinary()
				_ = yym3424
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3423), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3422)
		} // end switch yys3422
	} // end for yyj3422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3425 int
	var yyb3425 bool
	var yyhl3425 bool = l >= 0
	yyj3425++
	if yyhl3425 {
		yyb3425 = yyj3425 > l
	} else {
		yyb3425 = r.CheckBreak()
	}
	if yyb3425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3426 := &x.Finalizers
		yym3427 := z.DecBinary()
		_ = yym3427
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3426), d)
		}
	}
	for {
		yyj3425++
		if yyhl3425 {
			yyb3425 = yyj3425 > l
		} else {
			yyb3425 = r.CheckBreak()
		}
		if yyb3425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3428 := z.EncBinary()
	_ = yym3428
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3429 := z.DecBinary()
	_ = yym3429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3430 := z.EncBinary()
		_ = yym3430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3431 := !z.EncBinary()
			yy2arr3431 := z.EncBasicHandle().StructToArray
			var yyq3431 [1]bool
			_, _, _ = yysep3431, yyq3431, yy2arr3431
			const yyr3431 bool = false
			yyq3431[0] = x.Phase != ""
			var yynn3431 int
			if yyr3431 || yy2arr3431 {
				r.EncodeArrayStart(1)
			} else {
				yynn3431 = 0
				for _, b := range yyq3431 {
					if b {
						yynn3431++
					}
				}
				r.EncodeMapStart(yynn3431)
				yynn3431 = 0
			}
			if yyr3431 || yy2arr3431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3431[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3431[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3431 || yy2arr3431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3433 := z.DecBinary()
	_ = yym3433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3434 := r.ContainerType()
		if yyct3434 == codecSelferValueTypeMap1234 {
			yyl3434 := r.ReadMapStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3434, d)
			}
		} else if yyct3434 == codecSelferValueTypeArray1234 {
			yyl3434 := r.ReadArrayStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3435Slc
	var yyhl3435 bool = l >= 0
	for yyj3435 := 0; ; yyj3435++ {
		if yyhl3435 {
			if yyj3435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3435Slc = r.DecodeBytes(yys3435Slc, true, true)
		yys3435 := string(yys3435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3435 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3435)
		} // end switch yys3435
	} // end for yyj3435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3437 int
	var yyb3437 bool
	var yyhl3437 bool = l >= 0
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3437++
		if yyhl3437 {
			yyb3437 = yyj3437 > l
		} else {
			yyb3437 = r.CheckBreak()
		}
		if yyb3437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3439 := z.EncBinary()
	_ = yym3439
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3440 := z.DecBinary()
	_ = yym3440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3441 := z.EncBinary()
		_ = yym3441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3442 := !z.EncBinary()
			yy2arr3442 := z.EncBasicHandle().StructToArray
			var yyq3442 [5]bool
			_, _, _ = yysep3442, yyq3442, yy2arr3442
			const yyr3442 bool = false
			yyq3442[0] = x.Kind != ""
			yyq3442[1] = x.APIVersion != ""
			yyq3442[2] = true
			yyq3442[3] = true
			yyq3442[4] = true
			var yynn3442 int
			if yyr3442 || yy2arr3442 {
				r.EncodeArrayStart(5)
			} else {
				yynn3442 = 0
				for _, b := range yyq3442 {
					if b {
						yynn3442++
					}
				}
				r.EncodeMapStart(yynn3442)
				yynn3442 = 0
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[0] {
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[1] {
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[2] {
					yy3450 := &x.ObjectMeta
					yy3450.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3451 := &x.ObjectMeta
					yy3451.CodecEncodeSelf(e)
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[3] {
					yy3453 := &x.Spec
					yy3453.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3442[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3454 := &x.Spec
					yy3454.CodecEncodeSelf(e)
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[4] {
					yy3456 := &x.Status
					yy3456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3442[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3457 := &x.Status
					yy3457.CodecEncodeSelf(e)
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3458 := z.DecBinary()
	_ = yym3458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3459 := r.ContainerType()
		if yyct3459 == codecSelferValueTypeMap1234 {
			yyl3459 := r.ReadMapStart()
			if yyl3459 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3459, d)
			}
		} else if yyct3459 == codecSelferValueTypeArray1234 {
			yyl3459 := r.ReadArrayStart()
			if yyl3459 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3460Slc
	var yyhl3460 bool = l >= 0
	for yyj3460 := 0; ; yyj3460++ {
		if yyhl3460 {
			if yyj3460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3460Slc = r.DecodeBytes(yys3460Slc, true, true)
		yys3460 := string(yys3460Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3460 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3463 := &x.ObjectMeta
				yyv3463.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3464 := &x.Spec
				yyv3464.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3465 := &x.Status
				yyv3465.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3460)
		} // end switch yys3460
	} // end for yyj3460
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3466 int
	var yyb3466 bool
	var yyhl3466 bool = l >= 0
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3469 := &x.ObjectMeta
		yyv3469.CodecDecodeSelf(d)
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3470 := &x.Spec
		yyv3470.CodecDecodeSelf(d)
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3471 := &x.Status
		yyv3471.CodecDecodeSelf(d)
	}
	for {
		yyj3466++
		if yyhl3466 {
			yyb3466 = yyj3466 > l
		} else {
			yyb3466 = r.CheckBreak()
		}
		if yyb3466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3472 := z.EncBinary()
		_ = yym3472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3473 := !z.EncBinary()
			yy2arr3473 := z.EncBasicHandle().StructToArray
			var yyq3473 [4]bool
			_, _, _ = yysep3473, yyq3473, yy2arr3473
			const yyr3473 bool = false
			yyq3473[0] = x.Kind != ""
			yyq3473[1] = x.APIVersion != ""
			yyq3473[2] = true
			var yynn3473 int
			if yyr3473 || yy2arr3473 {
				r.EncodeArrayStart(4)
			} else {
				yynn3473 = 1
				for _, b := range yyq3473 {
					if b {
						yynn3473++
					}
				}
				r.EncodeMapStart(yynn3473)
				yynn3473 = 0
			}
			if yyr3473 || yy2arr3473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3473[0] {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3473 || yy2arr3473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3473[1] {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3473 || yy2arr3473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3473[2] {
					yy3481 := &x.ListMeta
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3481) {
					} else {
						z.EncFallback(yy3481)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3473[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3483 := &x.ListMeta
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3483) {
					} else {
						z.EncFallback(yy3483)
					}
				}
			}
			if yyr3473 || yy2arr3473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3473 || yy2arr3473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3488 := z.DecBinary()
	_ = yym3488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3489 := r.ContainerType()
		if yyct3489 == codecSelferValueTypeMap1234 {
			yyl3489 := r.ReadMapStart()
			if yyl3489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3489, d)
			}
		} else if yyct3489 == codecSelferValueTypeArray1234 {
			yyl3489 := r.ReadArrayStart()
			if yyl3489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3490Slc
	var yyhl3490 bool = l >= 0
	for yyj3490 := 0; ; yyj3490++ {
		if yyhl3490 {
			if yyj3490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3490Slc = r.DecodeBytes(yys3490Slc, true, true)
		yys3490 := string(yys3490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3490 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3493 := &x.ListMeta
				yym3494 := z.DecBinary()
				_ = yym3494
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3493) {
				} else {
					z.DecFallback(yyv3493, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3495 := &x.Items
				yym3496 := z.DecBinary()
				_ = yym3496
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3495), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3490)
		} // end switch yys3490
	} // end for yyj3490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3497 int
	var yyb3497 bool
	var yyhl3497 bool = l >= 0
	yyj3497++
	if yyhl3497 {
		yyb3497 = yyj3497 > l
	} else {
		yyb3497 = r.CheckBreak()
	}
	if yyb3497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3497++
	if yyhl3497 {
		yyb3497 = yyj3497 > l
	} else {
		yyb3497 = r.CheckBreak()
	}
	if yyb3497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3497++
	if yyhl3497 {
		yyb3497 = yyj3497 > l
	} else {
		yyb3497 = r.CheckBreak()
	}
	if yyb3497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3500 := &x.ListMeta
		yym3501 := z.DecBinary()
		_ = yym3501
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3500) {
		} else {
			z.DecFallback(yyv3500, false)
		}
	}
	yyj3497++
	if yyhl3497 {
		yyb3497 = yyj3497 > l
	} else {
		yyb3497 = r.CheckBreak()
	}
	if yyb3497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3502 := &x.Items
		yym3503 := z.DecBinary()
		_ = yym3503
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3502), d)
		}
	}
	for {
		yyj3497++
		if yyhl3497 {
			yyb3497 = yyj3497 > l
		} else {
			yyb3497 = r.CheckBreak()
		}
		if yyb3497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3504 := z.EncBinary()
		_ = yym3504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3505 := !z.EncBinary()
			yy2arr3505 := z.EncBasicHandle().StructToArray
			var yyq3505 [4]bool
			_, _, _ = yysep3505, yyq3505, yy2arr3505
			const yyr3505 bool = false
			yyq3505[0] = x.Kind != ""
			yyq3505[1] = x.APIVersion != ""
			yyq3505[2] = true
			var yynn3505 int
			if yyr3505 || yy2arr3505 {
				r.EncodeArrayStart(4)
			} else {
				yynn3505 = 1
				for _, b := range yyq3505 {
					if b {
						yynn3505++
					}
				}
				r.EncodeMapStart(yynn3505)
				yynn3505 = 0
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[0] {
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[1] {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[2] {
					yy3513 := &x.ObjectMeta
					yy3513.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3514 := &x.ObjectMeta
					yy3514.CodecEncodeSelf(e)
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3516 := &x.Target
				yy3516.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3517 := &x.Target
				yy3517.CodecEncodeSelf(e)
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3518 := z.DecBinary()
	_ = yym3518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3519 := r.ContainerType()
		if yyct3519 == codecSelferValueTypeMap1234 {
			yyl3519 := r.ReadMapStart()
			if yyl3519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3519, d)
			}
		} else if yyct3519 == codecSelferValueTypeArray1234 {
			yyl3519 := r.ReadArrayStart()
			if yyl3519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3520Slc
	var yyhl3520 bool = l >= 0
	for yyj3520 := 0; ; yyj3520++ {
		if yyhl3520 {
			if yyj3520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3520Slc = r.DecodeBytes(yys3520Slc, true, true)
		yys3520 := string(yys3520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3520 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3523 := &x.ObjectMeta
				yyv3523.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3524 := &x.Target
				yyv3524.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3520)
		} // end switch yys3520
	} // end for yyj3520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3525 int
	var yyb3525 bool
	var yyhl3525 bool = l >= 0
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3528 := &x.ObjectMeta
		yyv3528.CodecDecodeSelf(d)
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3529 := &x.Target
		yyv3529.CodecDecodeSelf(d)
	}
	for {
		yyj3525++
		if yyhl3525 {
			yyb3525 = yyj3525 > l
		} else {
			yyb3525 = r.CheckBreak()
		}
		if yyb3525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3530 := z.EncBinary()
		_ = yym3530
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3531 := !z.EncBinary()
			yy2arr3531 := z.EncBasicHandle().StructToArray
			var yyq3531 [1]bool
			_, _, _ = yysep3531, yyq3531, yy2arr3531
			const yyr3531 bool = false
			yyq3531[0] = x.UID != nil
			var yynn3531 int
			if yyr3531 || yy2arr3531 {
				r.EncodeArrayStart(1)
			} else {
				yynn3531 = 0
				for _, b := range yyq3531 {
					if b {
						yynn3531++
					}
				}
				r.EncodeMapStart(yynn3531)
				yynn3531 = 0
			}
			if yyr3531 || yy2arr3531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3531[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3533 := *x.UID
						yym3534 := z.EncBinary()
						_ = yym3534
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3533) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3533))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3531[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3535 := *x.UID
						yym3536 := z.EncBinary()
						_ = yym3536
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3535) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3535))
						}
					}
				}
			}
			if yyr3531 || yy2arr3531 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3537 := z.DecBinary()
	_ = yym3537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3538 := r.ContainerType()
		if yyct3538 == codecSelferValueTypeMap1234 {
			yyl3538 := r.ReadMapStart()
			if yyl3538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3538, d)
			}
		} else if yyct3538 == codecSelferValueTypeArray1234 {
			yyl3538 := r.ReadArrayStart()
			if yyl3538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3539Slc
	var yyhl3539 bool = l >= 0
	for yyj3539 := 0; ; yyj3539++ {
		if yyhl3539 {
			if yyj3539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3539Slc = r.DecodeBytes(yys3539Slc, true, true)
		yys3539 := string(yys3539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3539 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3541 := z.DecBinary()
				_ = yym3541
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3539)
		} // end switch yys3539
	} // end for yyj3539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3542 int
	var yyb3542 bool
	var yyhl3542 bool = l >= 0
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3544 := z.DecBinary()
		_ = yym3544
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3542++
		if yyhl3542 {
			yyb3542 = yyj3542 > l
		} else {
			yyb3542 = r.CheckBreak()
		}
		if yyb3542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3545 := z.EncBinary()
		_ = yym3545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3546 := !z.EncBinary()
			yy2arr3546 := z.EncBasicHandle().StructToArray
			var yyq3546 [5]bool
			_, _, _ = yysep3546, yyq3546, yy2arr3546
			const yyr3546 bool = false
			yyq3546[0] = x.Kind != ""
			yyq3546[1] = x.APIVersion != ""
			yyq3546[2] = x.GracePeriodSeconds != nil
			yyq3546[3] = x.Preconditions != nil
			yyq3546[4] = x.OrphanDependents != nil
			var yynn3546 int
			if yyr3546 || yy2arr3546 {
				r.EncodeArrayStart(5)
			} else {
				yynn3546 = 0
				for _, b := range yyq3546 {
					if b {
						yynn3546++
					}
				}
				r.EncodeMapStart(yynn3546)
				yynn3546 = 0
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[0] {
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[1] {
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3554 := *x.GracePeriodSeconds
						yym3555 := z.EncBinary()
						_ = yym3555
						if false {
						} else {
							r.EncodeInt(int64(yy3554))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3556 := *x.GracePeriodSeconds
						yym3557 := z.EncBinary()
						_ = yym3557
						if false {
						} else {
							r.EncodeInt(int64(yy3556))
						}
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3560 := *x.OrphanDependents
						yym3561 := z.EncBinary()
						_ = yym3561
						if false {
						} else {
							r.EncodeBool(bool(yy3560))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3562 := *x.OrphanDependents
						yym3563 := z.EncBinary()
						_ = yym3563
						if false {
						} else {
							r.EncodeBool(bool(yy3562))
						}
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3564 := z.DecBinary()
	_ = yym3564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3565 := r.ContainerType()
		if yyct3565 == codecSelferValueTypeMap1234 {
			yyl3565 := r.ReadMapStart()
			if yyl3565 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3565, d)
			}
		} else if yyct3565 == codecSelferValueTypeArray1234 {
			yyl3565 := r.ReadArrayStart()
			if yyl3565 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3565, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3566Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3566Slc
	var yyhl3566 bool = l >= 0
	for yyj3566 := 0; ; yyj3566++ {
		if yyhl3566 {
			if yyj3566 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3566Slc = r.DecodeBytes(yys3566Slc, true, true)
		yys3566 := string(yys3566Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3566 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3570 := z.DecBinary()
				_ = yym3570
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3573 := z.DecBinary()
				_ = yym3573
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3566)
		} // end switch yys3566
	} // end for yyj3566
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3574 int
	var yyb3574 bool
	var yyhl3574 bool = l >= 0
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3578 := z.DecBinary()
		_ = yym3578
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3581 := z.DecBinary()
		_ = yym3581
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3574++
		if yyhl3574 {
			yyb3574 = yyj3574 > l
		} else {
			yyb3574 = r.CheckBreak()
		}
		if yyb3574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3582 := z.EncBinary()
		_ = yym3582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3583 := !z.EncBinary()
			yy2arr3583 := z.EncBasicHandle().StructToArray
			var yyq3583 [4]bool
			_, _, _ = yysep3583, yyq3583, yy2arr3583
			const yyr3583 bool = false
			yyq3583[0] = x.Kind != ""
			yyq3583[1] = x.APIVersion != ""
			var yynn3583 int
			if yyr3583 || yy2arr3583 {
				r.EncodeArrayStart(4)
			} else {
				yynn3583 = 2
				for _, b := range yyq3583 {
					if b {
						yynn3583++
					}
				}
				r.EncodeMapStart(yynn3583)
				yynn3583 = 0
			}
			if yyr3583 || yy2arr3583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3583[0] {
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3583[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3586 := z.EncBinary()
					_ = yym3586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3583 || yy2arr3583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3583[1] {
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3583[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3583 || yy2arr3583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3591 := z.EncBinary()
				_ = yym3591
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3592 := z.EncBinary()
				_ = yym3592
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3583 || yy2arr3583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3594 := z.EncBinary()
				_ = yym3594
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3595 := z.EncBinary()
				_ = yym3595
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3583 || yy2arr3583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3596 := z.DecBinary()
	_ = yym3596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3597 := r.ContainerType()
		if yyct3597 == codecSelferValueTypeMap1234 {
			yyl3597 := r.ReadMapStart()
			if yyl3597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3597, d)
			}
		} else if yyct3597 == codecSelferValueTypeArray1234 {
			yyl3597 := r.ReadArrayStart()
			if yyl3597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3598Slc
	var yyhl3598 bool = l >= 0
	for yyj3598 := 0; ; yyj3598++ {
		if yyhl3598 {
			if yyj3598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3598Slc = r.DecodeBytes(yys3598Slc, true, true)
		yys3598 := string(yys3598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3598 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3598)
		} // end switch yys3598
	} // end for yyj3598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3603 int
	var yyb3603 bool
	var yyhl3603 bool = l >= 0
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3603++
		if yyhl3603 {
			yyb3603 = yyj3603 > l
		} else {
			yyb3603 = r.CheckBreak()
		}
		if yyb3603 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3603-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3608 := z.EncBinary()
		_ = yym3608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3609 := !z.EncBinary()
			yy2arr3609 := z.EncBasicHandle().StructToArray
			var yyq3609 [7]bool
			_, _, _ = yysep3609, yyq3609, yy2arr3609
			const yyr3609 bool = false
			yyq3609[0] = x.Kind != ""
			yyq3609[1] = x.APIVersion != ""
			var yynn3609 int
			if yyr3609 || yy2arr3609 {
				r.EncodeArrayStart(7)
			} else {
				yynn3609 = 5
				for _, b := range yyq3609 {
					if b {
						yynn3609++
					}
				}
				r.EncodeMapStart(yynn3609)
				yynn3609 = 0
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[0] {
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[1] {
					yym3614 := z.EncBinary()
					_ = yym3614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3623 := z.EncBinary()
				_ = yym3623
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3624 := z.EncBinary()
				_ = yym3624
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3626 := z.EncBinary()
				_ = yym3626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3627 := z.EncBinary()
				_ = yym3627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3629 := *x.TimeoutSeconds
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeInt(int64(yy3629))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3631 := *x.TimeoutSeconds
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeInt(int64(yy3631))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3633 := z.DecBinary()
	_ = yym3633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3634 := r.ContainerType()
		if yyct3634 == codecSelferValueTypeMap1234 {
			yyl3634 := r.ReadMapStart()
			if yyl3634 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3634, d)
			}
		} else if yyct3634 == codecSelferValueTypeArray1234 {
			yyl3634 := r.ReadArrayStart()
			if yyl3634 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3635Slc
	var yyhl3635 bool = l >= 0
	for yyj3635 := 0; ; yyj3635++ {
		if yyhl3635 {
			if yyj3635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3635Slc = r.DecodeBytes(yys3635Slc, true, true)
		yys3635 := string(yys3635Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3635 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3638 := &x.LabelSelector
				yym3639 := z.DecBinary()
				_ = yym3639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3638) {
				} else {
					z.DecFallback(yyv3638, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3640 := &x.FieldSelector
				yym3641 := z.DecBinary()
				_ = yym3641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3640) {
				} else {
					z.DecFallback(yyv3640, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3645 := z.DecBinary()
				_ = yym3645
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3635)
		} // end switch yys3635
	} // end for yyj3635
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3646 int
	var yyb3646 bool
	var yyhl3646 bool = l >= 0
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3649 := &x.LabelSelector
		yym3650 := z.DecBinary()
		_ = yym3650
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3649) {
		} else {
			z.DecFallback(yyv3649, true)
		}
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3651 := &x.FieldSelector
		yym3652 := z.DecBinary()
		_ = yym3652
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3651) {
		} else {
			z.DecFallback(yyv3651, true)
		}
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3656 := z.DecBinary()
		_ = yym3656
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3646++
		if yyhl3646 {
			yyb3646 = yyj3646 > l
		} else {
			yyb3646 = r.CheckBreak()
		}
		if yyb3646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3657 := z.EncBinary()
		_ = yym3657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3658 := !z.EncBinary()
			yy2arr3658 := z.EncBasicHandle().StructToArray
			var yyq3658 [10]bool
			_, _, _ = yysep3658, yyq3658, yy2arr3658
			const yyr3658 bool = false
			yyq3658[0] = x.Kind != ""
			yyq3658[1] = x.APIVersion != ""
			var yynn3658 int
			if yyr3658 || yy2arr3658 {
				r.EncodeArrayStart(10)
			} else {
				yynn3658 = 8
				for _, b := range yyq3658 {
					if b {
						yynn3658++
					}
				}
				r.EncodeMapStart(yynn3658)
				yynn3658 = 0
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[0] {
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[1] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3666 := z.EncBinary()
				_ = yym3666
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3667 := z.EncBinary()
				_ = yym3667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3669 := z.EncBinary()
				_ = yym3669
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3670 := z.EncBinary()
				_ = yym3670
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3672 := z.EncBinary()
				_ = yym3672
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3673 := z.EncBinary()
				_ = yym3673
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3675 := *x.SinceSeconds
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeInt(int64(yy3675))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3677 := *x.SinceSeconds
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeInt(int64(yy3677))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3680 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3680 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3681 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3681 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3683 := z.EncBinary()
				_ = yym3683
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3684 := z.EncBinary()
				_ = yym3684
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3686 := *x.TailLines
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeInt(int64(yy3686))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3688 := *x.TailLines
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeInt(int64(yy3688))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3691 := *x.LimitBytes
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeInt(int64(yy3691))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3693 := *x.LimitBytes
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeInt(int64(yy3693))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3695 := z.DecBinary()
	_ = yym3695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3696 := r.ContainerType()
		if yyct3696 == codecSelferValueTypeMap1234 {
			yyl3696 := r.ReadMapStart()
			if yyl3696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3696, d)
			}
		} else if yyct3696 == codecSelferValueTypeArray1234 {
			yyl3696 := r.ReadArrayStart()
			if yyl3696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3697Slc
	var yyhl3697 bool = l >= 0
	for yyj3697 := 0; ; yyj3697++ {
		if yyhl3697 {
			if yyj3697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3697Slc = r.DecodeBytes(yys3697Slc, true, true)
		yys3697 := string(yys3697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3697 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3704 := z.DecBinary()
				_ = yym3704
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3706 := z.DecBinary()
				_ = yym3706
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3706 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3706 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3709 := z.DecBinary()
				_ = yym3709
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3711 := z.DecBinary()
				_ = yym3711
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3697)
		} // end switch yys3697
	} // end for yyj3697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3712 int
	var yyb3712 bool
	var yyhl3712 bool = l >= 0
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3719 := z.DecBinary()
		_ = yym3719
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3721 := z.DecBinary()
		_ = yym3721
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3721 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3721 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3724 := z.DecBinary()
		_ = yym3724
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3712++
	if yyhl3712 {
		yyb3712 = yyj3712 > l
	} else {
		yyb3712 = r.CheckBreak()
	}
	if yyb3712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3726 := z.DecBinary()
		_ = yym3726
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3712++
		if yyhl3712 {
			yyb3712 = yyj3712 > l
		} else {
			yyb3712 = r.CheckBreak()
		}
		if yyb3712 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3712-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3727 := z.EncBinary()
		_ = yym3727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3728 := !z.EncBinary()
			yy2arr3728 := z.EncBasicHandle().StructToArray
			var yyq3728 [7]bool
			_, _, _ = yysep3728, yyq3728, yy2arr3728
			const yyr3728 bool = false
			yyq3728[0] = x.Kind != ""
			yyq3728[1] = x.APIVersion != ""
			yyq3728[2] = x.Stdin != false
			yyq3728[3] = x.Stdout != false
			yyq3728[4] = x.Stderr != false
			yyq3728[5] = x.TTY != false
			yyq3728[6] = x.Container != ""
			var yynn3728 int
			if yyr3728 || yy2arr3728 {
				r.EncodeArrayStart(7)
			} else {
				yynn3728 = 0
				for _, b := range yyq3728 {
					if b {
						yynn3728++
					}
				}
				r.EncodeMapStart(yynn3728)
				yynn3728 = 0
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[0] {
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[1] {
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[2] {
					yym3736 := z.EncBinary()
					_ = yym3736
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[3] {
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3728[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[4] {
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3728[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[5] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3728[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[6] {
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3750 := z.DecBinary()
	_ = yym3750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3751 := r.ContainerType()
		if yyct3751 == codecSelferValueTypeMap1234 {
			yyl3751 := r.ReadMapStart()
			if yyl3751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3751, d)
			}
		} else if yyct3751 == codecSelferValueTypeArray1234 {
			yyl3751 := r.ReadArrayStart()
			if yyl3751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3752Slc
	var yyhl3752 bool = l >= 0
	for yyj3752 := 0; ; yyj3752++ {
		if yyhl3752 {
			if yyj3752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3752Slc = r.DecodeBytes(yys3752Slc, true, true)
		yys3752 := string(yys3752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3752 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3752)
		} // end switch yys3752
	} // end for yyj3752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3760 int
	var yyb3760 bool
	var yyhl3760 bool = l >= 0
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3760++
		if yyhl3760 {
			yyb3760 = yyj3760 > l
		} else {
			yyb3760 = r.CheckBreak()
		}
		if yyb3760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3768 := z.EncBinary()
		_ = yym3768
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3769 := !z.EncBinary()
			yy2arr3769 := z.EncBasicHandle().StructToArray
			var yyq3769 [8]bool
			_, _, _ = yysep3769, yyq3769, yy2arr3769
			const yyr3769 bool = false
			yyq3769[0] = x.Kind != ""
			yyq3769[1] = x.APIVersion != ""
			var yynn3769 int
			if yyr3769 || yy2arr3769 {
				r.EncodeArrayStart(8)
			} else {
				yynn3769 = 6
				for _, b := range yyq3769 {
					if b {
						yynn3769++
					}
				}
				r.EncodeMapStart(yynn3769)
				yynn3769 = 0
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3769[0] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3769[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3769[1] {
					yym3774 := z.EncBinary()
					_ = yym3774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3769[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3777 := z.EncBinary()
				_ = yym3777
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3778 := z.EncBinary()
				_ = yym3778
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3780 := z.EncBinary()
				_ = yym3780
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3781 := z.EncBinary()
				_ = yym3781
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3783 := z.EncBinary()
				_ = yym3783
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3784 := z.EncBinary()
				_ = yym3784
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3786 := z.EncBinary()
				_ = yym3786
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3787 := z.EncBinary()
				_ = yym3787
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3789 := z.EncBinary()
				_ = yym3789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3790 := z.EncBinary()
				_ = yym3790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3792 := z.EncBinary()
					_ = yym3792
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3794 := z.DecBinary()
	_ = yym3794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3795 := r.ContainerType()
		if yyct3795 == codecSelferValueTypeMap1234 {
			yyl3795 := r.ReadMapStart()
			if yyl3795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3795, d)
			}
		} else if yyct3795 == codecSelferValueTypeArray1234 {
			yyl3795 := r.ReadArrayStart()
			if yyl3795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3796Slc
	var yyhl3796 bool = l >= 0
	for yyj3796 := 0; ; yyj3796++ {
		if yyhl3796 {
			if yyj3796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3796Slc = r.DecodeBytes(yys3796Slc, true, true)
		yys3796 := string(yys3796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3796 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3804 := &x.Command
				yym3805 := z.DecBinary()
				_ = yym3805
				if false {
				} else {
					z.F.DecSliceStringX(yyv3804, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3796)
		} // end switch yys3796
	} // end for yyj3796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3806 int
	var yyb3806 bool
	var yyhl3806 bool = l >= 0
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3814 := &x.Command
		yym3815 := z.DecBinary()
		_ = yym3815
		if false {
		} else {
			z.F.DecSliceStringX(yyv3814, false, d)
		}
	}
	for {
		yyj3806++
		if yyhl3806 {
			yyb3806 = yyj3806 > l
		} else {
			yyb3806 = r.CheckBreak()
		}
		if yyb3806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3816 := z.EncBinary()
		_ = yym3816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3817 := !z.EncBinary()
			yy2arr3817 := z.EncBasicHandle().StructToArray
			var yyq3817 [3]bool
			_, _, _ = yysep3817, yyq3817, yy2arr3817
			const yyr3817 bool = false
			yyq3817[0] = x.Kind != ""
			yyq3817[1] = x.APIVersion != ""
			var yynn3817 int
			if yyr3817 || yy2arr3817 {
				r.EncodeArrayStart(3)
			} else {
				yynn3817 = 1
				for _, b := range yyq3817 {
					if b {
						yynn3817++
					}
				}
				r.EncodeMapStart(yynn3817)
				yynn3817 = 0
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[0] {
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[1] {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3825 := z.EncBinary()
				_ = yym3825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3826 := z.EncBinary()
				_ = yym3826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3827 := z.DecBinary()
	_ = yym3827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3828 := r.ContainerType()
		if yyct3828 == codecSelferValueTypeMap1234 {
			yyl3828 := r.ReadMapStart()
			if yyl3828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3828, d)
			}
		} else if yyct3828 == codecSelferValueTypeArray1234 {
			yyl3828 := r.ReadArrayStart()
			if yyl3828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3829Slc
	var yyhl3829 bool = l >= 0
	for yyj3829 := 0; ; yyj3829++ {
		if yyhl3829 {
			if yyj3829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3829Slc = r.DecodeBytes(yys3829Slc, true, true)
		yys3829 := string(yys3829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3829 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3829)
		} // end switch yys3829
	} // end for yyj3829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3833 int
	var yyb3833 bool
	var yyhl3833 bool = l >= 0
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3833++
		if yyhl3833 {
			yyb3833 = yyj3833 > l
		} else {
			yyb3833 = r.CheckBreak()
		}
		if yyb3833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3837 := z.EncBinary()
		_ = yym3837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3838 := !z.EncBinary()
			yy2arr3838 := z.EncBasicHandle().StructToArray
			var yyq3838 [3]bool
			_, _, _ = yysep3838, yyq3838, yy2arr3838
			const yyr3838 bool = false
			yyq3838[0] = x.Kind != ""
			yyq3838[1] = x.APIVersion != ""
			var yynn3838 int
			if yyr3838 || yy2arr3838 {
				r.EncodeArrayStart(3)
			} else {
				yynn3838 = 1
				for _, b := range yyq3838 {
					if b {
						yynn3838++
					}
				}
				r.EncodeMapStart(yynn3838)
				yynn3838 = 0
			}
			if yyr3838 || yy2arr3838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3838[0] {
					yym3840 := z.EncBinary()
					_ = yym3840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3838[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3838 || yy2arr3838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3838[1] {
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3838[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3838 || yy2arr3838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3846 := z.EncBinary()
				_ = yym3846
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3847 := z.EncBinary()
				_ = yym3847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3838 || yy2arr3838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3848 := z.DecBinary()
	_ = yym3848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3849 := r.ContainerType()
		if yyct3849 == codecSelferValueTypeMap1234 {
			yyl3849 := r.ReadMapStart()
			if yyl3849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3849, d)
			}
		} else if yyct3849 == codecSelferValueTypeArray1234 {
			yyl3849 := r.ReadArrayStart()
			if yyl3849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3850Slc
	var yyhl3850 bool = l >= 0
	for yyj3850 := 0; ; yyj3850++ {
		if yyhl3850 {
			if yyj3850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3850Slc = r.DecodeBytes(yys3850Slc, true, true)
		yys3850 := string(yys3850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3850 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3850)
		} // end switch yys3850
	} // end for yyj3850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3854 int
	var yyb3854 bool
	var yyhl3854 bool = l >= 0
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3854++
		if yyhl3854 {
			yyb3854 = yyj3854 > l
		} else {
			yyb3854 = r.CheckBreak()
		}
		if yyb3854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3858 := z.EncBinary()
		_ = yym3858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3859 := !z.EncBinary()
			yy2arr3859 := z.EncBasicHandle().StructToArray
			var yyq3859 [3]bool
			_, _, _ = yysep3859, yyq3859, yy2arr3859
			const yyr3859 bool = false
			yyq3859[0] = x.Kind != ""
			yyq3859[1] = x.APIVersion != ""
			var yynn3859 int
			if yyr3859 || yy2arr3859 {
				r.EncodeArrayStart(3)
			} else {
				yynn3859 = 1
				for _, b := range yyq3859 {
					if b {
						yynn3859++
					}
				}
				r.EncodeMapStart(yynn3859)
				yynn3859 = 0
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[0] {
					yym3861 := z.EncBinary()
					_ = yym3861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[1] {
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3867 := z.EncBinary()
				_ = yym3867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3868 := z.EncBinary()
				_ = yym3868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3869 := z.DecBinary()
	_ = yym3869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3870 := r.ContainerType()
		if yyct3870 == codecSelferValueTypeMap1234 {
			yyl3870 := r.ReadMapStart()
			if yyl3870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3870, d)
			}
		} else if yyct3870 == codecSelferValueTypeArray1234 {
			yyl3870 := r.ReadArrayStart()
			if yyl3870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3871Slc
	var yyhl3871 bool = l >= 0
	for yyj3871 := 0; ; yyj3871++ {
		if yyhl3871 {
			if yyj3871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3871Slc = r.DecodeBytes(yys3871Slc, true, true)
		yys3871 := string(yys3871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3871 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3871)
		} // end switch yys3871
	} // end for yyj3871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3875 int
	var yyb3875 bool
	var yyhl3875 bool = l >= 0
	yyj3875++
	if yyhl3875 {
		yyb3875 = yyj3875 > l
	} else {
		yyb3875 = r.CheckBreak()
	}
	if yyb3875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3875++
	if yyhl3875 {
		yyb3875 = yyj3875 > l
	} else {
		yyb3875 = r.CheckBreak()
	}
	if yyb3875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3875++
	if yyhl3875 {
		yyb3875 = yyj3875 > l
	} else {
		yyb3875 = r.CheckBreak()
	}
	if yyb3875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3875++
		if yyhl3875 {
			yyb3875 = yyj3875 > l
		} else {
			yyb3875 = r.CheckBreak()
		}
		if yyb3875 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3875-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3879 := z.EncBinary()
		_ = yym3879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3880 := !z.EncBinary()
			yy2arr3880 := z.EncBasicHandle().StructToArray
			var yyq3880 [5]bool
			_, _, _ = yysep3880, yyq3880, yy2arr3880
			const yyr3880 bool = false
			yyq3880[4] = x.Controller != nil
			var yynn3880 int
			if yyr3880 || yy2arr3880 {
				r.EncodeArrayStart(5)
			} else {
				yynn3880 = 4
				for _, b := range yyq3880 {
					if b {
						yynn3880++
					}
				}
				r.EncodeMapStart(yynn3880)
				yynn3880 = 0
			}
			if yyr3880 || yy2arr3880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3882 := z.EncBinary()
				_ = yym3882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3883 := z.EncBinary()
				_ = yym3883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3880 || yy2arr3880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3885 := z.EncBinary()
				_ = yym3885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3886 := z.EncBinary()
				_ = yym3886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3880 || yy2arr3880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3888 := z.EncBinary()
				_ = yym3888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3889 := z.EncBinary()
				_ = yym3889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3880 || yy2arr3880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3891 := z.EncBinary()
				_ = yym3891
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3892 := z.EncBinary()
				_ = yym3892
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3880 || yy2arr3880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3880[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3894 := *x.Controller
						yym3895 := z.EncBinary()
						_ = yym3895
						if false {
						} else {
							r.EncodeBool(bool(yy3894))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3880[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3896 := *x.Controller
						yym3897 := z.EncBinary()
						_ = yym3897
						if false {
						} else {
							r.EncodeBool(bool(yy3896))
						}
					}
				}
			}
			if yyr3880 || yy2arr3880 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3898 := z.DecBinary()
	_ = yym3898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3899 := r.ContainerType()
		if yyct3899 == codecSelferValueTypeMap1234 {
			yyl3899 := r.ReadMapStart()
			if yyl3899 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3899, d)
			}
		} else if yyct3899 == codecSelferValueTypeArray1234 {
			yyl3899 := r.ReadArrayStart()
			if yyl3899 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3900Slc
	var yyhl3900 bool = l >= 0
	for yyj3900 := 0; ; yyj3900++ {
		if yyhl3900 {
			if yyj3900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3900Slc = r.DecodeBytes(yys3900Slc, true, true)
		yys3900 := string(yys3900Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3900 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3906 := z.DecBinary()
				_ = yym3906
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3900)
		} // end switch yys3900
	} // end for yyj3900
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3907 int
	var yyb3907 bool
	var yyhl3907 bool = l >= 0
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3913 := z.DecBinary()
		_ = yym3913
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3907++
		if yyhl3907 {
			yyb3907 = yyj3907 > l
		} else {
			yyb3907 = r.CheckBreak()
		}
		if yyb3907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3914 := z.EncBinary()
		_ = yym3914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3915 := !z.EncBinary()
			yy2arr3915 := z.EncBasicHandle().StructToArray
			var yyq3915 [7]bool
			_, _, _ = yysep3915, yyq3915, yy2arr3915
			const yyr3915 bool = false
			yyq3915[0] = x.Kind != ""
			yyq3915[1] = x.Namespace != ""
			yyq3915[2] = x.Name != ""
			yyq3915[3] = x.UID != ""
			yyq3915[4] = x.APIVersion != ""
			yyq3915[5] = x.ResourceVersion != ""
			yyq3915[6] = x.FieldPath != ""
			var yynn3915 int
			if yyr3915 || yy2arr3915 {
				r.EncodeArrayStart(7)
			} else {
				yynn3915 = 0
				for _, b := range yyq3915 {
					if b {
						yynn3915++
					}
				}
				r.EncodeMapStart(yynn3915)
				yynn3915 = 0
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[0] {
					yym3917 := z.EncBinary()
					_ = yym3917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[1] {
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[2] {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[3] {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[4] {
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[5] {
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[6] {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3937 := z.DecBinary()
	_ = yym3937
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3938 := r.ContainerType()
		if yyct3938 == codecSelferValueTypeMap1234 {
			yyl3938 := r.ReadMapStart()
			if yyl3938 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3938, d)
			}
		} else if yyct3938 == codecSelferValueTypeArray1234 {
			yyl3938 := r.ReadArrayStart()
			if yyl3938 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3938, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3939Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3939Slc
	var yyhl3939 bool = l >= 0
	for yyj3939 := 0; ; yyj3939++ {
		if yyhl3939 {
			if yyj3939 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3939Slc = r.DecodeBytes(yys3939Slc, true, true)
		yys3939 := string(yys3939Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3939 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3939)
		} // end switch yys3939
	} // end for yyj3939
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3947 int
	var yyb3947 bool
	var yyhl3947 bool = l >= 0
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3947++
		if yyhl3947 {
			yyb3947 = yyj3947 > l
		} else {
			yyb3947 = r.CheckBreak()
		}
		if yyb3947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3955 := z.EncBinary()
		_ = yym3955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3956 := !z.EncBinary()
			yy2arr3956 := z.EncBasicHandle().StructToArray
			var yyq3956 [1]bool
			_, _, _ = yysep3956, yyq3956, yy2arr3956
			const yyr3956 bool = false
			var yynn3956 int
			if yyr3956 || yy2arr3956 {
				r.EncodeArrayStart(1)
			} else {
				yynn3956 = 1
				for _, b := range yyq3956 {
					if b {
						yynn3956++
					}
				}
				r.EncodeMapStart(yynn3956)
				yynn3956 = 0
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3958 := z.EncBinary()
				_ = yym3958
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3959 := z.EncBinary()
				_ = yym3959
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3960 := z.DecBinary()
	_ = yym3960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3961 := r.ContainerType()
		if yyct3961 == codecSelferValueTypeMap1234 {
			yyl3961 := r.ReadMapStart()
			if yyl3961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3961, d)
			}
		} else if yyct3961 == codecSelferValueTypeArray1234 {
			yyl3961 := r.ReadArrayStart()
			if yyl3961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3962Slc
	var yyhl3962 bool = l >= 0
	for yyj3962 := 0; ; yyj3962++ {
		if yyhl3962 {
			if yyj3962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3962Slc = r.DecodeBytes(yys3962Slc, true, true)
		yys3962 := string(yys3962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3962 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3962)
		} // end switch yys3962
	} // end for yyj3962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3964 int
	var yyb3964 bool
	var yyhl3964 bool = l >= 0
	yyj3964++
	if yyhl3964 {
		yyb3964 = yyj3964 > l
	} else {
		yyb3964 = r.CheckBreak()
	}
	if yyb3964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3964++
		if yyhl3964 {
			yyb3964 = yyj3964 > l
		} else {
			yyb3964 = r.CheckBreak()
		}
		if yyb3964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3966 := z.EncBinary()
		_ = yym3966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3967 := !z.EncBinary()
			yy2arr3967 := z.EncBasicHandle().StructToArray
			var yyq3967 [3]bool
			_, _, _ = yysep3967, yyq3967, yy2arr3967
			const yyr3967 bool = false
			yyq3967[0] = x.Kind != ""
			yyq3967[1] = x.APIVersion != ""
			yyq3967[2] = true
			var yynn3967 int
			if yyr3967 || yy2arr3967 {
				r.EncodeArrayStart(3)
			} else {
				yynn3967 = 0
				for _, b := range yyq3967 {
					if b {
						yynn3967++
					}
				}
				r.EncodeMapStart(yynn3967)
				yynn3967 = 0
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[0] {
					yym3969 := z.EncBinary()
					_ = yym3969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3967[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[1] {
					yym3972 := z.EncBinary()
					_ = yym3972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[2] {
					yy3975 := &x.Reference
					yy3975.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3976 := &x.Reference
					yy3976.CodecEncodeSelf(e)
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3977 := z.DecBinary()
	_ = yym3977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3978 := r.ContainerType()
		if yyct3978 == codecSelferValueTypeMap1234 {
			yyl3978 := r.ReadMapStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3978, d)
			}
		} else if yyct3978 == codecSelferValueTypeArray1234 {
			yyl3978 := r.ReadArrayStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3979Slc
	var yyhl3979 bool = l >= 0
	for yyj3979 := 0; ; yyj3979++ {
		if yyhl3979 {
			if yyj3979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3979Slc = r.DecodeBytes(yys3979Slc, true, true)
		yys3979 := string(yys3979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3979 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3982 := &x.Reference
				yyv3982.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3979)
		} // end switch yys3979
	} // end for yyj3979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3983 int
	var yyb3983 bool
	var yyhl3983 bool = l >= 0
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3986 := &x.Reference
		yyv3986.CodecDecodeSelf(d)
	}
	for {
		yyj3983++
		if yyhl3983 {
			yyb3983 = yyj3983 > l
		} else {
			yyb3983 = r.CheckBreak()
		}
		if yyb3983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3987 := z.EncBinary()
		_ = yym3987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3988 := !z.EncBinary()
			yy2arr3988 := z.EncBasicHandle().StructToArray
			var yyq3988 [2]bool
			_, _, _ = yysep3988, yyq3988, yy2arr3988
			const yyr3988 bool = false
			yyq3988[0] = x.Component != ""
			yyq3988[1] = x.Host != ""
			var yynn3988 int
			if yyr3988 || yy2arr3988 {
				r.EncodeArrayStart(2)
			} else {
				yynn3988 = 0
				for _, b := range yyq3988 {
					if b {
						yynn3988++
					}
				}
				r.EncodeMapStart(yynn3988)
				yynn3988 = 0
			}
			if yyr3988 || yy2arr3988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3988[0] {
					yym3990 := z.EncBinary()
					_ = yym3990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3991 := z.EncBinary()
					_ = yym3991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3988 || yy2arr3988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3988[1] {
					yym3993 := z.EncBinary()
					_ = yym3993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3988 || yy2arr3988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3995 := z.DecBinary()
	_ = yym3995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3996 := r.ContainerType()
		if yyct3996 == codecSelferValueTypeMap1234 {
			yyl3996 := r.ReadMapStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3996, d)
			}
		} else if yyct3996 == codecSelferValueTypeArray1234 {
			yyl3996 := r.ReadArrayStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3997Slc
	var yyhl3997 bool = l >= 0
	for yyj3997 := 0; ; yyj3997++ {
		if yyhl3997 {
			if yyj3997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3997Slc = r.DecodeBytes(yys3997Slc, true, true)
		yys3997 := string(yys3997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3997 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3997)
		} // end switch yys3997
	} // end for yyj3997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4000 int
	var yyb4000 bool
	var yyhl4000 bool = l >= 0
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj4000++
		if yyhl4000 {
			yyb4000 = yyj4000 > l
		} else {
			yyb4000 = r.CheckBreak()
		}
		if yyb4000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4003 := z.EncBinary()
		_ = yym4003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4004 := !z.EncBinary()
			yy2arr4004 := z.EncBasicHandle().StructToArray
			var yyq4004 [11]bool
			_, _, _ = yysep4004, yyq4004, yy2arr4004
			const yyr4004 bool = false
			yyq4004[0] = x.Kind != ""
			yyq4004[1] = x.APIVersion != ""
			yyq4004[2] = true
			yyq4004[3] = true
			yyq4004[4] = x.Reason != ""
			yyq4004[5] = x.Message != ""
			yyq4004[6] = true
			yyq4004[7] = true
			yyq4004[8] = true
			yyq4004[9] = x.Count != 0
			yyq4004[10] = x.Type != ""
			var yynn4004 int
			if yyr4004 || yy2arr4004 {
				r.EncodeArrayStart(11)
			} else {
				yynn4004 = 0
				for _, b := range yyq4004 {
					if b {
						yynn4004++
					}
				}
				r.EncodeMapStart(yynn4004)
				yynn4004 = 0
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[0] {
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[1] {
					yym4009 := z.EncBinary()
					_ = yym4009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[2] {
					yy4012 := &x.ObjectMeta
					yy4012.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4013 := &x.ObjectMeta
					yy4013.CodecEncodeSelf(e)
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[3] {
					yy4015 := &x.InvolvedObject
					yy4015.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4016 := &x.InvolvedObject
					yy4016.CodecEncodeSelf(e)
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[4] {
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[5] {
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4022 := z.EncBinary()
					_ = yym4022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[6] {
					yy4024 := &x.Source
					yy4024.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4025 := &x.Source
					yy4025.CodecEncodeSelf(e)
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[7] {
					yy4027 := &x.FirstTimestamp
					yym4028 := z.EncBinary()
					_ = yym4028
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4027) {
					} else if yym4028 {
						z.EncBinaryMarshal(yy4027)
					} else if !yym4028 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4027)
					} else {
						z.EncFallback(yy4027)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4029 := &x.FirstTimestamp
					yym4030 := z.EncBinary()
					_ = yym4030
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4029) {
					} else if yym4030 {
						z.EncBinaryMarshal(yy4029)
					} else if !yym4030 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4029)
					} else {
						z.EncFallback(yy4029)
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[8] {
					yy4032 := &x.LastTimestamp
					yym4033 := z.EncBinary()
					_ = yym4033
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4032) {
					} else if yym4033 {
						z.EncBinaryMarshal(yy4032)
					} else if !yym4033 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4032)
					} else {
						z.EncFallback(yy4032)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4034 := &x.LastTimestamp
					yym4035 := z.EncBinary()
					_ = yym4035
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4034) {
					} else if yym4035 {
						z.EncBinaryMarshal(yy4034)
					} else if !yym4035 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4034)
					} else {
						z.EncFallback(yy4034)
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[9] {
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq4004[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4038 := z.EncBinary()
					_ = yym4038
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[10] {
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4042 := z.DecBinary()
	_ = yym4042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4043 := r.ContainerType()
		if yyct4043 == codecSelferValueTypeMap1234 {
			yyl4043 := r.ReadMapStart()
			if yyl4043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4043, d)
			}
		} else if yyct4043 == codecSelferValueTypeArray1234 {
			yyl4043 := r.ReadArrayStart()
			if yyl4043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4044Slc
	var yyhl4044 bool = l >= 0
	for yyj4044 := 0; ; yyj4044++ {
		if yyhl4044 {
			if yyj4044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4044Slc = r.DecodeBytes(yys4044Slc, true, true)
		yys4044 := string(yys4044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4044 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4047 := &x.ObjectMeta
				yyv4047.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv4048 := &x.InvolvedObject
				yyv4048.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv4051 := &x.Source
				yyv4051.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4052 := &x.FirstTimestamp
				yym4053 := z.DecBinary()
				_ = yym4053
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4052) {
				} else if yym4053 {
					z.DecBinaryUnmarshal(yyv4052)
				} else if !yym4053 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4052)
				} else {
					z.DecFallback(yyv4052, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4054 := &x.LastTimestamp
				yym4055 := z.DecBinary()
				_ = yym4055
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4054) {
				} else if yym4055 {
					z.DecBinaryUnmarshal(yyv4054)
				} else if !yym4055 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4054)
				} else {
					z.DecFallback(yyv4054, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4044)
		} // end switch yys4044
	} // end for yyj4044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4058 int
	var yyb4058 bool
	var yyhl4058 bool = l >= 0
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4061 := &x.ObjectMeta
		yyv4061.CodecDecodeSelf(d)
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv4062 := &x.InvolvedObject
		yyv4062.CodecDecodeSelf(d)
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv4065 := &x.Source
		yyv4065.CodecDecodeSelf(d)
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4066 := &x.FirstTimestamp
		yym4067 := z.DecBinary()
		_ = yym4067
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4066) {
		} else if yym4067 {
			z.DecBinaryUnmarshal(yyv4066)
		} else if !yym4067 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4066)
		} else {
			z.DecFallback(yyv4066, false)
		}
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4068 := &x.LastTimestamp
		yym4069 := z.DecBinary()
		_ = yym4069
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4068) {
		} else if yym4069 {
			z.DecBinaryUnmarshal(yyv4068)
		} else if !yym4069 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4068)
		} else {
			z.DecFallback(yyv4068, false)
		}
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj4058++
	if yyhl4058 {
		yyb4058 = yyj4058 > l
	} else {
		yyb4058 = r.CheckBreak()
	}
	if yyb4058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj4058++
		if yyhl4058 {
			yyb4058 = yyj4058 > l
		} else {
			yyb4058 = r.CheckBreak()
		}
		if yyb4058 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4058-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4072 := z.EncBinary()
		_ = yym4072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4073 := !z.EncBinary()
			yy2arr4073 := z.EncBasicHandle().StructToArray
			var yyq4073 [4]bool
			_, _, _ = yysep4073, yyq4073, yy2arr4073
			const yyr4073 bool = false
			yyq4073[0] = x.Kind != ""
			yyq4073[1] = x.APIVersion != ""
			yyq4073[2] = true
			var yynn4073 int
			if yyr4073 || yy2arr4073 {
				r.EncodeArrayStart(4)
			} else {
				yynn4073 = 1
				for _, b := range yyq4073 {
					if b {
						yynn4073++
					}
				}
				r.EncodeMapStart(yynn4073)
				yynn4073 = 0
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[0] {
					yym4075 := z.EncBinary()
					_ = yym4075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4073[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[1] {
					yym4078 := z.EncBinary()
					_ = yym4078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4079 := z.EncBinary()
					_ = yym4079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[2] {
					yy4081 := &x.ListMeta
					yym4082 := z.EncBinary()
					_ = yym4082
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4081) {
					} else {
						z.EncFallback(yy4081)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4073[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4083 := &x.ListMeta
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4083) {
					} else {
						z.EncFallback(yy4083)
					}
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4086 := z.EncBinary()
					_ = yym4086
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4087 := z.EncBinary()
					_ = yym4087
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4088 := z.DecBinary()
	_ = yym4088
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4089 := r.ContainerType()
		if yyct4089 == codecSelferValueTypeMap1234 {
			yyl4089 := r.ReadMapStart()
			if yyl4089 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4089, d)
			}
		} else if yyct4089 == codecSelferValueTypeArray1234 {
			yyl4089 := r.ReadArrayStart()
			if yyl4089 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4089, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4090Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4090Slc
	var yyhl4090 bool = l >= 0
	for yyj4090 := 0; ; yyj4090++ {
		if yyhl4090 {
			if yyj4090 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4090Slc = r.DecodeBytes(yys4090Slc, true, true)
		yys4090 := string(yys4090Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4090 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4093 := &x.ListMeta
				yym4094 := z.DecBinary()
				_ = yym4094
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4093) {
				} else {
					z.DecFallback(yyv4093, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4095 := &x.Items
				yym4096 := z.DecBinary()
				_ = yym4096
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4095), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4090)
		} // end switch yys4090
	} // end for yyj4090
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4097 int
	var yyb4097 bool
	var yyhl4097 bool = l >= 0
	yyj4097++
	if yyhl4097 {
		yyb4097 = yyj4097 > l
	} else {
		yyb4097 = r.CheckBreak()
	}
	if yyb4097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4097++
	if yyhl4097 {
		yyb4097 = yyj4097 > l
	} else {
		yyb4097 = r.CheckBreak()
	}
	if yyb4097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4097++
	if yyhl4097 {
		yyb4097 = yyj4097 > l
	} else {
		yyb4097 = r.CheckBreak()
	}
	if yyb4097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4100 := &x.ListMeta
		yym4101 := z.DecBinary()
		_ = yym4101
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4100) {
		} else {
			z.DecFallback(yyv4100, false)
		}
	}
	yyj4097++
	if yyhl4097 {
		yyb4097 = yyj4097 > l
	} else {
		yyb4097 = r.CheckBreak()
	}
	if yyb4097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4102 := &x.Items
		yym4103 := z.DecBinary()
		_ = yym4103
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4102), d)
		}
	}
	for {
		yyj4097++
		if yyhl4097 {
			yyb4097 = yyj4097 > l
		} else {
			yyb4097 = r.CheckBreak()
		}
		if yyb4097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4104 := z.EncBinary()
		_ = yym4104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4105 := !z.EncBinary()
			yy2arr4105 := z.EncBasicHandle().StructToArray
			var yyq4105 [4]bool
			_, _, _ = yysep4105, yyq4105, yy2arr4105
			const yyr4105 bool = false
			yyq4105[0] = x.Kind != ""
			yyq4105[1] = x.APIVersion != ""
			yyq4105[2] = true
			var yynn4105 int
			if yyr4105 || yy2arr4105 {
				r.EncodeArrayStart(4)
			} else {
				yynn4105 = 1
				for _, b := range yyq4105 {
					if b {
						yynn4105++
					}
				}
				r.EncodeMapStart(yynn4105)
				yynn4105 = 0
			}
			if yyr4105 || yy2arr4105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4105[0] {
					yym4107 := z.EncBinary()
					_ = yym4107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4105[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4105 || yy2arr4105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4105[1] {
					yym4110 := z.EncBinary()
					_ = yym4110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4105[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4111 := z.EncBinary()
					_ = yym4111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4105 || yy2arr4105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4105[2] {
					yy4113 := &x.ListMeta
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4113) {
					} else {
						z.EncFallback(yy4113)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4105[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4115 := &x.ListMeta
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4115) {
					} else {
						z.EncFallback(yy4115)
					}
				}
			}
			if yyr4105 || yy2arr4105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4118 := z.EncBinary()
					_ = yym4118
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4119 := z.EncBinary()
					_ = yym4119
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr4105 || yy2arr4105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4120 := z.DecBinary()
	_ = yym4120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4121 := r.ContainerType()
		if yyct4121 == codecSelferValueTypeMap1234 {
			yyl4121 := r.ReadMapStart()
			if yyl4121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4121, d)
			}
		} else if yyct4121 == codecSelferValueTypeArray1234 {
			yyl4121 := r.ReadArrayStart()
			if yyl4121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4122Slc
	var yyhl4122 bool = l >= 0
	for yyj4122 := 0; ; yyj4122++ {
		if yyhl4122 {
			if yyj4122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4122Slc = r.DecodeBytes(yys4122Slc, true, true)
		yys4122 := string(yys4122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4122 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4125 := &x.ListMeta
				yym4126 := z.DecBinary()
				_ = yym4126
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4125) {
				} else {
					z.DecFallback(yyv4125, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4127 := &x.Items
				yym4128 := z.DecBinary()
				_ = yym4128
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4127), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4122)
		} // end switch yys4122
	} // end for yyj4122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4129 int
	var yyb4129 bool
	var yyhl4129 bool = l >= 0
	yyj4129++
	if yyhl4129 {
		yyb4129 = yyj4129 > l
	} else {
		yyb4129 = r.CheckBreak()
	}
	if yyb4129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4129++
	if yyhl4129 {
		yyb4129 = yyj4129 > l
	} else {
		yyb4129 = r.CheckBreak()
	}
	if yyb4129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4129++
	if yyhl4129 {
		yyb4129 = yyj4129 > l
	} else {
		yyb4129 = r.CheckBreak()
	}
	if yyb4129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4132 := &x.ListMeta
		yym4133 := z.DecBinary()
		_ = yym4133
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4132) {
		} else {
			z.DecFallback(yyv4132, false)
		}
	}
	yyj4129++
	if yyhl4129 {
		yyb4129 = yyj4129 > l
	} else {
		yyb4129 = r.CheckBreak()
	}
	if yyb4129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4134 := &x.Items
		yym4135 := z.DecBinary()
		_ = yym4135
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4134), d)
		}
	}
	for {
		yyj4129++
		if yyhl4129 {
			yyb4129 = yyj4129 > l
		} else {
			yyb4129 = r.CheckBreak()
		}
		if yyb4129 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4129-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4136 := z.EncBinary()
	_ = yym4136
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4137 := z.DecBinary()
	_ = yym4137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4138 := z.EncBinary()
		_ = yym4138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4139 := !z.EncBinary()
			yy2arr4139 := z.EncBasicHandle().StructToArray
			var yyq4139 [6]bool
			_, _, _ = yysep4139, yyq4139, yy2arr4139
			const yyr4139 bool = false
			yyq4139[0] = x.Type != ""
			yyq4139[1] = len(x.Max) != 0
			yyq4139[2] = len(x.Min) != 0
			yyq4139[3] = len(x.Default) != 0
			yyq4139[4] = len(x.DefaultRequest) != 0
			yyq4139[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4139 int
			if yyr4139 || yy2arr4139 {
				r.EncodeArrayStart(6)
			} else {
				yynn4139 = 0
				for _, b := range yyq4139 {
					if b {
						yynn4139++
					}
				}
				r.EncodeMapStart(yynn4139)
				yynn4139 = 0
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4139[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4139[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4139[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4139[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4139[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4139[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4139[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4139[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4139[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4139[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4139[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4139 || yy2arr4139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4146 := z.DecBinary()
	_ = yym4146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4147 := r.ContainerType()
		if yyct4147 == codecSelferValueTypeMap1234 {
			yyl4147 := r.ReadMapStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4147, d)
			}
		} else if yyct4147 == codecSelferValueTypeArray1234 {
			yyl4147 := r.ReadArrayStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4148Slc
	var yyhl4148 bool = l >= 0
	for yyj4148 := 0; ; yyj4148++ {
		if yyhl4148 {
			if yyj4148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4148Slc = r.DecodeBytes(yys4148Slc, true, true)
		yys4148 := string(yys4148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4148 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4150 := &x.Max
				yyv4150.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4151 := &x.Min
				yyv4151.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4152 := &x.Default
				yyv4152.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4153 := &x.DefaultRequest
				yyv4153.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4154 := &x.MaxLimitRequestRatio
				yyv4154.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4148)
		} // end switch yys4148
	} // end for yyj4148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4155 int
	var yyb4155 bool
	var yyhl4155 bool = l >= 0
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4157 := &x.Max
		yyv4157.CodecDecodeSelf(d)
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4158 := &x.Min
		yyv4158.CodecDecodeSelf(d)
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4159 := &x.Default
		yyv4159.CodecDecodeSelf(d)
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4160 := &x.DefaultRequest
		yyv4160.CodecDecodeSelf(d)
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4161 := &x.MaxLimitRequestRatio
		yyv4161.CodecDecodeSelf(d)
	}
	for {
		yyj4155++
		if yyhl4155 {
			yyb4155 = yyj4155 > l
		} else {
			yyb4155 = r.CheckBreak()
		}
		if yyb4155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4162 := z.EncBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4163 := !z.EncBinary()
			yy2arr4163 := z.EncBasicHandle().StructToArray
			var yyq4163 [1]bool
			_, _, _ = yysep4163, yyq4163, yy2arr4163
			const yyr4163 bool = false
			var yynn4163 int
			if yyr4163 || yy2arr4163 {
				r.EncodeArrayStart(1)
			} else {
				yynn4163 = 1
				for _, b := range yyq4163 {
					if b {
						yynn4163++
					}
				}
				r.EncodeMapStart(yynn4163)
				yynn4163 = 0
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4167 := z.DecBinary()
	_ = yym4167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4168 := r.ContainerType()
		if yyct4168 == codecSelferValueTypeMap1234 {
			yyl4168 := r.ReadMapStart()
			if yyl4168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4168, d)
			}
		} else if yyct4168 == codecSelferValueTypeArray1234 {
			yyl4168 := r.ReadArrayStart()
			if yyl4168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4169Slc
	var yyhl4169 bool = l >= 0
	for yyj4169 := 0; ; yyj4169++ {
		if yyhl4169 {
			if yyj4169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4169Slc = r.DecodeBytes(yys4169Slc, true, true)
		yys4169 := string(yys4169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4169 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4170 := &x.Limits
				yym4171 := z.DecBinary()
				_ = yym4171
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4170), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4169)
		} // end switch yys4169
	} // end for yyj4169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4172 int
	var yyb4172 bool
	var yyhl4172 bool = l >= 0
	yyj4172++
	if yyhl4172 {
		yyb4172 = yyj4172 > l
	} else {
		yyb4172 = r.CheckBreak()
	}
	if yyb4172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4173 := &x.Limits
		yym4174 := z.DecBinary()
		_ = yym4174
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4173), d)
		}
	}
	for {
		yyj4172++
		if yyhl4172 {
			yyb4172 = yyj4172 > l
		} else {
			yyb4172 = r.CheckBreak()
		}
		if yyb4172 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4172-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4175 := z.EncBinary()
		_ = yym4175
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4176 := !z.EncBinary()
			yy2arr4176 := z.EncBasicHandle().StructToArray
			var yyq4176 [4]bool
			_, _, _ = yysep4176, yyq4176, yy2arr4176
			const yyr4176 bool = false
			yyq4176[0] = x.Kind != ""
			yyq4176[1] = x.APIVersion != ""
			yyq4176[2] = true
			yyq4176[3] = true
			var yynn4176 int
			if yyr4176 || yy2arr4176 {
				r.EncodeArrayStart(4)
			} else {
				yynn4176 = 0
				for _, b := range yyq4176 {
					if b {
						yynn4176++
					}
				}
				r.EncodeMapStart(yynn4176)
				yynn4176 = 0
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4176[0] {
					yym4178 := z.EncBinary()
					_ = yym4178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4176[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4179 := z.EncBinary()
					_ = yym4179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4176[1] {
					yym4181 := z.EncBinary()
					_ = yym4181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4176[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4182 := z.EncBinary()
					_ = yym4182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4176[2] {
					yy4184 := &x.ObjectMeta
					yy4184.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4176[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4185 := &x.ObjectMeta
					yy4185.CodecEncodeSelf(e)
				}
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4176[3] {
					yy4187 := &x.Spec
					yy4187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4176[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4188 := &x.Spec
					yy4188.CodecEncodeSelf(e)
				}
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4189 := z.DecBinary()
	_ = yym4189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4190 := r.ContainerType()
		if yyct4190 == codecSelferValueTypeMap1234 {
			yyl4190 := r.ReadMapStart()
			if yyl4190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4190, d)
			}
		} else if yyct4190 == codecSelferValueTypeArray1234 {
			yyl4190 := r.ReadArrayStart()
			if yyl4190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4191Slc
	var yyhl4191 bool = l >= 0
	for yyj4191 := 0; ; yyj4191++ {
		if yyhl4191 {
			if yyj4191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4191Slc = r.DecodeBytes(yys4191Slc, true, true)
		yys4191 := string(yys4191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4194 := &x.ObjectMeta
				yyv4194.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4195 := &x.Spec
				yyv4195.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4191)
		} // end switch yys4191
	} // end for yyj4191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4196 int
	var yyb4196 bool
	var yyhl4196 bool = l >= 0
	yyj4196++
	if yyhl4196 {
		yyb4196 = yyj4196 > l
	} else {
		yyb4196 = r.CheckBreak()
	}
	if yyb4196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4196++
	if yyhl4196 {
		yyb4196 = yyj4196 > l
	} else {
		yyb4196 = r.CheckBreak()
	}
	if yyb4196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4196++
	if yyhl4196 {
		yyb4196 = yyj4196 > l
	} else {
		yyb4196 = r.CheckBreak()
	}
	if yyb4196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4199 := &x.ObjectMeta
		yyv4199.CodecDecodeSelf(d)
	}
	yyj4196++
	if yyhl4196 {
		yyb4196 = yyj4196 > l
	} else {
		yyb4196 = r.CheckBreak()
	}
	if yyb4196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4200 := &x.Spec
		yyv4200.CodecDecodeSelf(d)
	}
	for {
		yyj4196++
		if yyhl4196 {
			yyb4196 = yyj4196 > l
		} else {
			yyb4196 = r.CheckBreak()
		}
		if yyb4196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4201 := z.EncBinary()
		_ = yym4201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4202 := !z.EncBinary()
			yy2arr4202 := z.EncBasicHandle().StructToArray
			var yyq4202 [4]bool
			_, _, _ = yysep4202, yyq4202, yy2arr4202
			const yyr4202 bool = false
			yyq4202[0] = x.Kind != ""
			yyq4202[1] = x.APIVersion != ""
			yyq4202[2] = true
			var yynn4202 int
			if yyr4202 || yy2arr4202 {
				r.EncodeArrayStart(4)
			} else {
				yynn4202 = 1
				for _, b := range yyq4202 {
					if b {
						yynn4202++
					}
				}
				r.EncodeMapStart(yynn4202)
				yynn4202 = 0
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4202[0] {
					yym4204 := z.EncBinary()
					_ = yym4204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4202[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4202[1] {
					yym4207 := z.EncBinary()
					_ = yym4207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4202[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4202[2] {
					yy4210 := &x.ListMeta
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4210) {
					} else {
						z.EncFallback(yy4210)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4202[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4212 := &x.ListMeta
					yym4213 := z.EncBinary()
					_ = yym4213
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4212) {
					} else {
						z.EncFallback(yy4212)
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4216 := z.EncBinary()
					_ = yym4216
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4217 := z.DecBinary()
	_ = yym4217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4218 := r.ContainerType()
		if yyct4218 == codecSelferValueTypeMap1234 {
			yyl4218 := r.ReadMapStart()
			if yyl4218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4218, d)
			}
		} else if yyct4218 == codecSelferValueTypeArray1234 {
			yyl4218 := r.ReadArrayStart()
			if yyl4218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4219Slc
	var yyhl4219 bool = l >= 0
	for yyj4219 := 0; ; yyj4219++ {
		if yyhl4219 {
			if yyj4219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4219Slc = r.DecodeBytes(yys4219Slc, true, true)
		yys4219 := string(yys4219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4219 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4222 := &x.ListMeta
				yym4223 := z.DecBinary()
				_ = yym4223
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4222) {
				} else {
					z.DecFallback(yyv4222, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4224 := &x.Items
				yym4225 := z.DecBinary()
				_ = yym4225
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4224), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4219)
		} // end switch yys4219
	} // end for yyj4219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4226 int
	var yyb4226 bool
	var yyhl4226 bool = l >= 0
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4229 := &x.ListMeta
		yym4230 := z.DecBinary()
		_ = yym4230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4229) {
		} else {
			z.DecFallback(yyv4229, false)
		}
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4231 := &x.Items
		yym4232 := z.DecBinary()
		_ = yym4232
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4231), d)
		}
	}
	for {
		yyj4226++
		if yyhl4226 {
			yyb4226 = yyj4226 > l
		} else {
			yyb4226 = r.CheckBreak()
		}
		if yyb4226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4233 := z.EncBinary()
	_ = yym4233
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4234 := z.DecBinary()
	_ = yym4234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4235 := z.EncBinary()
		_ = yym4235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4236 := !z.EncBinary()
			yy2arr4236 := z.EncBasicHandle().StructToArray
			var yyq4236 [2]bool
			_, _, _ = yysep4236, yyq4236, yy2arr4236
			const yyr4236 bool = false
			yyq4236[0] = len(x.Hard) != 0
			yyq4236[1] = len(x.Scopes) != 0
			var yynn4236 int
			if yyr4236 || yy2arr4236 {
				r.EncodeArrayStart(2)
			} else {
				yynn4236 = 0
				for _, b := range yyq4236 {
					if b {
						yynn4236++
					}
				}
				r.EncodeMapStart(yynn4236)
				yynn4236 = 0
			}
			if yyr4236 || yy2arr4236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4236[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4236[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4236 || yy2arr4236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4236[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4239 := z.EncBinary()
						_ = yym4239
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4236[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4240 := z.EncBinary()
						_ = yym4240
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4236 || yy2arr4236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4241 := z.DecBinary()
	_ = yym4241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4242 := r.ContainerType()
		if yyct4242 == codecSelferValueTypeMap1234 {
			yyl4242 := r.ReadMapStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4242, d)
			}
		} else if yyct4242 == codecSelferValueTypeArray1234 {
			yyl4242 := r.ReadArrayStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4243Slc
	var yyhl4243 bool = l >= 0
	for yyj4243 := 0; ; yyj4243++ {
		if yyhl4243 {
			if yyj4243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4243Slc = r.DecodeBytes(yys4243Slc, true, true)
		yys4243 := string(yys4243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4243 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4244 := &x.Hard
				yyv4244.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4245 := &x.Scopes
				yym4246 := z.DecBinary()
				_ = yym4246
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4243)
		} // end switch yys4243
	} // end for yyj4243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4247 int
	var yyb4247 bool
	var yyhl4247 bool = l >= 0
	yyj4247++
	if yyhl4247 {
		yyb4247 = yyj4247 > l
	} else {
		yyb4247 = r.CheckBreak()
	}
	if yyb4247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4248 := &x.Hard
		yyv4248.CodecDecodeSelf(d)
	}
	yyj4247++
	if yyhl4247 {
		yyb4247 = yyj4247 > l
	} else {
		yyb4247 = r.CheckBreak()
	}
	if yyb4247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4249 := &x.Scopes
		yym4250 := z.DecBinary()
		_ = yym4250
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4249), d)
		}
	}
	for {
		yyj4247++
		if yyhl4247 {
			yyb4247 = yyj4247 > l
		} else {
			yyb4247 = r.CheckBreak()
		}
		if yyb4247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4251 := z.EncBinary()
		_ = yym4251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4252 := !z.EncBinary()
			yy2arr4252 := z.EncBasicHandle().StructToArray
			var yyq4252 [2]bool
			_, _, _ = yysep4252, yyq4252, yy2arr4252
			const yyr4252 bool = false
			yyq4252[0] = len(x.Hard) != 0
			yyq4252[1] = len(x.Used) != 0
			var yynn4252 int
			if yyr4252 || yy2arr4252 {
				r.EncodeArrayStart(2)
			} else {
				yynn4252 = 0
				for _, b := range yyq4252 {
					if b {
						yynn4252++
					}
				}
				r.EncodeMapStart(yynn4252)
				yynn4252 = 0
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4252[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4252[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4252[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4255 := z.DecBinary()
	_ = yym4255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4256 := r.ContainerType()
		if yyct4256 == codecSelferValueTypeMap1234 {
			yyl4256 := r.ReadMapStart()
			if yyl4256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4256, d)
			}
		} else if yyct4256 == codecSelferValueTypeArray1234 {
			yyl4256 := r.ReadArrayStart()
			if yyl4256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4257Slc
	var yyhl4257 bool = l >= 0
	for yyj4257 := 0; ; yyj4257++ {
		if yyhl4257 {
			if yyj4257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4257Slc = r.DecodeBytes(yys4257Slc, true, true)
		yys4257 := string(yys4257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4257 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4258 := &x.Hard
				yyv4258.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4259 := &x.Used
				yyv4259.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4257)
		} // end switch yys4257
	} // end for yyj4257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4260 int
	var yyb4260 bool
	var yyhl4260 bool = l >= 0
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4261 := &x.Hard
		yyv4261.CodecDecodeSelf(d)
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4262 := &x.Used
		yyv4262.CodecDecodeSelf(d)
	}
	for {
		yyj4260++
		if yyhl4260 {
			yyb4260 = yyj4260 > l
		} else {
			yyb4260 = r.CheckBreak()
		}
		if yyb4260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4263 := z.EncBinary()
		_ = yym4263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4264 := !z.EncBinary()
			yy2arr4264 := z.EncBasicHandle().StructToArray
			var yyq4264 [5]bool
			_, _, _ = yysep4264, yyq4264, yy2arr4264
			const yyr4264 bool = false
			yyq4264[0] = x.Kind != ""
			yyq4264[1] = x.APIVersion != ""
			yyq4264[2] = true
			yyq4264[3] = true
			yyq4264[4] = true
			var yynn4264 int
			if yyr4264 || yy2arr4264 {
				r.EncodeArrayStart(5)
			} else {
				yynn4264 = 0
				for _, b := range yyq4264 {
					if b {
						yynn4264++
					}
				}
				r.EncodeMapStart(yynn4264)
				yynn4264 = 0
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[0] {
					yym4266 := z.EncBinary()
					_ = yym4266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4267 := z.EncBinary()
					_ = yym4267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[1] {
					yym4269 := z.EncBinary()
					_ = yym4269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4270 := z.EncBinary()
					_ = yym4270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[2] {
					yy4272 := &x.ObjectMeta
					yy4272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4273 := &x.ObjectMeta
					yy4273.CodecEncodeSelf(e)
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[3] {
					yy4275 := &x.Spec
					yy4275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4264[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4276 := &x.Spec
					yy4276.CodecEncodeSelf(e)
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[4] {
					yy4278 := &x.Status
					yy4278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4264[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4279 := &x.Status
					yy4279.CodecEncodeSelf(e)
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4280 := z.DecBinary()
	_ = yym4280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4281 := r.ContainerType()
		if yyct4281 == codecSelferValueTypeMap1234 {
			yyl4281 := r.ReadMapStart()
			if yyl4281 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4281, d)
			}
		} else if yyct4281 == codecSelferValueTypeArray1234 {
			yyl4281 := r.ReadArrayStart()
			if yyl4281 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4282Slc
	var yyhl4282 bool = l >= 0
	for yyj4282 := 0; ; yyj4282++ {
		if yyhl4282 {
			if yyj4282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4282Slc = r.DecodeBytes(yys4282Slc, true, true)
		yys4282 := string(yys4282Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4282 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4285 := &x.ObjectMeta
				yyv4285.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4286 := &x.Spec
				yyv4286.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4287 := &x.Status
				yyv4287.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4282)
		} // end switch yys4282
	} // end for yyj4282
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4288 int
	var yyb4288 bool
	var yyhl4288 bool = l >= 0
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4291 := &x.ObjectMeta
		yyv4291.CodecDecodeSelf(d)
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4292 := &x.Spec
		yyv4292.CodecDecodeSelf(d)
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4293 := &x.Status
		yyv4293.CodecDecodeSelf(d)
	}
	for {
		yyj4288++
		if yyhl4288 {
			yyb4288 = yyj4288 > l
		} else {
			yyb4288 = r.CheckBreak()
		}
		if yyb4288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4294 := z.EncBinary()
		_ = yym4294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4295 := !z.EncBinary()
			yy2arr4295 := z.EncBasicHandle().StructToArray
			var yyq4295 [4]bool
			_, _, _ = yysep4295, yyq4295, yy2arr4295
			const yyr4295 bool = false
			yyq4295[0] = x.Kind != ""
			yyq4295[1] = x.APIVersion != ""
			yyq4295[2] = true
			var yynn4295 int
			if yyr4295 || yy2arr4295 {
				r.EncodeArrayStart(4)
			} else {
				yynn4295 = 1
				for _, b := range yyq4295 {
					if b {
						yynn4295++
					}
				}
				r.EncodeMapStart(yynn4295)
				yynn4295 = 0
			}
			if yyr4295 || yy2arr4295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4295[0] {
					yym4297 := z.EncBinary()
					_ = yym4297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4298 := z.EncBinary()
					_ = yym4298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4295 || yy2arr4295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4295[1] {
					yym4300 := z.EncBinary()
					_ = yym4300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4295 || yy2arr4295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4295[2] {
					yy4303 := &x.ListMeta
					yym4304 := z.EncBinary()
					_ = yym4304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4303) {
					} else {
						z.EncFallback(yy4303)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4305 := &x.ListMeta
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4305) {
					} else {
						z.EncFallback(yy4305)
					}
				}
			}
			if yyr4295 || yy2arr4295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4308 := z.EncBinary()
					_ = yym4308
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4295 || yy2arr4295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4310 := z.DecBinary()
	_ = yym4310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4311 := r.ContainerType()
		if yyct4311 == codecSelferValueTypeMap1234 {
			yyl4311 := r.ReadMapStart()
			if yyl4311 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4311, d)
			}
		} else if yyct4311 == codecSelferValueTypeArray1234 {
			yyl4311 := r.ReadArrayStart()
			if yyl4311 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4312Slc
	var yyhl4312 bool = l >= 0
	for yyj4312 := 0; ; yyj4312++ {
		if yyhl4312 {
			if yyj4312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4312Slc = r.DecodeBytes(yys4312Slc, true, true)
		yys4312 := string(yys4312Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4312 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4315 := &x.ListMeta
				yym4316 := z.DecBinary()
				_ = yym4316
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4315) {
				} else {
					z.DecFallback(yyv4315, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4317 := &x.Items
				yym4318 := z.DecBinary()
				_ = yym4318
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4317), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4312)
		} // end switch yys4312
	} // end for yyj4312
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4319 int
	var yyb4319 bool
	var yyhl4319 bool = l >= 0
	yyj4319++
	if yyhl4319 {
		yyb4319 = yyj4319 > l
	} else {
		yyb4319 = r.CheckBreak()
	}
	if yyb4319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4319++
	if yyhl4319 {
		yyb4319 = yyj4319 > l
	} else {
		yyb4319 = r.CheckBreak()
	}
	if yyb4319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4319++
	if yyhl4319 {
		yyb4319 = yyj4319 > l
	} else {
		yyb4319 = r.CheckBreak()
	}
	if yyb4319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4322 := &x.ListMeta
		yym4323 := z.DecBinary()
		_ = yym4323
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4322) {
		} else {
			z.DecFallback(yyv4322, false)
		}
	}
	yyj4319++
	if yyhl4319 {
		yyb4319 = yyj4319 > l
	} else {
		yyb4319 = r.CheckBreak()
	}
	if yyb4319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4324 := &x.Items
		yym4325 := z.DecBinary()
		_ = yym4325
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4324), d)
		}
	}
	for {
		yyj4319++
		if yyhl4319 {
			yyb4319 = yyj4319 > l
		} else {
			yyb4319 = r.CheckBreak()
		}
		if yyb4319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4326 := z.EncBinary()
		_ = yym4326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4327 := !z.EncBinary()
			yy2arr4327 := z.EncBasicHandle().StructToArray
			var yyq4327 [5]bool
			_, _, _ = yysep4327, yyq4327, yy2arr4327
			const yyr4327 bool = false
			yyq4327[0] = x.Kind != ""
			yyq4327[1] = x.APIVersion != ""
			yyq4327[2] = true
			yyq4327[3] = len(x.Data) != 0
			yyq4327[4] = x.Type != ""
			var yynn4327 int
			if yyr4327 || yy2arr4327 {
				r.EncodeArrayStart(5)
			} else {
				yynn4327 = 0
				for _, b := range yyq4327 {
					if b {
						yynn4327++
					}
				}
				r.EncodeMapStart(yynn4327)
				yynn4327 = 0
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[0] {
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[1] {
					yym4332 := z.EncBinary()
					_ = yym4332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[2] {
					yy4335 := &x.ObjectMeta
					yy4335.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4336 := &x.ObjectMeta
					yy4336.CodecEncodeSelf(e)
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4338 := z.EncBinary()
						_ = yym4338
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4327[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4339 := z.EncBinary()
						_ = yym4339
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4341 := z.DecBinary()
	_ = yym4341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4342 := r.ContainerType()
		if yyct4342 == codecSelferValueTypeMap1234 {
			yyl4342 := r.ReadMapStart()
			if yyl4342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4342, d)
			}
		} else if yyct4342 == codecSelferValueTypeArray1234 {
			yyl4342 := r.ReadArrayStart()
			if yyl4342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4343Slc
	var yyhl4343 bool = l >= 0
	for yyj4343 := 0; ; yyj4343++ {
		if yyhl4343 {
			if yyj4343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4343Slc = r.DecodeBytes(yys4343Slc, true, true)
		yys4343 := string(yys4343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4343 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4346 := &x.ObjectMeta
				yyv4346.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4347 := &x.Data
				yym4348 := z.DecBinary()
				_ = yym4348
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4347), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4343)
		} // end switch yys4343
	} // end for yyj4343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4350 int
	var yyb4350 bool
	var yyhl4350 bool = l >= 0
	yyj4350++
	if yyhl4350 {
		yyb4350 = yyj4350 > l
	} else {
		yyb4350 = r.CheckBreak()
	}
	if yyb4350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4350++
	if yyhl4350 {
		yyb4350 = yyj4350 > l
	} else {
		yyb4350 = r.CheckBreak()
	}
	if yyb4350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4350++
	if yyhl4350 {
		yyb4350 = yyj4350 > l
	} else {
		yyb4350 = r.CheckBreak()
	}
	if yyb4350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4353 := &x.ObjectMeta
		yyv4353.CodecDecodeSelf(d)
	}
	yyj4350++
	if yyhl4350 {
		yyb4350 = yyj4350 > l
	} else {
		yyb4350 = r.CheckBreak()
	}
	if yyb4350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4354 := &x.Data
		yym4355 := z.DecBinary()
		_ = yym4355
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4354), d)
		}
	}
	yyj4350++
	if yyhl4350 {
		yyb4350 = yyj4350 > l
	} else {
		yyb4350 = r.CheckBreak()
	}
	if yyb4350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4350++
		if yyhl4350 {
			yyb4350 = yyj4350 > l
		} else {
			yyb4350 = r.CheckBreak()
		}
		if yyb4350 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4350-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4357 := z.EncBinary()
	_ = yym4357
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4358 := z.DecBinary()
	_ = yym4358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4359 := z.EncBinary()
		_ = yym4359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4360 := !z.EncBinary()
			yy2arr4360 := z.EncBasicHandle().StructToArray
			var yyq4360 [4]bool
			_, _, _ = yysep4360, yyq4360, yy2arr4360
			const yyr4360 bool = false
			yyq4360[0] = x.Kind != ""
			yyq4360[1] = x.APIVersion != ""
			yyq4360[2] = true
			var yynn4360 int
			if yyr4360 || yy2arr4360 {
				r.EncodeArrayStart(4)
			} else {
				yynn4360 = 1
				for _, b := range yyq4360 {
					if b {
						yynn4360++
					}
				}
				r.EncodeMapStart(yynn4360)
				yynn4360 = 0
			}
			if yyr4360 || yy2arr4360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4360[0] {
					yym4362 := z.EncBinary()
					_ = yym4362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4363 := z.EncBinary()
					_ = yym4363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4360 || yy2arr4360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4360[1] {
					yym4365 := z.EncBinary()
					_ = yym4365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4366 := z.EncBinary()
					_ = yym4366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4360 || yy2arr4360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4360[2] {
					yy4368 := &x.ListMeta
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4368) {
					} else {
						z.EncFallback(yy4368)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4370 := &x.ListMeta
					yym4371 := z.EncBinary()
					_ = yym4371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4370) {
					} else {
						z.EncFallback(yy4370)
					}
				}
			}
			if yyr4360 || yy2arr4360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4374 := z.EncBinary()
					_ = yym4374
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4360 || yy2arr4360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4375 := z.DecBinary()
	_ = yym4375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4376 := r.ContainerType()
		if yyct4376 == codecSelferValueTypeMap1234 {
			yyl4376 := r.ReadMapStart()
			if yyl4376 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4376, d)
			}
		} else if yyct4376 == codecSelferValueTypeArray1234 {
			yyl4376 := r.ReadArrayStart()
			if yyl4376 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4377Slc
	var yyhl4377 bool = l >= 0
	for yyj4377 := 0; ; yyj4377++ {
		if yyhl4377 {
			if yyj4377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4377Slc = r.DecodeBytes(yys4377Slc, true, true)
		yys4377 := string(yys4377Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4377 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4380 := &x.ListMeta
				yym4381 := z.DecBinary()
				_ = yym4381
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4380) {
				} else {
					z.DecFallback(yyv4380, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4382 := &x.Items
				yym4383 := z.DecBinary()
				_ = yym4383
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4382), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4377)
		} // end switch yys4377
	} // end for yyj4377
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4384 int
	var yyb4384 bool
	var yyhl4384 bool = l >= 0
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4387 := &x.ListMeta
		yym4388 := z.DecBinary()
		_ = yym4388
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4387) {
		} else {
			z.DecFallback(yyv4387, false)
		}
	}
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4389 := &x.Items
		yym4390 := z.DecBinary()
		_ = yym4390
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4389), d)
		}
	}
	for {
		yyj4384++
		if yyhl4384 {
			yyb4384 = yyj4384 > l
		} else {
			yyb4384 = r.CheckBreak()
		}
		if yyb4384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4391 := z.EncBinary()
		_ = yym4391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4392 := !z.EncBinary()
			yy2arr4392 := z.EncBasicHandle().StructToArray
			var yyq4392 [4]bool
			_, _, _ = yysep4392, yyq4392, yy2arr4392
			const yyr4392 bool = false
			yyq4392[0] = x.Kind != ""
			yyq4392[1] = x.APIVersion != ""
			yyq4392[2] = true
			yyq4392[3] = len(x.Data) != 0
			var yynn4392 int
			if yyr4392 || yy2arr4392 {
				r.EncodeArrayStart(4)
			} else {
				yynn4392 = 0
				for _, b := range yyq4392 {
					if b {
						yynn4392++
					}
				}
				r.EncodeMapStart(yynn4392)
				yynn4392 = 0
			}
			if yyr4392 || yy2arr4392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4392[0] {
					yym4394 := z.EncBinary()
					_ = yym4394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4395 := z.EncBinary()
					_ = yym4395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4392 || yy2arr4392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4392[1] {
					yym4397 := z.EncBinary()
					_ = yym4397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4398 := z.EncBinary()
					_ = yym4398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4392 || yy2arr4392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4392[2] {
					yy4400 := &x.ObjectMeta
					yy4400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4401 := &x.ObjectMeta
					yy4401.CodecEncodeSelf(e)
				}
			}
			if yyr4392 || yy2arr4392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4392[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4403 := z.EncBinary()
						_ = yym4403
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4392[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4404 := z.EncBinary()
						_ = yym4404
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4392 || yy2arr4392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4405 := z.DecBinary()
	_ = yym4405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4406 := r.ContainerType()
		if yyct4406 == codecSelferValueTypeMap1234 {
			yyl4406 := r.ReadMapStart()
			if yyl4406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4406, d)
			}
		} else if yyct4406 == codecSelferValueTypeArray1234 {
			yyl4406 := r.ReadArrayStart()
			if yyl4406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4407Slc
	var yyhl4407 bool = l >= 0
	for yyj4407 := 0; ; yyj4407++ {
		if yyhl4407 {
			if yyj4407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4407Slc = r.DecodeBytes(yys4407Slc, true, true)
		yys4407 := string(yys4407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4410 := &x.ObjectMeta
				yyv4410.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4411 := &x.Data
				yym4412 := z.DecBinary()
				_ = yym4412
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4411, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4407)
		} // end switch yys4407
	} // end for yyj4407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4413 int
	var yyb4413 bool
	var yyhl4413 bool = l >= 0
	yyj4413++
	if yyhl4413 {
		yyb4413 = yyj4413 > l
	} else {
		yyb4413 = r.CheckBreak()
	}
	if yyb4413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4413++
	if yyhl4413 {
		yyb4413 = yyj4413 > l
	} else {
		yyb4413 = r.CheckBreak()
	}
	if yyb4413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4413++
	if yyhl4413 {
		yyb4413 = yyj4413 > l
	} else {
		yyb4413 = r.CheckBreak()
	}
	if yyb4413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4416 := &x.ObjectMeta
		yyv4416.CodecDecodeSelf(d)
	}
	yyj4413++
	if yyhl4413 {
		yyb4413 = yyj4413 > l
	} else {
		yyb4413 = r.CheckBreak()
	}
	if yyb4413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4417 := &x.Data
		yym4418 := z.DecBinary()
		_ = yym4418
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4417, false, d)
		}
	}
	for {
		yyj4413++
		if yyhl4413 {
			yyb4413 = yyj4413 > l
		} else {
			yyb4413 = r.CheckBreak()
		}
		if yyb4413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4419 := z.EncBinary()
		_ = yym4419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4420 := !z.EncBinary()
			yy2arr4420 := z.EncBasicHandle().StructToArray
			var yyq4420 [4]bool
			_, _, _ = yysep4420, yyq4420, yy2arr4420
			const yyr4420 bool = false
			yyq4420[0] = x.Kind != ""
			yyq4420[1] = x.APIVersion != ""
			yyq4420[2] = true
			var yynn4420 int
			if yyr4420 || yy2arr4420 {
				r.EncodeArrayStart(4)
			} else {
				yynn4420 = 1
				for _, b := range yyq4420 {
					if b {
						yynn4420++
					}
				}
				r.EncodeMapStart(yynn4420)
				yynn4420 = 0
			}
			if yyr4420 || yy2arr4420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4420[0] {
					yym4422 := z.EncBinary()
					_ = yym4422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4423 := z.EncBinary()
					_ = yym4423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4420 || yy2arr4420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4420[1] {
					yym4425 := z.EncBinary()
					_ = yym4425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4426 := z.EncBinary()
					_ = yym4426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4420 || yy2arr4420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4420[2] {
					yy4428 := &x.ListMeta
					yym4429 := z.EncBinary()
					_ = yym4429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4428) {
					} else {
						z.EncFallback(yy4428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4430 := &x.ListMeta
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4430) {
					} else {
						z.EncFallback(yy4430)
					}
				}
			}
			if yyr4420 || yy2arr4420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4433 := z.EncBinary()
					_ = yym4433
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4434 := z.EncBinary()
					_ = yym4434
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4420 || yy2arr4420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4435 := z.DecBinary()
	_ = yym4435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4436 := r.ContainerType()
		if yyct4436 == codecSelferValueTypeMap1234 {
			yyl4436 := r.ReadMapStart()
			if yyl4436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4436, d)
			}
		} else if yyct4436 == codecSelferValueTypeArray1234 {
			yyl4436 := r.ReadArrayStart()
			if yyl4436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4437Slc
	var yyhl4437 bool = l >= 0
	for yyj4437 := 0; ; yyj4437++ {
		if yyhl4437 {
			if yyj4437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4437Slc = r.DecodeBytes(yys4437Slc, true, true)
		yys4437 := string(yys4437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4440 := &x.ListMeta
				yym4441 := z.DecBinary()
				_ = yym4441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4440) {
				} else {
					z.DecFallback(yyv4440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4442 := &x.Items
				yym4443 := z.DecBinary()
				_ = yym4443
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4437)
		} // end switch yys4437
	} // end for yyj4437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4444 int
	var yyb4444 bool
	var yyhl4444 bool = l >= 0
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4447 := &x.ListMeta
		yym4448 := z.DecBinary()
		_ = yym4448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4447) {
		} else {
			z.DecFallback(yyv4447, false)
		}
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4449 := &x.Items
		yym4450 := z.DecBinary()
		_ = yym4450
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4449), d)
		}
	}
	for {
		yyj4444++
		if yyhl4444 {
			yyb4444 = yyj4444 > l
		} else {
			yyb4444 = r.CheckBreak()
		}
		if yyb4444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4451 := z.EncBinary()
	_ = yym4451
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4452 := z.DecBinary()
	_ = yym4452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4453 := z.EncBinary()
	_ = yym4453
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4454 := z.DecBinary()
	_ = yym4454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4455 := z.EncBinary()
		_ = yym4455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4456 := !z.EncBinary()
			yy2arr4456 := z.EncBasicHandle().StructToArray
			var yyq4456 [4]bool
			_, _, _ = yysep4456, yyq4456, yy2arr4456
			const yyr4456 bool = false
			yyq4456[2] = x.Message != ""
			yyq4456[3] = x.Error != ""
			var yynn4456 int
			if yyr4456 || yy2arr4456 {
				r.EncodeArrayStart(4)
			} else {
				yynn4456 = 2
				for _, b := range yyq4456 {
					if b {
						yynn4456++
					}
				}
				r.EncodeMapStart(yynn4456)
				yynn4456 = 0
			}
			if yyr4456 || yy2arr4456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4456 || yy2arr4456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4456 || yy2arr4456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4456[2] {
					yym4460 := z.EncBinary()
					_ = yym4460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4456[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4461 := z.EncBinary()
					_ = yym4461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4456 || yy2arr4456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4456[3] {
					yym4463 := z.EncBinary()
					_ = yym4463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4456[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4464 := z.EncBinary()
					_ = yym4464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4456 || yy2arr4456 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4465 := z.DecBinary()
	_ = yym4465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4466 := r.ContainerType()
		if yyct4466 == codecSelferValueTypeMap1234 {
			yyl4466 := r.ReadMapStart()
			if yyl4466 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4466, d)
			}
		} else if yyct4466 == codecSelferValueTypeArray1234 {
			yyl4466 := r.ReadArrayStart()
			if yyl4466 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4466, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4467Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4467Slc
	var yyhl4467 bool = l >= 0
	for yyj4467 := 0; ; yyj4467++ {
		if yyhl4467 {
			if yyj4467 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4467Slc = r.DecodeBytes(yys4467Slc, true, true)
		yys4467 := string(yys4467Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4467 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4467)
		} // end switch yys4467
	} // end for yyj4467
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4472 int
	var yyb4472 bool
	var yyhl4472 bool = l >= 0
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4472++
		if yyhl4472 {
			yyb4472 = yyj4472 > l
		} else {
			yyb4472 = r.CheckBreak()
		}
		if yyb4472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4477 := z.EncBinary()
		_ = yym4477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4478 := !z.EncBinary()
			yy2arr4478 := z.EncBasicHandle().StructToArray
			var yyq4478 [4]bool
			_, _, _ = yysep4478, yyq4478, yy2arr4478
			const yyr4478 bool = false
			yyq4478[0] = x.Kind != ""
			yyq4478[1] = x.APIVersion != ""
			yyq4478[2] = true
			yyq4478[3] = len(x.Conditions) != 0
			var yynn4478 int
			if yyr4478 || yy2arr4478 {
				r.EncodeArrayStart(4)
			} else {
				yynn4478 = 0
				for _, b := range yyq4478 {
					if b {
						yynn4478++
					}
				}
				r.EncodeMapStart(yynn4478)
				yynn4478 = 0
			}
			if yyr4478 || yy2arr4478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4478[0] {
					yym4480 := z.EncBinary()
					_ = yym4480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4478[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4481 := z.EncBinary()
					_ = yym4481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4478 || yy2arr4478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4478[1] {
					yym4483 := z.EncBinary()
					_ = yym4483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4478[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4484 := z.EncBinary()
					_ = yym4484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4478 || yy2arr4478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4478[2] {
					yy4486 := &x.ObjectMeta
					yy4486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4478[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4487 := &x.ObjectMeta
					yy4487.CodecEncodeSelf(e)
				}
			}
			if yyr4478 || yy2arr4478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4478[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4489 := z.EncBinary()
						_ = yym4489
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4478[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4490 := z.EncBinary()
						_ = yym4490
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4478 || yy2arr4478 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4491 := z.DecBinary()
	_ = yym4491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4492 := r.ContainerType()
		if yyct4492 == codecSelferValueTypeMap1234 {
			yyl4492 := r.ReadMapStart()
			if yyl4492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4492, d)
			}
		} else if yyct4492 == codecSelferValueTypeArray1234 {
			yyl4492 := r.ReadArrayStart()
			if yyl4492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4493Slc
	var yyhl4493 bool = l >= 0
	for yyj4493 := 0; ; yyj4493++ {
		if yyhl4493 {
			if yyj4493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4493Slc = r.DecodeBytes(yys4493Slc, true, true)
		yys4493 := string(yys4493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4496 := &x.ObjectMeta
				yyv4496.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4497 := &x.Conditions
				yym4498 := z.DecBinary()
				_ = yym4498
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4497), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4493)
		} // end switch yys4493
	} // end for yyj4493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4499 int
	var yyb4499 bool
	var yyhl4499 bool = l >= 0
	yyj4499++
	if yyhl4499 {
		yyb4499 = yyj4499 > l
	} else {
		yyb4499 = r.CheckBreak()
	}
	if yyb4499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4499++
	if yyhl4499 {
		yyb4499 = yyj4499 > l
	} else {
		yyb4499 = r.CheckBreak()
	}
	if yyb4499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4499++
	if yyhl4499 {
		yyb4499 = yyj4499 > l
	} else {
		yyb4499 = r.CheckBreak()
	}
	if yyb4499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4502 := &x.ObjectMeta
		yyv4502.CodecDecodeSelf(d)
	}
	yyj4499++
	if yyhl4499 {
		yyb4499 = yyj4499 > l
	} else {
		yyb4499 = r.CheckBreak()
	}
	if yyb4499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4503 := &x.Conditions
		yym4504 := z.DecBinary()
		_ = yym4504
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4503), d)
		}
	}
	for {
		yyj4499++
		if yyhl4499 {
			yyb4499 = yyj4499 > l
		} else {
			yyb4499 = r.CheckBreak()
		}
		if yyb4499 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4499-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4505 := z.EncBinary()
		_ = yym4505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4506 := !z.EncBinary()
			yy2arr4506 := z.EncBasicHandle().StructToArray
			var yyq4506 [4]bool
			_, _, _ = yysep4506, yyq4506, yy2arr4506
			const yyr4506 bool = false
			yyq4506[0] = x.Kind != ""
			yyq4506[1] = x.APIVersion != ""
			yyq4506[2] = true
			var yynn4506 int
			if yyr4506 || yy2arr4506 {
				r.EncodeArrayStart(4)
			} else {
				yynn4506 = 1
				for _, b := range yyq4506 {
					if b {
						yynn4506++
					}
				}
				r.EncodeMapStart(yynn4506)
				yynn4506 = 0
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[0] {
					yym4508 := z.EncBinary()
					_ = yym4508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4506[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4509 := z.EncBinary()
					_ = yym4509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[1] {
					yym4511 := z.EncBinary()
					_ = yym4511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4506[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4512 := z.EncBinary()
					_ = yym4512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[2] {
					yy4514 := &x.ListMeta
					yym4515 := z.EncBinary()
					_ = yym4515
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4514) {
					} else {
						z.EncFallback(yy4514)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4506[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4516 := &x.ListMeta
					yym4517 := z.EncBinary()
					_ = yym4517
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4516) {
					} else {
						z.EncFallback(yy4516)
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4519 := z.EncBinary()
					_ = yym4519
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4520 := z.EncBinary()
					_ = yym4520
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4521 := z.DecBinary()
	_ = yym4521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4522 := r.ContainerType()
		if yyct4522 == codecSelferValueTypeMap1234 {
			yyl4522 := r.ReadMapStart()
			if yyl4522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4522, d)
			}
		} else if yyct4522 == codecSelferValueTypeArray1234 {
			yyl4522 := r.ReadArrayStart()
			if yyl4522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4523Slc
	var yyhl4523 bool = l >= 0
	for yyj4523 := 0; ; yyj4523++ {
		if yyhl4523 {
			if yyj4523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4523Slc = r.DecodeBytes(yys4523Slc, true, true)
		yys4523 := string(yys4523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4523 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4526 := &x.ListMeta
				yym4527 := z.DecBinary()
				_ = yym4527
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4526) {
				} else {
					z.DecFallback(yyv4526, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4528 := &x.Items
				yym4529 := z.DecBinary()
				_ = yym4529
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4528), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4523)
		} // end switch yys4523
	} // end for yyj4523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4530 int
	var yyb4530 bool
	var yyhl4530 bool = l >= 0
	yyj4530++
	if yyhl4530 {
		yyb4530 = yyj4530 > l
	} else {
		yyb4530 = r.CheckBreak()
	}
	if yyb4530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4530++
	if yyhl4530 {
		yyb4530 = yyj4530 > l
	} else {
		yyb4530 = r.CheckBreak()
	}
	if yyb4530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4530++
	if yyhl4530 {
		yyb4530 = yyj4530 > l
	} else {
		yyb4530 = r.CheckBreak()
	}
	if yyb4530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4533 := &x.ListMeta
		yym4534 := z.DecBinary()
		_ = yym4534
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4533) {
		} else {
			z.DecFallback(yyv4533, false)
		}
	}
	yyj4530++
	if yyhl4530 {
		yyb4530 = yyj4530 > l
	} else {
		yyb4530 = r.CheckBreak()
	}
	if yyb4530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4535 := &x.Items
		yym4536 := z.DecBinary()
		_ = yym4536
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4535), d)
		}
	}
	for {
		yyj4530++
		if yyhl4530 {
			yyb4530 = yyj4530 > l
		} else {
			yyb4530 = r.CheckBreak()
		}
		if yyb4530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4537 := z.EncBinary()
		_ = yym4537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4538 := !z.EncBinary()
			yy2arr4538 := z.EncBasicHandle().StructToArray
			var yyq4538 [6]bool
			_, _, _ = yysep4538, yyq4538, yy2arr4538
			const yyr4538 bool = false
			yyq4538[0] = x.Capabilities != nil
			yyq4538[1] = x.Privileged != nil
			yyq4538[2] = x.SELinuxOptions != nil
			yyq4538[3] = x.RunAsUser != nil
			yyq4538[4] = x.RunAsNonRoot != nil
			yyq4538[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4538 int
			if yyr4538 || yy2arr4538 {
				r.EncodeArrayStart(6)
			} else {
				yynn4538 = 0
				for _, b := range yyq4538 {
					if b {
						yynn4538++
					}
				}
				r.EncodeMapStart(yynn4538)
				yynn4538 = 0
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4538[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4538[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4541 := *x.Privileged
						yym4542 := z.EncBinary()
						_ = yym4542
						if false {
						} else {
							r.EncodeBool(bool(yy4541))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4543 := *x.Privileged
						yym4544 := z.EncBinary()
						_ = yym4544
						if false {
						} else {
							r.EncodeBool(bool(yy4543))
						}
					}
				}
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4538[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4538[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4547 := *x.RunAsUser
						yym4548 := z.EncBinary()
						_ = yym4548
						if false {
						} else {
							r.EncodeInt(int64(yy4547))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4538[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4549 := *x.RunAsUser
						yym4550 := z.EncBinary()
						_ = yym4550
						if false {
						} else {
							r.EncodeInt(int64(yy4549))
						}
					}
				}
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4538[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4552 := *x.RunAsNonRoot
						yym4553 := z.EncBinary()
						_ = yym4553
						if false {
						} else {
							r.EncodeBool(bool(yy4552))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4538[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4554 := *x.RunAsNonRoot
						yym4555 := z.EncBinary()
						_ = yym4555
						if false {
						} else {
							r.EncodeBool(bool(yy4554))
						}
					}
				}
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4538[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4557 := *x.ReadOnlyRootFilesystem
						yym4558 := z.EncBinary()
						_ = yym4558
						if false {
						} else {
							r.EncodeBool(bool(yy4557))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4538[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4559 := *x.ReadOnlyRootFilesystem
						yym4560 := z.EncBinary()
						_ = yym4560
						if false {
						} else {
							r.EncodeBool(bool(yy4559))
						}
					}
				}
			}
			if yyr4538 || yy2arr4538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4561 := z.DecBinary()
	_ = yym4561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4562 := r.ContainerType()
		if yyct4562 == codecSelferValueTypeMap1234 {
			yyl4562 := r.ReadMapStart()
			if yyl4562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4562, d)
			}
		} else if yyct4562 == codecSelferValueTypeArray1234 {
			yyl4562 := r.ReadArrayStart()
			if yyl4562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4563Slc
	var yyhl4563 bool = l >= 0
	for yyj4563 := 0; ; yyj4563++ {
		if yyhl4563 {
			if yyj4563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4563Slc = r.DecodeBytes(yys4563Slc, true, true)
		yys4563 := string(yys4563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4563 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4566 := z.DecBinary()
				_ = yym4566
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4569 := z.DecBinary()
				_ = yym4569
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4571 := z.DecBinary()
				_ = yym4571
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4573 := z.DecBinary()
				_ = yym4573
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4563)
		} // end switch yys4563
	} // end for yyj4563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4574 int
	var yyb4574 bool
	var yyhl4574 bool = l >= 0
	yyj4574++
	if yyhl4574 {
		yyb4574 = yyj4574 > l
	} else {
		yyb4574 = r.CheckBreak()
	}
	if yyb4574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4574++
	if yyhl4574 {
		yyb4574 = yyj4574 > l
	} else {
		yyb4574 = r.CheckBreak()
	}
	if yyb4574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4577 := z.DecBinary()
		_ = yym4577
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4574++
	if yyhl4574 {
		yyb4574 = yyj4574 > l
	} else {
		yyb4574 = r.CheckBreak()
	}
	if yyb4574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4574++
	if yyhl4574 {
		yyb4574 = yyj4574 > l
	} else {
		yyb4574 = r.CheckBreak()
	}
	if yyb4574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4580 := z.DecBinary()
		_ = yym4580
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4574++
	if yyhl4574 {
		yyb4574 = yyj4574 > l
	} else {
		yyb4574 = r.CheckBreak()
	}
	if yyb4574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4582 := z.DecBinary()
		_ = yym4582
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4574++
	if yyhl4574 {
		yyb4574 = yyj4574 > l
	} else {
		yyb4574 = r.CheckBreak()
	}
	if yyb4574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4584 := z.DecBinary()
		_ = yym4584
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4574++
		if yyhl4574 {
			yyb4574 = yyj4574 > l
		} else {
			yyb4574 = r.CheckBreak()
		}
		if yyb4574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4585 := z.EncBinary()
		_ = yym4585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4586 := !z.EncBinary()
			yy2arr4586 := z.EncBasicHandle().StructToArray
			var yyq4586 [4]bool
			_, _, _ = yysep4586, yyq4586, yy2arr4586
			const yyr4586 bool = false
			yyq4586[0] = x.User != ""
			yyq4586[1] = x.Role != ""
			yyq4586[2] = x.Type != ""
			yyq4586[3] = x.Level != ""
			var yynn4586 int
			if yyr4586 || yy2arr4586 {
				r.EncodeArrayStart(4)
			} else {
				yynn4586 = 0
				for _, b := range yyq4586 {
					if b {
						yynn4586++
					}
				}
				r.EncodeMapStart(yynn4586)
				yynn4586 = 0
			}
			if yyr4586 || yy2arr4586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4586[0] {
					yym4588 := z.EncBinary()
					_ = yym4588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4589 := z.EncBinary()
					_ = yym4589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4586 || yy2arr4586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4586[1] {
					yym4591 := z.EncBinary()
					_ = yym4591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4592 := z.EncBinary()
					_ = yym4592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4586 || yy2arr4586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4586[2] {
					yym4594 := z.EncBinary()
					_ = yym4594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4586[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4595 := z.EncBinary()
					_ = yym4595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4586 || yy2arr4586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4586[3] {
					yym4597 := z.EncBinary()
					_ = yym4597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4586[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4598 := z.EncBinary()
					_ = yym4598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4586 || yy2arr4586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4599 := z.DecBinary()
	_ = yym4599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4600 := r.ContainerType()
		if yyct4600 == codecSelferValueTypeMap1234 {
			yyl4600 := r.ReadMapStart()
			if yyl4600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4600, d)
			}
		} else if yyct4600 == codecSelferValueTypeArray1234 {
			yyl4600 := r.ReadArrayStart()
			if yyl4600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4601Slc
	var yyhl4601 bool = l >= 0
	for yyj4601 := 0; ; yyj4601++ {
		if yyhl4601 {
			if yyj4601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4601Slc = r.DecodeBytes(yys4601Slc, true, true)
		yys4601 := string(yys4601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4601 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4601)
		} // end switch yys4601
	} // end for yyj4601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4606 int
	var yyb4606 bool
	var yyhl4606 bool = l >= 0
	yyj4606++
	if yyhl4606 {
		yyb4606 = yyj4606 > l
	} else {
		yyb4606 = r.CheckBreak()
	}
	if yyb4606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4606++
	if yyhl4606 {
		yyb4606 = yyj4606 > l
	} else {
		yyb4606 = r.CheckBreak()
	}
	if yyb4606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4606++
	if yyhl4606 {
		yyb4606 = yyj4606 > l
	} else {
		yyb4606 = r.CheckBreak()
	}
	if yyb4606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4606++
	if yyhl4606 {
		yyb4606 = yyj4606 > l
	} else {
		yyb4606 = r.CheckBreak()
	}
	if yyb4606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4606++
		if yyhl4606 {
			yyb4606 = yyj4606 > l
		} else {
			yyb4606 = r.CheckBreak()
		}
		if yyb4606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4611 := z.EncBinary()
		_ = yym4611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4612 := !z.EncBinary()
			yy2arr4612 := z.EncBasicHandle().StructToArray
			var yyq4612 [5]bool
			_, _, _ = yysep4612, yyq4612, yy2arr4612
			const yyr4612 bool = false
			yyq4612[0] = x.Kind != ""
			yyq4612[1] = x.APIVersion != ""
			yyq4612[2] = true
			var yynn4612 int
			if yyr4612 || yy2arr4612 {
				r.EncodeArrayStart(5)
			} else {
				yynn4612 = 2
				for _, b := range yyq4612 {
					if b {
						yynn4612++
					}
				}
				r.EncodeMapStart(yynn4612)
				yynn4612 = 0
			}
			if yyr4612 || yy2arr4612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4612[0] {
					yym4614 := z.EncBinary()
					_ = yym4614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4612[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4615 := z.EncBinary()
					_ = yym4615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4612 || yy2arr4612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4612[1] {
					yym4617 := z.EncBinary()
					_ = yym4617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4612[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4618 := z.EncBinary()
					_ = yym4618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4612 || yy2arr4612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4612[2] {
					yy4620 := &x.ObjectMeta
					yy4620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4612[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4621 := &x.ObjectMeta
					yy4621.CodecEncodeSelf(e)
				}
			}
			if yyr4612 || yy2arr4612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4623 := z.EncBinary()
				_ = yym4623
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4624 := z.EncBinary()
				_ = yym4624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4612 || yy2arr4612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4626 := z.EncBinary()
					_ = yym4626
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4627 := z.EncBinary()
					_ = yym4627
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4612 || yy2arr4612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4628 := z.DecBinary()
	_ = yym4628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4629 := r.ContainerType()
		if yyct4629 == codecSelferValueTypeMap1234 {
			yyl4629 := r.ReadMapStart()
			if yyl4629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4629, d)
			}
		} else if yyct4629 == codecSelferValueTypeArray1234 {
			yyl4629 := r.ReadArrayStart()
			if yyl4629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4630Slc
	var yyhl4630 bool = l >= 0
	for yyj4630 := 0; ; yyj4630++ {
		if yyhl4630 {
			if yyj4630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4630Slc = r.DecodeBytes(yys4630Slc, true, true)
		yys4630 := string(yys4630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4630 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4633 := &x.ObjectMeta
				yyv4633.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4635 := &x.Data
				yym4636 := z.DecBinary()
				_ = yym4636
				if false {
				} else {
					*yyv4635 = r.DecodeBytes(*(*[]byte)(yyv4635), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4630)
		} // end switch yys4630
	} // end for yyj4630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4637 int
	var yyb4637 bool
	var yyhl4637 bool = l >= 0
	yyj4637++
	if yyhl4637 {
		yyb4637 = yyj4637 > l
	} else {
		yyb4637 = r.CheckBreak()
	}
	if yyb4637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4637++
	if yyhl4637 {
		yyb4637 = yyj4637 > l
	} else {
		yyb4637 = r.CheckBreak()
	}
	if yyb4637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4637++
	if yyhl4637 {
		yyb4637 = yyj4637 > l
	} else {
		yyb4637 = r.CheckBreak()
	}
	if yyb4637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4640 := &x.ObjectMeta
		yyv4640.CodecDecodeSelf(d)
	}
	yyj4637++
	if yyhl4637 {
		yyb4637 = yyj4637 > l
	} else {
		yyb4637 = r.CheckBreak()
	}
	if yyb4637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4637++
	if yyhl4637 {
		yyb4637 = yyj4637 > l
	} else {
		yyb4637 = r.CheckBreak()
	}
	if yyb4637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4642 := &x.Data
		yym4643 := z.DecBinary()
		_ = yym4643
		if false {
		} else {
			*yyv4642 = r.DecodeBytes(*(*[]byte)(yyv4642), false, false)
		}
	}
	for {
		yyj4637++
		if yyhl4637 {
			yyb4637 = yyj4637 > l
		} else {
			yyb4637 = r.CheckBreak()
		}
		if yyb4637 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4637-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yy4645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4646 := *v
	yyh4646, yyl4646 := z.DecSliceHelperStart()
	var yyc4646 bool
	if yyl4646 == 0 {
		if yyv4646 == nil {
			yyv4646 = []OwnerReference{}
			yyc4646 = true
		} else if len(yyv4646) != 0 {
			yyv4646 = yyv4646[:0]
			yyc4646 = true
		}
	} else if yyl4646 > 0 {
		var yyrr4646, yyrl4646 int
		var yyrt4646 bool
		if yyl4646 > cap(yyv4646) {

			yyrg4646 := len(yyv4646) > 0
			yyv24646 := yyv4646
			yyrl4646, yyrt4646 = z.DecInferLen(yyl4646, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4646 {
				if yyrl4646 <= cap(yyv4646) {
					yyv4646 = yyv4646[:yyrl4646]
				} else {
					yyv4646 = make([]OwnerReference, yyrl4646)
				}
			} else {
				yyv4646 = make([]OwnerReference, yyrl4646)
			}
			yyc4646 = true
			yyrr4646 = len(yyv4646)
			if yyrg4646 {
				copy(yyv4646, yyv24646)
			}
		} else if yyl4646 != len(yyv4646) {
			yyv4646 = yyv4646[:yyl4646]
			yyc4646 = true
		}
		yyj4646 := 0
		for ; yyj4646 < yyrr4646; yyj4646++ {
			yyh4646.ElemContainerState(yyj4646)
			if r.TryDecodeAsNil() {
				yyv4646[yyj4646] = OwnerReference{}
			} else {
				yyv4647 := &yyv4646[yyj4646]
				yyv4647.CodecDecodeSelf(d)
			}

		}
		if yyrt4646 {
			for ; yyj4646 < yyl4646; yyj4646++ {
				yyv4646 = append(yyv4646, OwnerReference{})
				yyh4646.ElemContainerState(yyj4646)
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = OwnerReference{}
				} else {
					yyv4648 := &yyv4646[yyj4646]
					yyv4648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4646 := 0
		for ; !r.CheckBreak(); yyj4646++ {

			if yyj4646 >= len(yyv4646) {
				yyv4646 = append(yyv4646, OwnerReference{}) // var yyz4646 OwnerReference
				yyc4646 = true
			}
			yyh4646.ElemContainerState(yyj4646)
			if yyj4646 < len(yyv4646) {
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = OwnerReference{}
				} else {
					yyv4649 := &yyv4646[yyj4646]
					yyv4649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4646 < len(yyv4646) {
			yyv4646 = yyv4646[:yyj4646]
			yyc4646 = true
		} else if yyj4646 == 0 && yyv4646 == nil {
			yyv4646 = []OwnerReference{}
			yyc4646 = true
		}
	}
	yyh4646.End()
	if yyc4646 {
		*v = yyv4646
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4651 := *v
	yyh4651, yyl4651 := z.DecSliceHelperStart()
	var yyc4651 bool
	if yyl4651 == 0 {
		if yyv4651 == nil {
			yyv4651 = []PersistentVolumeAccessMode{}
			yyc4651 = true
		} else if len(yyv4651) != 0 {
			yyv4651 = yyv4651[:0]
			yyc4651 = true
		}
	} else if yyl4651 > 0 {
		var yyrr4651, yyrl4651 int
		var yyrt4651 bool
		if yyl4651 > cap(yyv4651) {

			yyrl4651, yyrt4651 = z.DecInferLen(yyl4651, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4651 {
				if yyrl4651 <= cap(yyv4651) {
					yyv4651 = yyv4651[:yyrl4651]
				} else {
					yyv4651 = make([]PersistentVolumeAccessMode, yyrl4651)
				}
			} else {
				yyv4651 = make([]PersistentVolumeAccessMode, yyrl4651)
			}
			yyc4651 = true
			yyrr4651 = len(yyv4651)
		} else if yyl4651 != len(yyv4651) {
			yyv4651 = yyv4651[:yyl4651]
			yyc4651 = true
		}
		yyj4651 := 0
		for ; yyj4651 < yyrr4651; yyj4651++ {
			yyh4651.ElemContainerState(yyj4651)
			if r.TryDecodeAsNil() {
				yyv4651[yyj4651] = ""
			} else {
				yyv4651[yyj4651] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4651 {
			for ; yyj4651 < yyl4651; yyj4651++ {
				yyv4651 = append(yyv4651, "")
				yyh4651.ElemContainerState(yyj4651)
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = ""
				} else {
					yyv4651[yyj4651] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4651 := 0
		for ; !r.CheckBreak(); yyj4651++ {

			if yyj4651 >= len(yyv4651) {
				yyv4651 = append(yyv4651, "") // var yyz4651 PersistentVolumeAccessMode
				yyc4651 = true
			}
			yyh4651.ElemContainerState(yyj4651)
			if yyj4651 < len(yyv4651) {
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = ""
				} else {
					yyv4651[yyj4651] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4651 < len(yyv4651) {
			yyv4651 = yyv4651[:yyj4651]
			yyc4651 = true
		} else if yyj4651 == 0 && yyv4651 == nil {
			yyv4651 = []PersistentVolumeAccessMode{}
			yyc4651 = true
		}
	}
	yyh4651.End()
	if yyc4651 {
		*v = yyv4651
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4656 := &yyv4655
		yy4656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4657 := *v
	yyh4657, yyl4657 := z.DecSliceHelperStart()
	var yyc4657 bool
	if yyl4657 == 0 {
		if yyv4657 == nil {
			yyv4657 = []PersistentVolume{}
			yyc4657 = true
		} else if len(yyv4657) != 0 {
			yyv4657 = yyv4657[:0]
			yyc4657 = true
		}
	} else if yyl4657 > 0 {
		var yyrr4657, yyrl4657 int
		var yyrt4657 bool
		if yyl4657 > cap(yyv4657) {

			yyrg4657 := len(yyv4657) > 0
			yyv24657 := yyv4657
			yyrl4657, yyrt4657 = z.DecInferLen(yyl4657, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4657 {
				if yyrl4657 <= cap(yyv4657) {
					yyv4657 = yyv4657[:yyrl4657]
				} else {
					yyv4657 = make([]PersistentVolume, yyrl4657)
				}
			} else {
				yyv4657 = make([]PersistentVolume, yyrl4657)
			}
			yyc4657 = true
			yyrr4657 = len(yyv4657)
			if yyrg4657 {
				copy(yyv4657, yyv24657)
			}
		} else if yyl4657 != len(yyv4657) {
			yyv4657 = yyv4657[:yyl4657]
			yyc4657 = true
		}
		yyj4657 := 0
		for ; yyj4657 < yyrr4657; yyj4657++ {
			yyh4657.ElemContainerState(yyj4657)
			if r.TryDecodeAsNil() {
				yyv4657[yyj4657] = PersistentVolume{}
			} else {
				yyv4658 := &yyv4657[yyj4657]
				yyv4658.CodecDecodeSelf(d)
			}

		}
		if yyrt4657 {
			for ; yyj4657 < yyl4657; yyj4657++ {
				yyv4657 = append(yyv4657, PersistentVolume{})
				yyh4657.ElemContainerState(yyj4657)
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = PersistentVolume{}
				} else {
					yyv4659 := &yyv4657[yyj4657]
					yyv4659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4657 := 0
		for ; !r.CheckBreak(); yyj4657++ {

			if yyj4657 >= len(yyv4657) {
				yyv4657 = append(yyv4657, PersistentVolume{}) // var yyz4657 PersistentVolume
				yyc4657 = true
			}
			yyh4657.ElemContainerState(yyj4657)
			if yyj4657 < len(yyv4657) {
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = PersistentVolume{}
				} else {
					yyv4660 := &yyv4657[yyj4657]
					yyv4660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4657 < len(yyv4657) {
			yyv4657 = yyv4657[:yyj4657]
			yyc4657 = true
		} else if yyj4657 == 0 && yyv4657 == nil {
			yyv4657 = []PersistentVolume{}
			yyc4657 = true
		}
	}
	yyh4657.End()
	if yyc4657 {
		*v = yyv4657
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []PersistentVolumeClaim{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]PersistentVolumeClaim, yyrl4663)
				}
			} else {
				yyv4663 = make([]PersistentVolumeClaim, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = PersistentVolumeClaim{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, PersistentVolumeClaim{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = PersistentVolumeClaim{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, PersistentVolumeClaim{}) // var yyz4663 PersistentVolumeClaim
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = PersistentVolumeClaim{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []PersistentVolumeClaim{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4668 := &yyv4667
		yy4668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4669 := *v
	yyh4669, yyl4669 := z.DecSliceHelperStart()
	var yyc4669 bool
	if yyl4669 == 0 {
		if yyv4669 == nil {
			yyv4669 = []KeyToPath{}
			yyc4669 = true
		} else if len(yyv4669) != 0 {
			yyv4669 = yyv4669[:0]
			yyc4669 = true
		}
	} else if yyl4669 > 0 {
		var yyrr4669, yyrl4669 int
		var yyrt4669 bool
		if yyl4669 > cap(yyv4669) {

			yyrg4669 := len(yyv4669) > 0
			yyv24669 := yyv4669
			yyrl4669, yyrt4669 = z.DecInferLen(yyl4669, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4669 {
				if yyrl4669 <= cap(yyv4669) {
					yyv4669 = yyv4669[:yyrl4669]
				} else {
					yyv4669 = make([]KeyToPath, yyrl4669)
				}
			} else {
				yyv4669 = make([]KeyToPath, yyrl4669)
			}
			yyc4669 = true
			yyrr4669 = len(yyv4669)
			if yyrg4669 {
				copy(yyv4669, yyv24669)
			}
		} else if yyl4669 != len(yyv4669) {
			yyv4669 = yyv4669[:yyl4669]
			yyc4669 = true
		}
		yyj4669 := 0
		for ; yyj4669 < yyrr4669; yyj4669++ {
			yyh4669.ElemContainerState(yyj4669)
			if r.TryDecodeAsNil() {
				yyv4669[yyj4669] = KeyToPath{}
			} else {
				yyv4670 := &yyv4669[yyj4669]
				yyv4670.CodecDecodeSelf(d)
			}

		}
		if yyrt4669 {
			for ; yyj4669 < yyl4669; yyj4669++ {
				yyv4669 = append(yyv4669, KeyToPath{})
				yyh4669.ElemContainerState(yyj4669)
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = KeyToPath{}
				} else {
					yyv4671 := &yyv4669[yyj4669]
					yyv4671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4669 := 0
		for ; !r.CheckBreak(); yyj4669++ {

			if yyj4669 >= len(yyv4669) {
				yyv4669 = append(yyv4669, KeyToPath{}) // var yyz4669 KeyToPath
				yyc4669 = true
			}
			yyh4669.ElemContainerState(yyj4669)
			if yyj4669 < len(yyv4669) {
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = KeyToPath{}
				} else {
					yyv4672 := &yyv4669[yyj4669]
					yyv4672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4669 < len(yyv4669) {
			yyv4669 = yyv4669[:yyj4669]
			yyc4669 = true
		} else if yyj4669 == 0 && yyv4669 == nil {
			yyv4669 = []KeyToPath{}
			yyc4669 = true
		}
	}
	yyh4669.End()
	if yyc4669 {
		*v = yyv4669
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4674 := &yyv4673
		yy4674.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4675 := *v
	yyh4675, yyl4675 := z.DecSliceHelperStart()
	var yyc4675 bool
	if yyl4675 == 0 {
		if yyv4675 == nil {
			yyv4675 = []DownwardAPIVolumeFile{}
			yyc4675 = true
		} else if len(yyv4675) != 0 {
			yyv4675 = yyv4675[:0]
			yyc4675 = true
		}
	} else if yyl4675 > 0 {
		var yyrr4675, yyrl4675 int
		var yyrt4675 bool
		if yyl4675 > cap(yyv4675) {

			yyrg4675 := len(yyv4675) > 0
			yyv24675 := yyv4675
			yyrl4675, yyrt4675 = z.DecInferLen(yyl4675, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4675 {
				if yyrl4675 <= cap(yyv4675) {
					yyv4675 = yyv4675[:yyrl4675]
				} else {
					yyv4675 = make([]DownwardAPIVolumeFile, yyrl4675)
				}
			} else {
				yyv4675 = make([]DownwardAPIVolumeFile, yyrl4675)
			}
			yyc4675 = true
			yyrr4675 = len(yyv4675)
			if yyrg4675 {
				copy(yyv4675, yyv24675)
			}
		} else if yyl4675 != len(yyv4675) {
			yyv4675 = yyv4675[:yyl4675]
			yyc4675 = true
		}
		yyj4675 := 0
		for ; yyj4675 < yyrr4675; yyj4675++ {
			yyh4675.ElemContainerState(yyj4675)
			if r.TryDecodeAsNil() {
				yyv4675[yyj4675] = DownwardAPIVolumeFile{}
			} else {
				yyv4676 := &yyv4675[yyj4675]
				yyv4676.CodecDecodeSelf(d)
			}

		}
		if yyrt4675 {
			for ; yyj4675 < yyl4675; yyj4675++ {
				yyv4675 = append(yyv4675, DownwardAPIVolumeFile{})
				yyh4675.ElemContainerState(yyj4675)
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = DownwardAPIVolumeFile{}
				} else {
					yyv4677 := &yyv4675[yyj4675]
					yyv4677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4675 := 0
		for ; !r.CheckBreak(); yyj4675++ {

			if yyj4675 >= len(yyv4675) {
				yyv4675 = append(yyv4675, DownwardAPIVolumeFile{}) // var yyz4675 DownwardAPIVolumeFile
				yyc4675 = true
			}
			yyh4675.ElemContainerState(yyj4675)
			if yyj4675 < len(yyv4675) {
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = DownwardAPIVolumeFile{}
				} else {
					yyv4678 := &yyv4675[yyj4675]
					yyv4678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4675 < len(yyv4675) {
			yyv4675 = yyv4675[:yyj4675]
			yyc4675 = true
		} else if yyj4675 == 0 && yyv4675 == nil {
			yyv4675 = []DownwardAPIVolumeFile{}
			yyc4675 = true
		}
	}
	yyh4675.End()
	if yyc4675 {
		*v = yyv4675
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4680 := &yyv4679
		yy4680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4681 := *v
	yyh4681, yyl4681 := z.DecSliceHelperStart()
	var yyc4681 bool
	if yyl4681 == 0 {
		if yyv4681 == nil {
			yyv4681 = []HTTPHeader{}
			yyc4681 = true
		} else if len(yyv4681) != 0 {
			yyv4681 = yyv4681[:0]
			yyc4681 = true
		}
	} else if yyl4681 > 0 {
		var yyrr4681, yyrl4681 int
		var yyrt4681 bool
		if yyl4681 > cap(yyv4681) {

			yyrg4681 := len(yyv4681) > 0
			yyv24681 := yyv4681
			yyrl4681, yyrt4681 = z.DecInferLen(yyl4681, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4681 {
				if yyrl4681 <= cap(yyv4681) {
					yyv4681 = yyv4681[:yyrl4681]
				} else {
					yyv4681 = make([]HTTPHeader, yyrl4681)
				}
			} else {
				yyv4681 = make([]HTTPHeader, yyrl4681)
			}
			yyc4681 = true
			yyrr4681 = len(yyv4681)
			if yyrg4681 {
				copy(yyv4681, yyv24681)
			}
		} else if yyl4681 != len(yyv4681) {
			yyv4681 = yyv4681[:yyl4681]
			yyc4681 = true
		}
		yyj4681 := 0
		for ; yyj4681 < yyrr4681; yyj4681++ {
			yyh4681.ElemContainerState(yyj4681)
			if r.TryDecodeAsNil() {
				yyv4681[yyj4681] = HTTPHeader{}
			} else {
				yyv4682 := &yyv4681[yyj4681]
				yyv4682.CodecDecodeSelf(d)
			}

		}
		if yyrt4681 {
			for ; yyj4681 < yyl4681; yyj4681++ {
				yyv4681 = append(yyv4681, HTTPHeader{})
				yyh4681.ElemContainerState(yyj4681)
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = HTTPHeader{}
				} else {
					yyv4683 := &yyv4681[yyj4681]
					yyv4683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4681 := 0
		for ; !r.CheckBreak(); yyj4681++ {

			if yyj4681 >= len(yyv4681) {
				yyv4681 = append(yyv4681, HTTPHeader{}) // var yyz4681 HTTPHeader
				yyc4681 = true
			}
			yyh4681.ElemContainerState(yyj4681)
			if yyj4681 < len(yyv4681) {
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = HTTPHeader{}
				} else {
					yyv4684 := &yyv4681[yyj4681]
					yyv4684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4681 < len(yyv4681) {
			yyv4681 = yyv4681[:yyj4681]
			yyc4681 = true
		} else if yyj4681 == 0 && yyv4681 == nil {
			yyv4681 = []HTTPHeader{}
			yyc4681 = true
		}
	}
	yyh4681.End()
	if yyc4681 {
		*v = yyv4681
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4685 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4686 := *v
	yyh4686, yyl4686 := z.DecSliceHelperStart()
	var yyc4686 bool
	if yyl4686 == 0 {
		if yyv4686 == nil {
			yyv4686 = []Capability{}
			yyc4686 = true
		} else if len(yyv4686) != 0 {
			yyv4686 = yyv4686[:0]
			yyc4686 = true
		}
	} else if yyl4686 > 0 {
		var yyrr4686, yyrl4686 int
		var yyrt4686 bool
		if yyl4686 > cap(yyv4686) {

			yyrl4686, yyrt4686 = z.DecInferLen(yyl4686, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4686 {
				if yyrl4686 <= cap(yyv4686) {
					yyv4686 = yyv4686[:yyrl4686]
				} else {
					yyv4686 = make([]Capability, yyrl4686)
				}
			} else {
				yyv4686 = make([]Capability, yyrl4686)
			}
			yyc4686 = true
			yyrr4686 = len(yyv4686)
		} else if yyl4686 != len(yyv4686) {
			yyv4686 = yyv4686[:yyl4686]
			yyc4686 = true
		}
		yyj4686 := 0
		for ; yyj4686 < yyrr4686; yyj4686++ {
			yyh4686.ElemContainerState(yyj4686)
			if r.TryDecodeAsNil() {
				yyv4686[yyj4686] = ""
			} else {
				yyv4686[yyj4686] = Capability(r.DecodeString())
			}

		}
		if yyrt4686 {
			for ; yyj4686 < yyl4686; yyj4686++ {
				yyv4686 = append(yyv4686, "")
				yyh4686.ElemContainerState(yyj4686)
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = ""
				} else {
					yyv4686[yyj4686] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4686 := 0
		for ; !r.CheckBreak(); yyj4686++ {

			if yyj4686 >= len(yyv4686) {
				yyv4686 = append(yyv4686, "") // var yyz4686 Capability
				yyc4686 = true
			}
			yyh4686.ElemContainerState(yyj4686)
			if yyj4686 < len(yyv4686) {
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = ""
				} else {
					yyv4686[yyj4686] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4686 < len(yyv4686) {
			yyv4686 = yyv4686[:yyj4686]
			yyc4686 = true
		} else if yyj4686 == 0 && yyv4686 == nil {
			yyv4686 = []Capability{}
			yyc4686 = true
		}
	}
	yyh4686.End()
	if yyc4686 {
		*v = yyv4686
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4690 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4691 := &yyv4690
		yy4691.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4692 := *v
	yyh4692, yyl4692 := z.DecSliceHelperStart()
	var yyc4692 bool
	if yyl4692 == 0 {
		if yyv4692 == nil {
			yyv4692 = []ContainerPort{}
			yyc4692 = true
		} else if len(yyv4692) != 0 {
			yyv4692 = yyv4692[:0]
			yyc4692 = true
		}
	} else if yyl4692 > 0 {
		var yyrr4692, yyrl4692 int
		var yyrt4692 bool
		if yyl4692 > cap(yyv4692) {

			yyrg4692 := len(yyv4692) > 0
			yyv24692 := yyv4692
			yyrl4692, yyrt4692 = z.DecInferLen(yyl4692, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4692 {
				if yyrl4692 <= cap(yyv4692) {
					yyv4692 = yyv4692[:yyrl4692]
				} else {
					yyv4692 = make([]ContainerPort, yyrl4692)
				}
			} else {
				yyv4692 = make([]ContainerPort, yyrl4692)
			}
			yyc4692 = true
			yyrr4692 = len(yyv4692)
			if yyrg4692 {
				copy(yyv4692, yyv24692)
			}
		} else if yyl4692 != len(yyv4692) {
			yyv4692 = yyv4692[:yyl4692]
			yyc4692 = true
		}
		yyj4692 := 0
		for ; yyj4692 < yyrr4692; yyj4692++ {
			yyh4692.ElemContainerState(yyj4692)
			if r.TryDecodeAsNil() {
				yyv4692[yyj4692] = ContainerPort{}
			} else {
				yyv4693 := &yyv4692[yyj4692]
				yyv4693.CodecDecodeSelf(d)
			}

		}
		if yyrt4692 {
			for ; yyj4692 < yyl4692; yyj4692++ {
				yyv4692 = append(yyv4692, ContainerPort{})
				yyh4692.ElemContainerState(yyj4692)
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = ContainerPort{}
				} else {
					yyv4694 := &yyv4692[yyj4692]
					yyv4694.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4692 := 0
		for ; !r.CheckBreak(); yyj4692++ {

			if yyj4692 >= len(yyv4692) {
				yyv4692 = append(yyv4692, ContainerPort{}) // var yyz4692 ContainerPort
				yyc4692 = true
			}
			yyh4692.ElemContainerState(yyj4692)
			if yyj4692 < len(yyv4692) {
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = ContainerPort{}
				} else {
					yyv4695 := &yyv4692[yyj4692]
					yyv4695.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4692 < len(yyv4692) {
			yyv4692 = yyv4692[:yyj4692]
			yyc4692 = true
		} else if yyj4692 == 0 && yyv4692 == nil {
			yyv4692 = []ContainerPort{}
			yyc4692 = true
		}
	}
	yyh4692.End()
	if yyc4692 {
		*v = yyv4692
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4696 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4697 := &yyv4696
		yy4697.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4698 := *v
	yyh4698, yyl4698 := z.DecSliceHelperStart()
	var yyc4698 bool
	if yyl4698 == 0 {
		if yyv4698 == nil {
			yyv4698 = []EnvVar{}
			yyc4698 = true
		} else if len(yyv4698) != 0 {
			yyv4698 = yyv4698[:0]
			yyc4698 = true
		}
	} else if yyl4698 > 0 {
		var yyrr4698, yyrl4698 int
		var yyrt4698 bool
		if yyl4698 > cap(yyv4698) {

			yyrg4698 := len(yyv4698) > 0
			yyv24698 := yyv4698
			yyrl4698, yyrt4698 = z.DecInferLen(yyl4698, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4698 {
				if yyrl4698 <= cap(yyv4698) {
					yyv4698 = yyv4698[:yyrl4698]
				} else {
					yyv4698 = make([]EnvVar, yyrl4698)
				}
			} else {
				yyv4698 = make([]EnvVar, yyrl4698)
			}
			yyc4698 = true
			yyrr4698 = len(yyv4698)
			if yyrg4698 {
				copy(yyv4698, yyv24698)
			}
		} else if yyl4698 != len(yyv4698) {
			yyv4698 = yyv4698[:yyl4698]
			yyc4698 = true
		}
		yyj4698 := 0
		for ; yyj4698 < yyrr4698; yyj4698++ {
			yyh4698.ElemContainerState(yyj4698)
			if r.TryDecodeAsNil() {
				yyv4698[yyj4698] = EnvVar{}
			} else {
				yyv4699 := &yyv4698[yyj4698]
				yyv4699.CodecDecodeSelf(d)
			}

		}
		if yyrt4698 {
			for ; yyj4698 < yyl4698; yyj4698++ {
				yyv4698 = append(yyv4698, EnvVar{})
				yyh4698.ElemContainerState(yyj4698)
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = EnvVar{}
				} else {
					yyv4700 := &yyv4698[yyj4698]
					yyv4700.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4698 := 0
		for ; !r.CheckBreak(); yyj4698++ {

			if yyj4698 >= len(yyv4698) {
				yyv4698 = append(yyv4698, EnvVar{}) // var yyz4698 EnvVar
				yyc4698 = true
			}
			yyh4698.ElemContainerState(yyj4698)
			if yyj4698 < len(yyv4698) {
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = EnvVar{}
				} else {
					yyv4701 := &yyv4698[yyj4698]
					yyv4701.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4698 < len(yyv4698) {
			yyv4698 = yyv4698[:yyj4698]
			yyc4698 = true
		} else if yyj4698 == 0 && yyv4698 == nil {
			yyv4698 = []EnvVar{}
			yyc4698 = true
		}
	}
	yyh4698.End()
	if yyc4698 {
		*v = yyv4698
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4702 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4703 := &yyv4702
		yy4703.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4704 := *v
	yyh4704, yyl4704 := z.DecSliceHelperStart()
	var yyc4704 bool
	if yyl4704 == 0 {
		if yyv4704 == nil {
			yyv4704 = []VolumeMount{}
			yyc4704 = true
		} else if len(yyv4704) != 0 {
			yyv4704 = yyv4704[:0]
			yyc4704 = true
		}
	} else if yyl4704 > 0 {
		var yyrr4704, yyrl4704 int
		var yyrt4704 bool
		if yyl4704 > cap(yyv4704) {

			yyrg4704 := len(yyv4704) > 0
			yyv24704 := yyv4704
			yyrl4704, yyrt4704 = z.DecInferLen(yyl4704, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4704 {
				if yyrl4704 <= cap(yyv4704) {
					yyv4704 = yyv4704[:yyrl4704]
				} else {
					yyv4704 = make([]VolumeMount, yyrl4704)
				}
			} else {
				yyv4704 = make([]VolumeMount, yyrl4704)
			}
			yyc4704 = true
			yyrr4704 = len(yyv4704)
			if yyrg4704 {
				copy(yyv4704, yyv24704)
			}
		} else if yyl4704 != len(yyv4704) {
			yyv4704 = yyv4704[:yyl4704]
			yyc4704 = true
		}
		yyj4704 := 0
		for ; yyj4704 < yyrr4704; yyj4704++ {
			yyh4704.ElemContainerState(yyj4704)
			if r.TryDecodeAsNil() {
				yyv4704[yyj4704] = VolumeMount{}
			} else {
				yyv4705 := &yyv4704[yyj4704]
				yyv4705.CodecDecodeSelf(d)
			}

		}
		if yyrt4704 {
			for ; yyj4704 < yyl4704; yyj4704++ {
				yyv4704 = append(yyv4704, VolumeMount{})
				yyh4704.ElemContainerState(yyj4704)
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = VolumeMount{}
				} else {
					yyv4706 := &yyv4704[yyj4704]
					yyv4706.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4704 := 0
		for ; !r.CheckBreak(); yyj4704++ {

			if yyj4704 >= len(yyv4704) {
				yyv4704 = append(yyv4704, VolumeMount{}) // var yyz4704 VolumeMount
				yyc4704 = true
			}
			yyh4704.ElemContainerState(yyj4704)
			if yyj4704 < len(yyv4704) {
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = VolumeMount{}
				} else {
					yyv4707 := &yyv4704[yyj4704]
					yyv4707.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4704 < len(yyv4704) {
			yyv4704 = yyv4704[:yyj4704]
			yyc4704 = true
		} else if yyj4704 == 0 && yyv4704 == nil {
			yyv4704 = []VolumeMount{}
			yyc4704 = true
		}
	}
	yyh4704.End()
	if yyc4704 {
		*v = yyv4704
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4708 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4709 := &yyv4708
		yy4709.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4710 := *v
	yyh4710, yyl4710 := z.DecSliceHelperStart()
	var yyc4710 bool
	if yyl4710 == 0 {
		if yyv4710 == nil {
			yyv4710 = []Pod{}
			yyc4710 = true
		} else if len(yyv4710) != 0 {
			yyv4710 = yyv4710[:0]
			yyc4710 = true
		}
	} else if yyl4710 > 0 {
		var yyrr4710, yyrl4710 int
		var yyrt4710 bool
		if yyl4710 > cap(yyv4710) {

			yyrg4710 := len(yyv4710) > 0
			yyv24710 := yyv4710
			yyrl4710, yyrt4710 = z.DecInferLen(yyl4710, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4710 {
				if yyrl4710 <= cap(yyv4710) {
					yyv4710 = yyv4710[:yyrl4710]
				} else {
					yyv4710 = make([]Pod, yyrl4710)
				}
			} else {
				yyv4710 = make([]Pod, yyrl4710)
			}
			yyc4710 = true
			yyrr4710 = len(yyv4710)
			if yyrg4710 {
				copy(yyv4710, yyv24710)
			}
		} else if yyl4710 != len(yyv4710) {
			yyv4710 = yyv4710[:yyl4710]
			yyc4710 = true
		}
		yyj4710 := 0
		for ; yyj4710 < yyrr4710; yyj4710++ {
			yyh4710.ElemContainerState(yyj4710)
			if r.TryDecodeAsNil() {
				yyv4710[yyj4710] = Pod{}
			} else {
				yyv4711 := &yyv4710[yyj4710]
				yyv4711.CodecDecodeSelf(d)
			}

		}
		if yyrt4710 {
			for ; yyj4710 < yyl4710; yyj4710++ {
				yyv4710 = append(yyv4710, Pod{})
				yyh4710.ElemContainerState(yyj4710)
				if r.TryDecodeAsNil() {
					yyv4710[yyj4710] = Pod{}
				} else {
					yyv4712 := &yyv4710[yyj4710]
					yyv4712.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4710 := 0
		for ; !r.CheckBreak(); yyj4710++ {

			if yyj4710 >= len(yyv4710) {
				yyv4710 = append(yyv4710, Pod{}) // var yyz4710 Pod
				yyc4710 = true
			}
			yyh4710.ElemContainerState(yyj4710)
			if yyj4710 < len(yyv4710) {
				if r.TryDecodeAsNil() {
					yyv4710[yyj4710] = Pod{}
				} else {
					yyv4713 := &yyv4710[yyj4710]
					yyv4713.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4710 < len(yyv4710) {
			yyv4710 = yyv4710[:yyj4710]
			yyc4710 = true
		} else if yyj4710 == 0 && yyv4710 == nil {
			yyv4710 = []Pod{}
			yyc4710 = true
		}
	}
	yyh4710.End()
	if yyc4710 {
		*v = yyv4710
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4714 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4715 := &yyv4714
		yy4715.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4716 := *v
	yyh4716, yyl4716 := z.DecSliceHelperStart()
	var yyc4716 bool
	if yyl4716 == 0 {
		if yyv4716 == nil {
			yyv4716 = []NodeSelectorTerm{}
			yyc4716 = true
		} else if len(yyv4716) != 0 {
			yyv4716 = yyv4716[:0]
			yyc4716 = true
		}
	} else if yyl4716 > 0 {
		var yyrr4716, yyrl4716 int
		var yyrt4716 bool
		if yyl4716 > cap(yyv4716) {

			yyrg4716 := len(yyv4716) > 0
			yyv24716 := yyv4716
			yyrl4716, yyrt4716 = z.DecInferLen(yyl4716, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4716 {
				if yyrl4716 <= cap(yyv4716) {
					yyv4716 = yyv4716[:yyrl4716]
				} else {
					yyv4716 = make([]NodeSelectorTerm, yyrl4716)
				}
			} else {
				yyv4716 = make([]NodeSelectorTerm, yyrl4716)
			}
			yyc4716 = true
			yyrr4716 = len(yyv4716)
			if yyrg4716 {
				copy(yyv4716, yyv24716)
			}
		} else if yyl4716 != len(yyv4716) {
			yyv4716 = yyv4716[:yyl4716]
			yyc4716 = true
		}
		yyj4716 := 0
		for ; yyj4716 < yyrr4716; yyj4716++ {
			yyh4716.ElemContainerState(yyj4716)
			if r.TryDecodeAsNil() {
				yyv4716[yyj4716] = NodeSelectorTerm{}
			} else {
				yyv4717 := &yyv4716[yyj4716]
				yyv4717.CodecDecodeSelf(d)
			}

		}
		if yyrt4716 {
			for ; yyj4716 < yyl4716; yyj4716++ {
				yyv4716 = append(yyv4716, NodeSelectorTerm{})
				yyh4716.ElemContainerState(yyj4716)
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = NodeSelectorTerm{}
				} else {
					yyv4718 := &yyv4716[yyj4716]
					yyv4718.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4716 := 0
		for ; !r.CheckBreak(); yyj4716++ {

			if yyj4716 >= len(yyv4716) {
				yyv4716 = append(yyv4716, NodeSelectorTerm{}) // var yyz4716 NodeSelectorTerm
				yyc4716 = true
			}
			yyh4716.ElemContainerState(yyj4716)
			if yyj4716 < len(yyv4716) {
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = NodeSelectorTerm{}
				} else {
					yyv4719 := &yyv4716[yyj4716]
					yyv4719.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4716 < len(yyv4716) {
			yyv4716 = yyv4716[:yyj4716]
			yyc4716 = true
		} else if yyj4716 == 0 && yyv4716 == nil {
			yyv4716 = []NodeSelectorTerm{}
			yyc4716 = true
		}
	}
	yyh4716.End()
	if yyc4716 {
		*v = yyv4716
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4720 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4721 := &yyv4720
		yy4721.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4722 := *v
	yyh4722, yyl4722 := z.DecSliceHelperStart()
	var yyc4722 bool
	if yyl4722 == 0 {
		if yyv4722 == nil {
			yyv4722 = []NodeSelectorRequirement{}
			yyc4722 = true
		} else if len(yyv4722) != 0 {
			yyv4722 = yyv4722[:0]
			yyc4722 = true
		}
	} else if yyl4722 > 0 {
		var yyrr4722, yyrl4722 int
		var yyrt4722 bool
		if yyl4722 > cap(yyv4722) {

			yyrg4722 := len(yyv4722) > 0
			yyv24722 := yyv4722
			yyrl4722, yyrt4722 = z.DecInferLen(yyl4722, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4722 {
				if yyrl4722 <= cap(yyv4722) {
					yyv4722 = yyv4722[:yyrl4722]
				} else {
					yyv4722 = make([]NodeSelectorRequirement, yyrl4722)
				}
			} else {
				yyv4722 = make([]NodeSelectorRequirement, yyrl4722)
			}
			yyc4722 = true
			yyrr4722 = len(yyv4722)
			if yyrg4722 {
				copy(yyv4722, yyv24722)
			}
		} else if yyl4722 != len(yyv4722) {
			yyv4722 = yyv4722[:yyl4722]
			yyc4722 = true
		}
		yyj4722 := 0
		for ; yyj4722 < yyrr4722; yyj4722++ {
			yyh4722.ElemContainerState(yyj4722)
			if r.TryDecodeAsNil() {
				yyv4722[yyj4722] = NodeSelectorRequirement{}
			} else {
				yyv4723 := &yyv4722[yyj4722]
				yyv4723.CodecDecodeSelf(d)
			}

		}
		if yyrt4722 {
			for ; yyj4722 < yyl4722; yyj4722++ {
				yyv4722 = append(yyv4722, NodeSelectorRequirement{})
				yyh4722.ElemContainerState(yyj4722)
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = NodeSelectorRequirement{}
				} else {
					yyv4724 := &yyv4722[yyj4722]
					yyv4724.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4722 := 0
		for ; !r.CheckBreak(); yyj4722++ {

			if yyj4722 >= len(yyv4722) {
				yyv4722 = append(yyv4722, NodeSelectorRequirement{}) // var yyz4722 NodeSelectorRequirement
				yyc4722 = true
			}
			yyh4722.ElemContainerState(yyj4722)
			if yyj4722 < len(yyv4722) {
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = NodeSelectorRequirement{}
				} else {
					yyv4725 := &yyv4722[yyj4722]
					yyv4725.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4722 < len(yyv4722) {
			yyv4722 = yyv4722[:yyj4722]
			yyc4722 = true
		} else if yyj4722 == 0 && yyv4722 == nil {
			yyv4722 = []NodeSelectorRequirement{}
			yyc4722 = true
		}
	}
	yyh4722.End()
	if yyc4722 {
		*v = yyv4722
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4726 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4727 := &yyv4726
		yy4727.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4728 := *v
	yyh4728, yyl4728 := z.DecSliceHelperStart()
	var yyc4728 bool
	if yyl4728 == 0 {
		if yyv4728 == nil {
			yyv4728 = []PodAffinityTerm{}
			yyc4728 = true
		} else if len(yyv4728) != 0 {
			yyv4728 = yyv4728[:0]
			yyc4728 = true
		}
	} else if yyl4728 > 0 {
		var yyrr4728, yyrl4728 int
		var yyrt4728 bool
		if yyl4728 > cap(yyv4728) {

			yyrg4728 := len(yyv4728) > 0
			yyv24728 := yyv4728
			yyrl4728, yyrt4728 = z.DecInferLen(yyl4728, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4728 {
				if yyrl4728 <= cap(yyv4728) {
					yyv4728 = yyv4728[:yyrl4728]
				} else {
					yyv4728 = make([]PodAffinityTerm, yyrl4728)
				}
			} else {
				yyv4728 = make([]PodAffinityTerm, yyrl4728)
			}
			yyc4728 = true
			yyrr4728 = len(yyv4728)
			if yyrg4728 {
				copy(yyv4728, yyv24728)
			}
		} else if yyl4728 != len(yyv4728) {
			yyv4728 = yyv4728[:yyl4728]
			yyc4728 = true
		}
		yyj4728 := 0
		for ; yyj4728 < yyrr4728; yyj4728++ {
			yyh4728.ElemContainerState(yyj4728)
			if r.TryDecodeAsNil() {
				yyv4728[yyj4728] = PodAffinityTerm{}
			} else {
				yyv4729 := &yyv4728[yyj4728]
				yyv4729.CodecDecodeSelf(d)
			}

		}
		if yyrt4728 {
			for ; yyj4728 < yyl4728; yyj4728++ {
				yyv4728 = append(yyv4728, PodAffinityTerm{})
				yyh4728.ElemContainerState(yyj4728)
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = PodAffinityTerm{}
				} else {
					yyv4730 := &yyv4728[yyj4728]
					yyv4730.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4728 := 0
		for ; !r.CheckBreak(); yyj4728++ {

			if yyj4728 >= len(yyv4728) {
				yyv4728 = append(yyv4728, PodAffinityTerm{}) // var yyz4728 PodAffinityTerm
				yyc4728 = true
			}
			yyh4728.ElemContainerState(yyj4728)
			if yyj4728 < len(yyv4728) {
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = PodAffinityTerm{}
				} else {
					yyv4731 := &yyv4728[yyj4728]
					yyv4731.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4728 < len(yyv4728) {
			yyv4728 = yyv4728[:yyj4728]
			yyc4728 = true
		} else if yyj4728 == 0 && yyv4728 == nil {
			yyv4728 = []PodAffinityTerm{}
			yyc4728 = true
		}
	}
	yyh4728.End()
	if yyc4728 {
		*v = yyv4728
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4732 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4733 := &yyv4732
		yy4733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4734 := *v
	yyh4734, yyl4734 := z.DecSliceHelperStart()
	var yyc4734 bool
	if yyl4734 == 0 {
		if yyv4734 == nil {
			yyv4734 = []WeightedPodAffinityTerm{}
			yyc4734 = true
		} else if len(yyv4734) != 0 {
			yyv4734 = yyv4734[:0]
			yyc4734 = true
		}
	} else if yyl4734 > 0 {
		var yyrr4734, yyrl4734 int
		var yyrt4734 bool
		if yyl4734 > cap(yyv4734) {

			yyrg4734 := len(yyv4734) > 0
			yyv24734 := yyv4734
			yyrl4734, yyrt4734 = z.DecInferLen(yyl4734, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4734 {
				if yyrl4734 <= cap(yyv4734) {
					yyv4734 = yyv4734[:yyrl4734]
				} else {
					yyv4734 = make([]WeightedPodAffinityTerm, yyrl4734)
				}
			} else {
				yyv4734 = make([]WeightedPodAffinityTerm, yyrl4734)
			}
			yyc4734 = true
			yyrr4734 = len(yyv4734)
			if yyrg4734 {
				copy(yyv4734, yyv24734)
			}
		} else if yyl4734 != len(yyv4734) {
			yyv4734 = yyv4734[:yyl4734]
			yyc4734 = true
		}
		yyj4734 := 0
		for ; yyj4734 < yyrr4734; yyj4734++ {
			yyh4734.ElemContainerState(yyj4734)
			if r.TryDecodeAsNil() {
				yyv4734[yyj4734] = WeightedPodAffinityTerm{}
			} else {
				yyv4735 := &yyv4734[yyj4734]
				yyv4735.CodecDecodeSelf(d)
			}

		}
		if yyrt4734 {
			for ; yyj4734 < yyl4734; yyj4734++ {
				yyv4734 = append(yyv4734, WeightedPodAffinityTerm{})
				yyh4734.ElemContainerState(yyj4734)
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = WeightedPodAffinityTerm{}
				} else {
					yyv4736 := &yyv4734[yyj4734]
					yyv4736.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4734 := 0
		for ; !r.CheckBreak(); yyj4734++ {

			if yyj4734 >= len(yyv4734) {
				yyv4734 = append(yyv4734, WeightedPodAffinityTerm{}) // var yyz4734 WeightedPodAffinityTerm
				yyc4734 = true
			}
			yyh4734.ElemContainerState(yyj4734)
			if yyj4734 < len(yyv4734) {
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = WeightedPodAffinityTerm{}
				} else {
					yyv4737 := &yyv4734[yyj4734]
					yyv4737.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4734 < len(yyv4734) {
			yyv4734 = yyv4734[:yyj4734]
			yyc4734 = true
		} else if yyj4734 == 0 && yyv4734 == nil {
			yyv4734 = []WeightedPodAffinityTerm{}
			yyc4734 = true
		}
	}
	yyh4734.End()
	if yyc4734 {
		*v = yyv4734
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4739 := &yyv4738
		yy4739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4740 := *v
	yyh4740, yyl4740 := z.DecSliceHelperStart()
	var yyc4740 bool
	if yyl4740 == 0 {
		if yyv4740 == nil {
			yyv4740 = []PreferredSchedulingTerm{}
			yyc4740 = true
		} else if len(yyv4740) != 0 {
			yyv4740 = yyv4740[:0]
			yyc4740 = true
		}
	} else if yyl4740 > 0 {
		var yyrr4740, yyrl4740 int
		var yyrt4740 bool
		if yyl4740 > cap(yyv4740) {

			yyrg4740 := len(yyv4740) > 0
			yyv24740 := yyv4740
			yyrl4740, yyrt4740 = z.DecInferLen(yyl4740, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4740 {
				if yyrl4740 <= cap(yyv4740) {
					yyv4740 = yyv4740[:yyrl4740]
				} else {
					yyv4740 = make([]PreferredSchedulingTerm, yyrl4740)
				}
			} else {
				yyv4740 = make([]PreferredSchedulingTerm, yyrl4740)
			}
			yyc4740 = true
			yyrr4740 = len(yyv4740)
			if yyrg4740 {
				copy(yyv4740, yyv24740)
			}
		} else if yyl4740 != len(yyv4740) {
			yyv4740 = yyv4740[:yyl4740]
			yyc4740 = true
		}
		yyj4740 := 0
		for ; yyj4740 < yyrr4740; yyj4740++ {
			yyh4740.ElemContainerState(yyj4740)
			if r.TryDecodeAsNil() {
				yyv4740[yyj4740] = PreferredSchedulingTerm{}
			} else {
				yyv4741 := &yyv4740[yyj4740]
				yyv4741.CodecDecodeSelf(d)
			}

		}
		if yyrt4740 {
			for ; yyj4740 < yyl4740; yyj4740++ {
				yyv4740 = append(yyv4740, PreferredSchedulingTerm{})
				yyh4740.ElemContainerState(yyj4740)
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = PreferredSchedulingTerm{}
				} else {
					yyv4742 := &yyv4740[yyj4740]
					yyv4742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4740 := 0
		for ; !r.CheckBreak(); yyj4740++ {

			if yyj4740 >= len(yyv4740) {
				yyv4740 = append(yyv4740, PreferredSchedulingTerm{}) // var yyz4740 PreferredSchedulingTerm
				yyc4740 = true
			}
			yyh4740.ElemContainerState(yyj4740)
			if yyj4740 < len(yyv4740) {
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = PreferredSchedulingTerm{}
				} else {
					yyv4743 := &yyv4740[yyj4740]
					yyv4743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4740 < len(yyv4740) {
			yyv4740 = yyv4740[:yyj4740]
			yyc4740 = true
		} else if yyj4740 == 0 && yyv4740 == nil {
			yyv4740 = []PreferredSchedulingTerm{}
			yyc4740 = true
		}
	}
	yyh4740.End()
	if yyc4740 {
		*v = yyv4740
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4745 := &yyv4744
		yy4745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4746 := *v
	yyh4746, yyl4746 := z.DecSliceHelperStart()
	var yyc4746 bool
	if yyl4746 == 0 {
		if yyv4746 == nil {
			yyv4746 = []Volume{}
			yyc4746 = true
		} else if len(yyv4746) != 0 {
			yyv4746 = yyv4746[:0]
			yyc4746 = true
		}
	} else if yyl4746 > 0 {
		var yyrr4746, yyrl4746 int
		var yyrt4746 bool
		if yyl4746 > cap(yyv4746) {

			yyrg4746 := len(yyv4746) > 0
			yyv24746 := yyv4746
			yyrl4746, yyrt4746 = z.DecInferLen(yyl4746, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4746 {
				if yyrl4746 <= cap(yyv4746) {
					yyv4746 = yyv4746[:yyrl4746]
				} else {
					yyv4746 = make([]Volume, yyrl4746)
				}
			} else {
				yyv4746 = make([]Volume, yyrl4746)
			}
			yyc4746 = true
			yyrr4746 = len(yyv4746)
			if yyrg4746 {
				copy(yyv4746, yyv24746)
			}
		} else if yyl4746 != len(yyv4746) {
			yyv4746 = yyv4746[:yyl4746]
			yyc4746 = true
		}
		yyj4746 := 0
		for ; yyj4746 < yyrr4746; yyj4746++ {
			yyh4746.ElemContainerState(yyj4746)
			if r.TryDecodeAsNil() {
				yyv4746[yyj4746] = Volume{}
			} else {
				yyv4747 := &yyv4746[yyj4746]
				yyv4747.CodecDecodeSelf(d)
			}

		}
		if yyrt4746 {
			for ; yyj4746 < yyl4746; yyj4746++ {
				yyv4746 = append(yyv4746, Volume{})
				yyh4746.ElemContainerState(yyj4746)
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = Volume{}
				} else {
					yyv4748 := &yyv4746[yyj4746]
					yyv4748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4746 := 0
		for ; !r.CheckBreak(); yyj4746++ {

			if yyj4746 >= len(yyv4746) {
				yyv4746 = append(yyv4746, Volume{}) // var yyz4746 Volume
				yyc4746 = true
			}
			yyh4746.ElemContainerState(yyj4746)
			if yyj4746 < len(yyv4746) {
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = Volume{}
				} else {
					yyv4749 := &yyv4746[yyj4746]
					yyv4749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4746 < len(yyv4746) {
			yyv4746 = yyv4746[:yyj4746]
			yyc4746 = true
		} else if yyj4746 == 0 && yyv4746 == nil {
			yyv4746 = []Volume{}
			yyc4746 = true
		}
	}
	yyh4746.End()
	if yyc4746 {
		*v = yyv4746
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4750 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4751 := &yyv4750
		yy4751.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4752 := *v
	yyh4752, yyl4752 := z.DecSliceHelperStart()
	var yyc4752 bool
	if yyl4752 == 0 {
		if yyv4752 == nil {
			yyv4752 = []Container{}
			yyc4752 = true
		} else if len(yyv4752) != 0 {
			yyv4752 = yyv4752[:0]
			yyc4752 = true
		}
	} else if yyl4752 > 0 {
		var yyrr4752, yyrl4752 int
		var yyrt4752 bool
		if yyl4752 > cap(yyv4752) {

			yyrg4752 := len(yyv4752) > 0
			yyv24752 := yyv4752
			yyrl4752, yyrt4752 = z.DecInferLen(yyl4752, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4752 {
				if yyrl4752 <= cap(yyv4752) {
					yyv4752 = yyv4752[:yyrl4752]
				} else {
					yyv4752 = make([]Container, yyrl4752)
				}
			} else {
				yyv4752 = make([]Container, yyrl4752)
			}
			yyc4752 = true
			yyrr4752 = len(yyv4752)
			if yyrg4752 {
				copy(yyv4752, yyv24752)
			}
		} else if yyl4752 != len(yyv4752) {
			yyv4752 = yyv4752[:yyl4752]
			yyc4752 = true
		}
		yyj4752 := 0
		for ; yyj4752 < yyrr4752; yyj4752++ {
			yyh4752.ElemContainerState(yyj4752)
			if r.TryDecodeAsNil() {
				yyv4752[yyj4752] = Container{}
			} else {
				yyv4753 := &yyv4752[yyj4752]
				yyv4753.CodecDecodeSelf(d)
			}

		}
		if yyrt4752 {
			for ; yyj4752 < yyl4752; yyj4752++ {
				yyv4752 = append(yyv4752, Container{})
				yyh4752.ElemContainerState(yyj4752)
				if r.TryDecodeAsNil() {
					yyv4752[yyj4752] = Container{}
				} else {
					yyv4754 := &yyv4752[yyj4752]
					yyv4754.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4752 := 0
		for ; !r.CheckBreak(); yyj4752++ {

			if yyj4752 >= len(yyv4752) {
				yyv4752 = append(yyv4752, Container{}) // var yyz4752 Container
				yyc4752 = true
			}
			yyh4752.ElemContainerState(yyj4752)
			if yyj4752 < len(yyv4752) {
				if r.TryDecodeAsNil() {
					yyv4752[yyj4752] = Container{}
				} else {
					yyv4755 := &yyv4752[yyj4752]
					yyv4755.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4752 < len(yyv4752) {
			yyv4752 = yyv4752[:yyj4752]
			yyc4752 = true
		} else if yyj4752 == 0 && yyv4752 == nil {
			yyv4752 = []Container{}
			yyc4752 = true
		}
	}
	yyh4752.End()
	if yyc4752 {
		*v = yyv4752
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4756 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4757 := &yyv4756
		yy4757.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4758 := *v
	yyh4758, yyl4758 := z.DecSliceHelperStart()
	var yyc4758 bool
	if yyl4758 == 0 {
		if yyv4758 == nil {
			yyv4758 = []LocalObjectReference{}
			yyc4758 = true
		} else if len(yyv4758) != 0 {
			yyv4758 = yyv4758[:0]
			yyc4758 = true
		}
	} else if yyl4758 > 0 {
		var yyrr4758, yyrl4758 int
		var yyrt4758 bool
		if yyl4758 > cap(yyv4758) {

			yyrg4758 := len(yyv4758) > 0
			yyv24758 := yyv4758
			yyrl4758, yyrt4758 = z.DecInferLen(yyl4758, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4758 {
				if yyrl4758 <= cap(yyv4758) {
					yyv4758 = yyv4758[:yyrl4758]
				} else {
					yyv4758 = make([]LocalObjectReference, yyrl4758)
				}
			} else {
				yyv4758 = make([]LocalObjectReference, yyrl4758)
			}
			yyc4758 = true
			yyrr4758 = len(yyv4758)
			if yyrg4758 {
				copy(yyv4758, yyv24758)
			}
		} else if yyl4758 != len(yyv4758) {
			yyv4758 = yyv4758[:yyl4758]
			yyc4758 = true
		}
		yyj4758 := 0
		for ; yyj4758 < yyrr4758; yyj4758++ {
			yyh4758.ElemContainerState(yyj4758)
			if r.TryDecodeAsNil() {
				yyv4758[yyj4758] = LocalObjectReference{}
			} else {
				yyv4759 := &yyv4758[yyj4758]
				yyv4759.CodecDecodeSelf(d)
			}

		}
		if yyrt4758 {
			for ; yyj4758 < yyl4758; yyj4758++ {
				yyv4758 = append(yyv4758, LocalObjectReference{})
				yyh4758.ElemContainerState(yyj4758)
				if r.TryDecodeAsNil() {
					yyv4758[yyj4758] = LocalObjectReference{}
				} else {
					yyv4760 := &yyv4758[yyj4758]
					yyv4760.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4758 := 0
		for ; !r.CheckBreak(); yyj4758++ {

			if yyj4758 >= len(yyv4758) {
				yyv4758 = append(yyv4758, LocalObjectReference{}) // var yyz4758 LocalObjectReference
				yyc4758 = true
			}
			yyh4758.ElemContainerState(yyj4758)
			if yyj4758 < len(yyv4758) {
				if r.TryDecodeAsNil() {
					yyv4758[yyj4758] = LocalObjectReference{}
				} else {
					yyv4761 := &yyv4758[yyj4758]
					yyv4761.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4758 < len(yyv4758) {
			yyv4758 = yyv4758[:yyj4758]
			yyc4758 = true
		} else if yyj4758 == 0 && yyv4758 == nil {
			yyv4758 = []LocalObjectReference{}
			yyc4758 = true
		}
	}
	yyh4758.End()
	if yyc4758 {
		*v = yyv4758
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4762 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4763 := &yyv4762
		yy4763.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4764 := *v
	yyh4764, yyl4764 := z.DecSliceHelperStart()
	var yyc4764 bool
	if yyl4764 == 0 {
		if yyv4764 == nil {
			yyv4764 = []PodCondition{}
			yyc4764 = true
		} else if len(yyv4764) != 0 {
			yyv4764 = yyv4764[:0]
			yyc4764 = true
		}
	} else if yyl4764 > 0 {
		var yyrr4764, yyrl4764 int
		var yyrt4764 bool
		if yyl4764 > cap(yyv4764) {

			yyrg4764 := len(yyv4764) > 0
			yyv24764 := yyv4764
			yyrl4764, yyrt4764 = z.DecInferLen(yyl4764, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4764 {
				if yyrl4764 <= cap(yyv4764) {
					yyv4764 = yyv4764[:yyrl4764]
				} else {
					yyv4764 = make([]PodCondition, yyrl4764)
				}
			} else {
				yyv4764 = make([]PodCondition, yyrl4764)
			}
			yyc4764 = true
			yyrr4764 = len(yyv4764)
			if yyrg4764 {
				copy(yyv4764, yyv24764)
			}
		} else if yyl4764 != len(yyv4764) {
			yyv4764 = yyv4764[:yyl4764]
			yyc4764 = true
		}
		yyj4764 := 0
		for ; yyj4764 < yyrr4764; yyj4764++ {
			yyh4764.ElemContainerState(yyj4764)
			if r.TryDecodeAsNil() {
				yyv4764[yyj4764] = PodCondition{}
			} else {
				yyv4765 := &yyv4764[yyj4764]
				yyv4765.CodecDecodeSelf(d)
			}

		}
		if yyrt4764 {
			for ; yyj4764 < yyl4764; yyj4764++ {
				yyv4764 = append(yyv4764, PodCondition{})
				yyh4764.ElemContainerState(yyj4764)
				if r.TryDecodeAsNil() {
					yyv4764[yyj4764] = PodCondition{}
				} else {
					yyv4766 := &yyv4764[yyj4764]
					yyv4766.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4764 := 0
		for ; !r.CheckBreak(); yyj4764++ {

			if yyj4764 >= len(yyv4764) {
				yyv4764 = append(yyv4764, PodCondition{}) // var yyz4764 PodCondition
				yyc4764 = true
			}
			yyh4764.ElemContainerState(yyj4764)
			if yyj4764 < len(yyv4764) {
				if r.TryDecodeAsNil() {
					yyv4764[yyj4764] = PodCondition{}
				} else {
					yyv4767 := &yyv4764[yyj4764]
					yyv4767.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4764 < len(yyv4764) {
			yyv4764 = yyv4764[:yyj4764]
			yyc4764 = true
		} else if yyj4764 == 0 && yyv4764 == nil {
			yyv4764 = []PodCondition{}
			yyc4764 = true
		}
	}
	yyh4764.End()
	if yyc4764 {
		*v = yyv4764
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4768 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4769 := &yyv4768
		yy4769.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4770 := *v
	yyh4770, yyl4770 := z.DecSliceHelperStart()
	var yyc4770 bool
	if yyl4770 == 0 {
		if yyv4770 == nil {
			yyv4770 = []ContainerStatus{}
			yyc4770 = true
		} else if len(yyv4770) != 0 {
			yyv4770 = yyv4770[:0]
			yyc4770 = true
		}
	} else if yyl4770 > 0 {
		var yyrr4770, yyrl4770 int
		var yyrt4770 bool
		if yyl4770 > cap(yyv4770) {

			yyrg4770 := len(yyv4770) > 0
			yyv24770 := yyv4770
			yyrl4770, yyrt4770 = z.DecInferLen(yyl4770, z.DecBasicHandle().MaxInitLen, 144)
			if yyrt4770 {
				if yyrl4770 <= cap(yyv4770) {
					yyv4770 = yyv4770[:yyrl4770]
				} else {
					yyv4770 = make([]ContainerStatus, yyrl4770)
				}
			} else {
				yyv4770 = make([]ContainerStatus, yyrl4770)
			}
			yyc4770 = true
			yyrr4770 = len(yyv4770)
			if yyrg4770 {
				copy(yyv4770, yyv24770)
			}
		} else if yyl4770 != len(yyv4770) {
			yyv4770 = yyv4770[:yyl4770]
			yyc4770 = true
		}
		yyj4770 := 0
		for ; yyj4770 < yyrr4770; yyj4770++ {
			yyh4770.ElemContainerState(yyj4770)
			if r.TryDecodeAsNil() {
				yyv4770[yyj4770] = ContainerStatus{}
			} else {
				yyv4771 := &yyv4770[yyj4770]
				yyv4771.CodecDecodeSelf(d)
			}

		}
		if yyrt4770 {
			for ; yyj4770 < yyl4770; yyj4770++ {
				yyv4770 = append(yyv4770, ContainerStatus{})
				yyh4770.ElemContainerState(yyj4770)
				if r.TryDecodeAsNil() {
					yyv4770[yyj4770] = ContainerStatus{}
				} else {
					yyv4772 := &yyv4770[yyj4770]
					yyv4772.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4770 := 0
		for ; !r.CheckBreak(); yyj4770++ {

			if yyj4770 >= len(yyv4770) {
				yyv4770 = append(yyv4770, ContainerStatus{}) // var yyz4770 ContainerStatus
				yyc4770 = true
			}
			yyh4770.ElemContainerState(yyj4770)
			if yyj4770 < len(yyv4770) {
				if r.TryDecodeAsNil() {
					yyv4770[yyj4770] = ContainerStatus{}
				} else {
					yyv4773 := &yyv4770[yyj4770]
					yyv4773.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4770 < len(yyv4770) {
			yyv4770 = yyv4770[:yyj4770]
			yyc4770 = true
		} else if yyj4770 == 0 && yyv4770 == nil {
			yyv4770 = []ContainerStatus{}
			yyc4770 = true
		}
	}
	yyh4770.End()
	if yyc4770 {
		*v = yyv4770
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4775 := &yyv4774
		yy4775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4776 := *v
	yyh4776, yyl4776 := z.DecSliceHelperStart()
	var yyc4776 bool
	if yyl4776 == 0 {
		if yyv4776 == nil {
			yyv4776 = []PodTemplate{}
			yyc4776 = true
		} else if len(yyv4776) != 0 {
			yyv4776 = yyv4776[:0]
			yyc4776 = true
		}
	} else if yyl4776 > 0 {
		var yyrr4776, yyrl4776 int
		var yyrt4776 bool
		if yyl4776 > cap(yyv4776) {

			yyrg4776 := len(yyv4776) > 0
			yyv24776 := yyv4776
			yyrl4776, yyrt4776 = z.DecInferLen(yyl4776, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4776 {
				if yyrl4776 <= cap(yyv4776) {
					yyv4776 = yyv4776[:yyrl4776]
				} else {
					yyv4776 = make([]PodTemplate, yyrl4776)
				}
			} else {
				yyv4776 = make([]PodTemplate, yyrl4776)
			}
			yyc4776 = true
			yyrr4776 = len(yyv4776)
			if yyrg4776 {
				copy(yyv4776, yyv24776)
			}
		} else if yyl4776 != len(yyv4776) {
			yyv4776 = yyv4776[:yyl4776]
			yyc4776 = true
		}
		yyj4776 := 0
		for ; yyj4776 < yyrr4776; yyj4776++ {
			yyh4776.ElemContainerState(yyj4776)
			if r.TryDecodeAsNil() {
				yyv4776[yyj4776] = PodTemplate{}
			} else {
				yyv4777 := &yyv4776[yyj4776]
				yyv4777.CodecDecodeSelf(d)
			}

		}
		if yyrt4776 {
			for ; yyj4776 < yyl4776; yyj4776++ {
				yyv4776 = append(yyv4776, PodTemplate{})
				yyh4776.ElemContainerState(yyj4776)
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = PodTemplate{}
				} else {
					yyv4778 := &yyv4776[yyj4776]
					yyv4778.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4776 := 0
		for ; !r.CheckBreak(); yyj4776++ {

			if yyj4776 >= len(yyv4776) {
				yyv4776 = append(yyv4776, PodTemplate{}) // var yyz4776 PodTemplate
				yyc4776 = true
			}
			yyh4776.ElemContainerState(yyj4776)
			if yyj4776 < len(yyv4776) {
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = PodTemplate{}
				} else {
					yyv4779 := &yyv4776[yyj4776]
					yyv4779.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4776 < len(yyv4776) {
			yyv4776 = yyv4776[:yyj4776]
			yyc4776 = true
		} else if yyj4776 == 0 && yyv4776 == nil {
			yyv4776 = []PodTemplate{}
			yyc4776 = true
		}
	}
	yyh4776.End()
	if yyc4776 {
		*v = yyv4776
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4780 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4781 := &yyv4780
		yy4781.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4782 := *v
	yyh4782, yyl4782 := z.DecSliceHelperStart()
	var yyc4782 bool
	if yyl4782 == 0 {
		if yyv4782 == nil {
			yyv4782 = []ReplicationController{}
			yyc4782 = true
		} else if len(yyv4782) != 0 {
			yyv4782 = yyv4782[:0]
			yyc4782 = true
		}
	} else if yyl4782 > 0 {
		var yyrr4782, yyrl4782 int
		var yyrt4782 bool
		if yyl4782 > cap(yyv4782) {

			yyrg4782 := len(yyv4782) > 0
			yyv24782 := yyv4782
			yyrl4782, yyrt4782 = z.DecInferLen(yyl4782, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4782 {
				if yyrl4782 <= cap(yyv4782) {
					yyv4782 = yyv4782[:yyrl4782]
				} else {
					yyv4782 = make([]ReplicationController, yyrl4782)
				}
			} else {
				yyv4782 = make([]ReplicationController, yyrl4782)
			}
			yyc4782 = true
			yyrr4782 = len(yyv4782)
			if yyrg4782 {
				copy(yyv4782, yyv24782)
			}
		} else if yyl4782 != len(yyv4782) {
			yyv4782 = yyv4782[:yyl4782]
			yyc4782 = true
		}
		yyj4782 := 0
		for ; yyj4782 < yyrr4782; yyj4782++ {
			yyh4782.ElemContainerState(yyj4782)
			if r.TryDecodeAsNil() {
				yyv4782[yyj4782] = ReplicationController{}
			} else {
				yyv4783 := &yyv4782[yyj4782]
				yyv4783.CodecDecodeSelf(d)
			}

		}
		if yyrt4782 {
			for ; yyj4782 < yyl4782; yyj4782++ {
				yyv4782 = append(yyv4782, ReplicationController{})
				yyh4782.ElemContainerState(yyj4782)
				if r.TryDecodeAsNil() {
					yyv4782[yyj4782] = ReplicationController{}
				} else {
					yyv4784 := &yyv4782[yyj4782]
					yyv4784.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4782 := 0
		for ; !r.CheckBreak(); yyj4782++ {

			if yyj4782 >= len(yyv4782) {
				yyv4782 = append(yyv4782, ReplicationController{}) // var yyz4782 ReplicationController
				yyc4782 = true
			}
			yyh4782.ElemContainerState(yyj4782)
			if yyj4782 < len(yyv4782) {
				if r.TryDecodeAsNil() {
					yyv4782[yyj4782] = ReplicationController{}
				} else {
					yyv4785 := &yyv4782[yyj4782]
					yyv4785.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4782 < len(yyv4782) {
			yyv4782 = yyv4782[:yyj4782]
			yyc4782 = true
		} else if yyj4782 == 0 && yyv4782 == nil {
			yyv4782 = []ReplicationController{}
			yyc4782 = true
		}
	}
	yyh4782.End()
	if yyc4782 {
		*v = yyv4782
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4786 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4787 := &yyv4786
		yy4787.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4788 := *v
	yyh4788, yyl4788 := z.DecSliceHelperStart()
	var yyc4788 bool
	if yyl4788 == 0 {
		if yyv4788 == nil {
			yyv4788 = []Service{}
			yyc4788 = true
		} else if len(yyv4788) != 0 {
			yyv4788 = yyv4788[:0]
			yyc4788 = true
		}
	} else if yyl4788 > 0 {
		var yyrr4788, yyrl4788 int
		var yyrt4788 bool
		if yyl4788 > cap(yyv4788) {

			yyrg4788 := len(yyv4788) > 0
			yyv24788 := yyv4788
			yyrl4788, yyrt4788 = z.DecInferLen(yyl4788, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4788 {
				if yyrl4788 <= cap(yyv4788) {
					yyv4788 = yyv4788[:yyrl4788]
				} else {
					yyv4788 = make([]Service, yyrl4788)
				}
			} else {
				yyv4788 = make([]Service, yyrl4788)
			}
			yyc4788 = true
			yyrr4788 = len(yyv4788)
			if yyrg4788 {
				copy(yyv4788, yyv24788)
			}
		} else if yyl4788 != len(yyv4788) {
			yyv4788 = yyv4788[:yyl4788]
			yyc4788 = true
		}
		yyj4788 := 0
		for ; yyj4788 < yyrr4788; yyj4788++ {
			yyh4788.ElemContainerState(yyj4788)
			if r.TryDecodeAsNil() {
				yyv4788[yyj4788] = Service{}
			} else {
				yyv4789 := &yyv4788[yyj4788]
				yyv4789.CodecDecodeSelf(d)
			}

		}
		if yyrt4788 {
			for ; yyj4788 < yyl4788; yyj4788++ {
				yyv4788 = append(yyv4788, Service{})
				yyh4788.ElemContainerState(yyj4788)
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = Service{}
				} else {
					yyv4790 := &yyv4788[yyj4788]
					yyv4790.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4788 := 0
		for ; !r.CheckBreak(); yyj4788++ {

			if yyj4788 >= len(yyv4788) {
				yyv4788 = append(yyv4788, Service{}) // var yyz4788 Service
				yyc4788 = true
			}
			yyh4788.ElemContainerState(yyj4788)
			if yyj4788 < len(yyv4788) {
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = Service{}
				} else {
					yyv4791 := &yyv4788[yyj4788]
					yyv4791.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4788 < len(yyv4788) {
			yyv4788 = yyv4788[:yyj4788]
			yyc4788 = true
		} else if yyj4788 == 0 && yyv4788 == nil {
			yyv4788 = []Service{}
			yyc4788 = true
		}
	}
	yyh4788.End()
	if yyc4788 {
		*v = yyv4788
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4792 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4793 := &yyv4792
		yy4793.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4794 := *v
	yyh4794, yyl4794 := z.DecSliceHelperStart()
	var yyc4794 bool
	if yyl4794 == 0 {
		if yyv4794 == nil {
			yyv4794 = []LoadBalancerIngress{}
			yyc4794 = true
		} else if len(yyv4794) != 0 {
			yyv4794 = yyv4794[:0]
			yyc4794 = true
		}
	} else if yyl4794 > 0 {
		var yyrr4794, yyrl4794 int
		var yyrt4794 bool
		if yyl4794 > cap(yyv4794) {

			yyrg4794 := len(yyv4794) > 0
			yyv24794 := yyv4794
			yyrl4794, yyrt4794 = z.DecInferLen(yyl4794, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4794 {
				if yyrl4794 <= cap(yyv4794) {
					yyv4794 = yyv4794[:yyrl4794]
				} else {
					yyv4794 = make([]LoadBalancerIngress, yyrl4794)
				}
			} else {
				yyv4794 = make([]LoadBalancerIngress, yyrl4794)
			}
			yyc4794 = true
			yyrr4794 = len(yyv4794)
			if yyrg4794 {
				copy(yyv4794, yyv24794)
			}
		} else if yyl4794 != len(yyv4794) {
			yyv4794 = yyv4794[:yyl4794]
			yyc4794 = true
		}
		yyj4794 := 0
		for ; yyj4794 < yyrr4794; yyj4794++ {
			yyh4794.ElemContainerState(yyj4794)
			if r.TryDecodeAsNil() {
				yyv4794[yyj4794] = LoadBalancerIngress{}
			} else {
				yyv4795 := &yyv4794[yyj4794]
				yyv4795.CodecDecodeSelf(d)
			}

		}
		if yyrt4794 {
			for ; yyj4794 < yyl4794; yyj4794++ {
				yyv4794 = append(yyv4794, LoadBalancerIngress{})
				yyh4794.ElemContainerState(yyj4794)
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = LoadBalancerIngress{}
				} else {
					yyv4796 := &yyv4794[yyj4794]
					yyv4796.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4794 := 0
		for ; !r.CheckBreak(); yyj4794++ {

			if yyj4794 >= len(yyv4794) {
				yyv4794 = append(yyv4794, LoadBalancerIngress{}) // var yyz4794 LoadBalancerIngress
				yyc4794 = true
			}
			yyh4794.ElemContainerState(yyj4794)
			if yyj4794 < len(yyv4794) {
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = LoadBalancerIngress{}
				} else {
					yyv4797 := &yyv4794[yyj4794]
					yyv4797.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4794 < len(yyv4794) {
			yyv4794 = yyv4794[:yyj4794]
			yyc4794 = true
		} else if yyj4794 == 0 && yyv4794 == nil {
			yyv4794 = []LoadBalancerIngress{}
			yyc4794 = true
		}
	}
	yyh4794.End()
	if yyc4794 {
		*v = yyv4794
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4798 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4799 := &yyv4798
		yy4799.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4800 := *v
	yyh4800, yyl4800 := z.DecSliceHelperStart()
	var yyc4800 bool
	if yyl4800 == 0 {
		if yyv4800 == nil {
			yyv4800 = []ServicePort{}
			yyc4800 = true
		} else if len(yyv4800) != 0 {
			yyv4800 = yyv4800[:0]
			yyc4800 = true
		}
	} else if yyl4800 > 0 {
		var yyrr4800, yyrl4800 int
		var yyrt4800 bool
		if yyl4800 > cap(yyv4800) {

			yyrg4800 := len(yyv4800) > 0
			yyv24800 := yyv4800
			yyrl4800, yyrt4800 = z.DecInferLen(yyl4800, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4800 {
				if yyrl4800 <= cap(yyv4800) {
					yyv4800 = yyv4800[:yyrl4800]
				} else {
					yyv4800 = make([]ServicePort, yyrl4800)
				}
			} else {
				yyv4800 = make([]ServicePort, yyrl4800)
			}
			yyc4800 = true
			yyrr4800 = len(yyv4800)
			if yyrg4800 {
				copy(yyv4800, yyv24800)
			}
		} else if yyl4800 != len(yyv4800) {
			yyv4800 = yyv4800[:yyl4800]
			yyc4800 = true
		}
		yyj4800 := 0
		for ; yyj4800 < yyrr4800; yyj4800++ {
			yyh4800.ElemContainerState(yyj4800)
			if r.TryDecodeAsNil() {
				yyv4800[yyj4800] = ServicePort{}
			} else {
				yyv4801 := &yyv4800[yyj4800]
				yyv4801.CodecDecodeSelf(d)
			}

		}
		if yyrt4800 {
			for ; yyj4800 < yyl4800; yyj4800++ {
				yyv4800 = append(yyv4800, ServicePort{})
				yyh4800.ElemContainerState(yyj4800)
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = ServicePort{}
				} else {
					yyv4802 := &yyv4800[yyj4800]
					yyv4802.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4800 := 0
		for ; !r.CheckBreak(); yyj4800++ {

			if yyj4800 >= len(yyv4800) {
				yyv4800 = append(yyv4800, ServicePort{}) // var yyz4800 ServicePort
				yyc4800 = true
			}
			yyh4800.ElemContainerState(yyj4800)
			if yyj4800 < len(yyv4800) {
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = ServicePort{}
				} else {
					yyv4803 := &yyv4800[yyj4800]
					yyv4803.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4800 < len(yyv4800) {
			yyv4800 = yyv4800[:yyj4800]
			yyc4800 = true
		} else if yyj4800 == 0 && yyv4800 == nil {
			yyv4800 = []ServicePort{}
			yyc4800 = true
		}
	}
	yyh4800.End()
	if yyc4800 {
		*v = yyv4800
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4804 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4805 := &yyv4804
		yy4805.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4806 := *v
	yyh4806, yyl4806 := z.DecSliceHelperStart()
	var yyc4806 bool
	if yyl4806 == 0 {
		if yyv4806 == nil {
			yyv4806 = []ObjectReference{}
			yyc4806 = true
		} else if len(yyv4806) != 0 {
			yyv4806 = yyv4806[:0]
			yyc4806 = true
		}
	} else if yyl4806 > 0 {
		var yyrr4806, yyrl4806 int
		var yyrt4806 bool
		if yyl4806 > cap(yyv4806) {

			yyrg4806 := len(yyv4806) > 0
			yyv24806 := yyv4806
			yyrl4806, yyrt4806 = z.DecInferLen(yyl4806, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4806 {
				if yyrl4806 <= cap(yyv4806) {
					yyv4806 = yyv4806[:yyrl4806]
				} else {
					yyv4806 = make([]ObjectReference, yyrl4806)
				}
			} else {
				yyv4806 = make([]ObjectReference, yyrl4806)
			}
			yyc4806 = true
			yyrr4806 = len(yyv4806)
			if yyrg4806 {
				copy(yyv4806, yyv24806)
			}
		} else if yyl4806 != len(yyv4806) {
			yyv4806 = yyv4806[:yyl4806]
			yyc4806 = true
		}
		yyj4806 := 0
		for ; yyj4806 < yyrr4806; yyj4806++ {
			yyh4806.ElemContainerState(yyj4806)
			if r.TryDecodeAsNil() {
				yyv4806[yyj4806] = ObjectReference{}
			} else {
				yyv4807 := &yyv4806[yyj4806]
				yyv4807.CodecDecodeSelf(d)
			}

		}
		if yyrt4806 {
			for ; yyj4806 < yyl4806; yyj4806++ {
				yyv4806 = append(yyv4806, ObjectReference{})
				yyh4806.ElemContainerState(yyj4806)
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = ObjectReference{}
				} else {
					yyv4808 := &yyv4806[yyj4806]
					yyv4808.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4806 := 0
		for ; !r.CheckBreak(); yyj4806++ {

			if yyj4806 >= len(yyv4806) {
				yyv4806 = append(yyv4806, ObjectReference{}) // var yyz4806 ObjectReference
				yyc4806 = true
			}
			yyh4806.ElemContainerState(yyj4806)
			if yyj4806 < len(yyv4806) {
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = ObjectReference{}
				} else {
					yyv4809 := &yyv4806[yyj4806]
					yyv4809.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4806 < len(yyv4806) {
			yyv4806 = yyv4806[:yyj4806]
			yyc4806 = true
		} else if yyj4806 == 0 && yyv4806 == nil {
			yyv4806 = []ObjectReference{}
			yyc4806 = true
		}
	}
	yyh4806.End()
	if yyc4806 {
		*v = yyv4806
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4810 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4811 := &yyv4810
		yy4811.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4812 := *v
	yyh4812, yyl4812 := z.DecSliceHelperStart()
	var yyc4812 bool
	if yyl4812 == 0 {
		if yyv4812 == nil {
			yyv4812 = []ServiceAccount{}
			yyc4812 = true
		} else if len(yyv4812) != 0 {
			yyv4812 = yyv4812[:0]
			yyc4812 = true
		}
	} else if yyl4812 > 0 {
		var yyrr4812, yyrl4812 int
		var yyrt4812 bool
		if yyl4812 > cap(yyv4812) {

			yyrg4812 := len(yyv4812) > 0
			yyv24812 := yyv4812
			yyrl4812, yyrt4812 = z.DecInferLen(yyl4812, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4812 {
				if yyrl4812 <= cap(yyv4812) {
					yyv4812 = yyv4812[:yyrl4812]
				} else {
					yyv4812 = make([]ServiceAccount, yyrl4812)
				}
			} else {
				yyv4812 = make([]ServiceAccount, yyrl4812)
			}
			yyc4812 = true
			yyrr4812 = len(yyv4812)
			if yyrg4812 {
				copy(yyv4812, yyv24812)
			}
		} else if yyl4812 != len(yyv4812) {
			yyv4812 = yyv4812[:yyl4812]
			yyc4812 = true
		}
		yyj4812 := 0
		for ; yyj4812 < yyrr4812; yyj4812++ {
			yyh4812.ElemContainerState(yyj4812)
			if r.TryDecodeAsNil() {
				yyv4812[yyj4812] = ServiceAccount{}
			} else {
				yyv4813 := &yyv4812[yyj4812]
				yyv4813.CodecDecodeSelf(d)
			}

		}
		if yyrt4812 {
			for ; yyj4812 < yyl4812; yyj4812++ {
				yyv4812 = append(yyv4812, ServiceAccount{})
				yyh4812.ElemContainerState(yyj4812)
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = ServiceAccount{}
				} else {
					yyv4814 := &yyv4812[yyj4812]
					yyv4814.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4812 := 0
		for ; !r.CheckBreak(); yyj4812++ {

			if yyj4812 >= len(yyv4812) {
				yyv4812 = append(yyv4812, ServiceAccount{}) // var yyz4812 ServiceAccount
				yyc4812 = true
			}
			yyh4812.ElemContainerState(yyj4812)
			if yyj4812 < len(yyv4812) {
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = ServiceAccount{}
				} else {
					yyv4815 := &yyv4812[yyj4812]
					yyv4815.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4812 < len(yyv4812) {
			yyv4812 = yyv4812[:yyj4812]
			yyc4812 = true
		} else if yyj4812 == 0 && yyv4812 == nil {
			yyv4812 = []ServiceAccount{}
			yyc4812 = true
		}
	}
	yyh4812.End()
	if yyc4812 {
		*v = yyv4812
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4816 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4817 := &yyv4816
		yy4817.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4818 := *v
	yyh4818, yyl4818 := z.DecSliceHelperStart()
	var yyc4818 bool
	if yyl4818 == 0 {
		if yyv4818 == nil {
			yyv4818 = []EndpointSubset{}
			yyc4818 = true
		} else if len(yyv4818) != 0 {
			yyv4818 = yyv4818[:0]
			yyc4818 = true
		}
	} else if yyl4818 > 0 {
		var yyrr4818, yyrl4818 int
		var yyrt4818 bool
		if yyl4818 > cap(yyv4818) {

			yyrg4818 := len(yyv4818) > 0
			yyv24818 := yyv4818
			yyrl4818, yyrt4818 = z.DecInferLen(yyl4818, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4818 {
				if yyrl4818 <= cap(yyv4818) {
					yyv4818 = yyv4818[:yyrl4818]
				} else {
					yyv4818 = make([]EndpointSubset, yyrl4818)
				}
			} else {
				yyv4818 = make([]EndpointSubset, yyrl4818)
			}
			yyc4818 = true
			yyrr4818 = len(yyv4818)
			if yyrg4818 {
				copy(yyv4818, yyv24818)
			}
		} else if yyl4818 != len(yyv4818) {
			yyv4818 = yyv4818[:yyl4818]
			yyc4818 = true
		}
		yyj4818 := 0
		for ; yyj4818 < yyrr4818; yyj4818++ {
			yyh4818.ElemContainerState(yyj4818)
			if r.TryDecodeAsNil() {
				yyv4818[yyj4818] = EndpointSubset{}
			} else {
				yyv4819 := &yyv4818[yyj4818]
				yyv4819.CodecDecodeSelf(d)
			}

		}
		if yyrt4818 {
			for ; yyj4818 < yyl4818; yyj4818++ {
				yyv4818 = append(yyv4818, EndpointSubset{})
				yyh4818.ElemContainerState(yyj4818)
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = EndpointSubset{}
				} else {
					yyv4820 := &yyv4818[yyj4818]
					yyv4820.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4818 := 0
		for ; !r.CheckBreak(); yyj4818++ {

			if yyj4818 >= len(yyv4818) {
				yyv4818 = append(yyv4818, EndpointSubset{}) // var yyz4818 EndpointSubset
				yyc4818 = true
			}
			yyh4818.ElemContainerState(yyj4818)
			if yyj4818 < len(yyv4818) {
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = EndpointSubset{}
				} else {
					yyv4821 := &yyv4818[yyj4818]
					yyv4821.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4818 < len(yyv4818) {
			yyv4818 = yyv4818[:yyj4818]
			yyc4818 = true
		} else if yyj4818 == 0 && yyv4818 == nil {
			yyv4818 = []EndpointSubset{}
			yyc4818 = true
		}
	}
	yyh4818.End()
	if yyc4818 {
		*v = yyv4818
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4822 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4823 := &yyv4822
		yy4823.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4824 := *v
	yyh4824, yyl4824 := z.DecSliceHelperStart()
	var yyc4824 bool
	if yyl4824 == 0 {
		if yyv4824 == nil {
			yyv4824 = []EndpointAddress{}
			yyc4824 = true
		} else if len(yyv4824) != 0 {
			yyv4824 = yyv4824[:0]
			yyc4824 = true
		}
	} else if yyl4824 > 0 {
		var yyrr4824, yyrl4824 int
		var yyrt4824 bool
		if yyl4824 > cap(yyv4824) {

			yyrg4824 := len(yyv4824) > 0
			yyv24824 := yyv4824
			yyrl4824, yyrt4824 = z.DecInferLen(yyl4824, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4824 {
				if yyrl4824 <= cap(yyv4824) {
					yyv4824 = yyv4824[:yyrl4824]
				} else {
					yyv4824 = make([]EndpointAddress, yyrl4824)
				}
			} else {
				yyv4824 = make([]EndpointAddress, yyrl4824)
			}
			yyc4824 = true
			yyrr4824 = len(yyv4824)
			if yyrg4824 {
				copy(yyv4824, yyv24824)
			}
		} else if yyl4824 != len(yyv4824) {
			yyv4824 = yyv4824[:yyl4824]
			yyc4824 = true
		}
		yyj4824 := 0
		for ; yyj4824 < yyrr4824; yyj4824++ {
			yyh4824.ElemContainerState(yyj4824)
			if r.TryDecodeAsNil() {
				yyv4824[yyj4824] = EndpointAddress{}
			} else {
				yyv4825 := &yyv4824[yyj4824]
				yyv4825.CodecDecodeSelf(d)
			}

		}
		if yyrt4824 {
			for ; yyj4824 < yyl4824; yyj4824++ {
				yyv4824 = append(yyv4824, EndpointAddress{})
				yyh4824.ElemContainerState(yyj4824)
				if r.TryDecodeAsNil() {
					yyv4824[yyj4824] = EndpointAddress{}
				} else {
					yyv4826 := &yyv4824[yyj4824]
					yyv4826.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4824 := 0
		for ; !r.CheckBreak(); yyj4824++ {

			if yyj4824 >= len(yyv4824) {
				yyv4824 = append(yyv4824, EndpointAddress{}) // var yyz4824 EndpointAddress
				yyc4824 = true
			}
			yyh4824.ElemContainerState(yyj4824)
			if yyj4824 < len(yyv4824) {
				if r.TryDecodeAsNil() {
					yyv4824[yyj4824] = EndpointAddress{}
				} else {
					yyv4827 := &yyv4824[yyj4824]
					yyv4827.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4824 < len(yyv4824) {
			yyv4824 = yyv4824[:yyj4824]
			yyc4824 = true
		} else if yyj4824 == 0 && yyv4824 == nil {
			yyv4824 = []EndpointAddress{}
			yyc4824 = true
		}
	}
	yyh4824.End()
	if yyc4824 {
		*v = yyv4824
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4828 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4829 := &yyv4828
		yy4829.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4830 := *v
	yyh4830, yyl4830 := z.DecSliceHelperStart()
	var yyc4830 bool
	if yyl4830 == 0 {
		if yyv4830 == nil {
			yyv4830 = []EndpointPort{}
			yyc4830 = true
		} else if len(yyv4830) != 0 {
			yyv4830 = yyv4830[:0]
			yyc4830 = true
		}
	} else if yyl4830 > 0 {
		var yyrr4830, yyrl4830 int
		var yyrt4830 bool
		if yyl4830 > cap(yyv4830) {

			yyrg4830 := len(yyv4830) > 0
			yyv24830 := yyv4830
			yyrl4830, yyrt4830 = z.DecInferLen(yyl4830, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4830 {
				if yyrl4830 <= cap(yyv4830) {
					yyv4830 = yyv4830[:yyrl4830]
				} else {
					yyv4830 = make([]EndpointPort, yyrl4830)
				}
			} else {
				yyv4830 = make([]EndpointPort, yyrl4830)
			}
			yyc4830 = true
			yyrr4830 = len(yyv4830)
			if yyrg4830 {
				copy(yyv4830, yyv24830)
			}
		} else if yyl4830 != len(yyv4830) {
			yyv4830 = yyv4830[:yyl4830]
			yyc4830 = true
		}
		yyj4830 := 0
		for ; yyj4830 < yyrr4830; yyj4830++ {
			yyh4830.ElemContainerState(yyj4830)
			if r.TryDecodeAsNil() {
				yyv4830[yyj4830] = EndpointPort{}
			} else {
				yyv4831 := &yyv4830[yyj4830]
				yyv4831.CodecDecodeSelf(d)
			}

		}
		if yyrt4830 {
			for ; yyj4830 < yyl4830; yyj4830++ {
				yyv4830 = append(yyv4830, EndpointPort{})
				yyh4830.ElemContainerState(yyj4830)
				if r.TryDecodeAsNil() {
					yyv4830[yyj4830] = EndpointPort{}
				} else {
					yyv4832 := &yyv4830[yyj4830]
					yyv4832.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4830 := 0
		for ; !r.CheckBreak(); yyj4830++ {

			if yyj4830 >= len(yyv4830) {
				yyv4830 = append(yyv4830, EndpointPort{}) // var yyz4830 EndpointPort
				yyc4830 = true
			}
			yyh4830.ElemContainerState(yyj4830)
			if yyj4830 < len(yyv4830) {
				if r.TryDecodeAsNil() {
					yyv4830[yyj4830] = EndpointPort{}
				} else {
					yyv4833 := &yyv4830[yyj4830]
					yyv4833.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4830 < len(yyv4830) {
			yyv4830 = yyv4830[:yyj4830]
			yyc4830 = true
		} else if yyj4830 == 0 && yyv4830 == nil {
			yyv4830 = []EndpointPort{}
			yyc4830 = true
		}
	}
	yyh4830.End()
	if yyc4830 {
		*v = yyv4830
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4834 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4835 := &yyv4834
		yy4835.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4836 := *v
	yyh4836, yyl4836 := z.DecSliceHelperStart()
	var yyc4836 bool
	if yyl4836 == 0 {
		if yyv4836 == nil {
			yyv4836 = []Endpoints{}
			yyc4836 = true
		} else if len(yyv4836) != 0 {
			yyv4836 = yyv4836[:0]
			yyc4836 = true
		}
	} else if yyl4836 > 0 {
		var yyrr4836, yyrl4836 int
		var yyrt4836 bool
		if yyl4836 > cap(yyv4836) {

			yyrg4836 := len(yyv4836) > 0
			yyv24836 := yyv4836
			yyrl4836, yyrt4836 = z.DecInferLen(yyl4836, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4836 {
				if yyrl4836 <= cap(yyv4836) {
					yyv4836 = yyv4836[:yyrl4836]
				} else {
					yyv4836 = make([]Endpoints, yyrl4836)
				}
			} else {
				yyv4836 = make([]Endpoints, yyrl4836)
			}
			yyc4836 = true
			yyrr4836 = len(yyv4836)
			if yyrg4836 {
				copy(yyv4836, yyv24836)
			}
		} else if yyl4836 != len(yyv4836) {
			yyv4836 = yyv4836[:yyl4836]
			yyc4836 = true
		}
		yyj4836 := 0
		for ; yyj4836 < yyrr4836; yyj4836++ {
			yyh4836.ElemContainerState(yyj4836)
			if r.TryDecodeAsNil() {
				yyv4836[yyj4836] = Endpoints{}
			} else {
				yyv4837 := &yyv4836[yyj4836]
				yyv4837.CodecDecodeSelf(d)
			}

		}
		if yyrt4836 {
			for ; yyj4836 < yyl4836; yyj4836++ {
				yyv4836 = append(yyv4836, Endpoints{})
				yyh4836.ElemContainerState(yyj4836)
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = Endpoints{}
				} else {
					yyv4838 := &yyv4836[yyj4836]
					yyv4838.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4836 := 0
		for ; !r.CheckBreak(); yyj4836++ {

			if yyj4836 >= len(yyv4836) {
				yyv4836 = append(yyv4836, Endpoints{}) // var yyz4836 Endpoints
				yyc4836 = true
			}
			yyh4836.ElemContainerState(yyj4836)
			if yyj4836 < len(yyv4836) {
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = Endpoints{}
				} else {
					yyv4839 := &yyv4836[yyj4836]
					yyv4839.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4836 < len(yyv4836) {
			yyv4836 = yyv4836[:yyj4836]
			yyc4836 = true
		} else if yyj4836 == 0 && yyv4836 == nil {
			yyv4836 = []Endpoints{}
			yyc4836 = true
		}
	}
	yyh4836.End()
	if yyc4836 {
		*v = yyv4836
	}
}

func (x codecSelfer1234) encSliceLocalDisk(v []LocalDisk, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4840 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4841 := &yyv4840
		yy4841.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalDisk(v *[]LocalDisk, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4842 := *v
	yyh4842, yyl4842 := z.DecSliceHelperStart()
	var yyc4842 bool
	if yyl4842 == 0 {
		if yyv4842 == nil {
			yyv4842 = []LocalDisk{}
			yyc4842 = true
		} else if len(yyv4842) != 0 {
			yyv4842 = yyv4842[:0]
			yyc4842 = true
		}
	} else if yyl4842 > 0 {
		var yyrr4842, yyrl4842 int
		var yyrt4842 bool
		if yyl4842 > cap(yyv4842) {

			yyrg4842 := len(yyv4842) > 0
			yyv24842 := yyv4842
			yyrl4842, yyrt4842 = z.DecInferLen(yyl4842, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4842 {
				if yyrl4842 <= cap(yyv4842) {
					yyv4842 = yyv4842[:yyrl4842]
				} else {
					yyv4842 = make([]LocalDisk, yyrl4842)
				}
			} else {
				yyv4842 = make([]LocalDisk, yyrl4842)
			}
			yyc4842 = true
			yyrr4842 = len(yyv4842)
			if yyrg4842 {
				copy(yyv4842, yyv24842)
			}
		} else if yyl4842 != len(yyv4842) {
			yyv4842 = yyv4842[:yyl4842]
			yyc4842 = true
		}
		yyj4842 := 0
		for ; yyj4842 < yyrr4842; yyj4842++ {
			yyh4842.ElemContainerState(yyj4842)
			if r.TryDecodeAsNil() {
				yyv4842[yyj4842] = LocalDisk{}
			} else {
				yyv4843 := &yyv4842[yyj4842]
				yyv4843.CodecDecodeSelf(d)
			}

		}
		if yyrt4842 {
			for ; yyj4842 < yyl4842; yyj4842++ {
				yyv4842 = append(yyv4842, LocalDisk{})
				yyh4842.ElemContainerState(yyj4842)
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = LocalDisk{}
				} else {
					yyv4844 := &yyv4842[yyj4842]
					yyv4844.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4842 := 0
		for ; !r.CheckBreak(); yyj4842++ {

			if yyj4842 >= len(yyv4842) {
				yyv4842 = append(yyv4842, LocalDisk{}) // var yyz4842 LocalDisk
				yyc4842 = true
			}
			yyh4842.ElemContainerState(yyj4842)
			if yyj4842 < len(yyv4842) {
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = LocalDisk{}
				} else {
					yyv4845 := &yyv4842[yyj4842]
					yyv4845.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4842 < len(yyv4842) {
			yyv4842 = yyv4842[:yyj4842]
			yyc4842 = true
		} else if yyj4842 == 0 && yyv4842 == nil {
			yyv4842 = []LocalDisk{}
			yyc4842 = true
		}
	}
	yyh4842.End()
	if yyc4842 {
		*v = yyv4842
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4846 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4847 := &yyv4846
		yy4847.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4848 := *v
	yyh4848, yyl4848 := z.DecSliceHelperStart()
	var yyc4848 bool
	if yyl4848 == 0 {
		if yyv4848 == nil {
			yyv4848 = []NodeCondition{}
			yyc4848 = true
		} else if len(yyv4848) != 0 {
			yyv4848 = yyv4848[:0]
			yyc4848 = true
		}
	} else if yyl4848 > 0 {
		var yyrr4848, yyrl4848 int
		var yyrt4848 bool
		if yyl4848 > cap(yyv4848) {

			yyrg4848 := len(yyv4848) > 0
			yyv24848 := yyv4848
			yyrl4848, yyrt4848 = z.DecInferLen(yyl4848, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4848 {
				if yyrl4848 <= cap(yyv4848) {
					yyv4848 = yyv4848[:yyrl4848]
				} else {
					yyv4848 = make([]NodeCondition, yyrl4848)
				}
			} else {
				yyv4848 = make([]NodeCondition, yyrl4848)
			}
			yyc4848 = true
			yyrr4848 = len(yyv4848)
			if yyrg4848 {
				copy(yyv4848, yyv24848)
			}
		} else if yyl4848 != len(yyv4848) {
			yyv4848 = yyv4848[:yyl4848]
			yyc4848 = true
		}
		yyj4848 := 0
		for ; yyj4848 < yyrr4848; yyj4848++ {
			yyh4848.ElemContainerState(yyj4848)
			if r.TryDecodeAsNil() {
				yyv4848[yyj4848] = NodeCondition{}
			} else {
				yyv4849 := &yyv4848[yyj4848]
				yyv4849.CodecDecodeSelf(d)
			}

		}
		if yyrt4848 {
			for ; yyj4848 < yyl4848; yyj4848++ {
				yyv4848 = append(yyv4848, NodeCondition{})
				yyh4848.ElemContainerState(yyj4848)
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = NodeCondition{}
				} else {
					yyv4850 := &yyv4848[yyj4848]
					yyv4850.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4848 := 0
		for ; !r.CheckBreak(); yyj4848++ {

			if yyj4848 >= len(yyv4848) {
				yyv4848 = append(yyv4848, NodeCondition{}) // var yyz4848 NodeCondition
				yyc4848 = true
			}
			yyh4848.ElemContainerState(yyj4848)
			if yyj4848 < len(yyv4848) {
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = NodeCondition{}
				} else {
					yyv4851 := &yyv4848[yyj4848]
					yyv4851.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4848 < len(yyv4848) {
			yyv4848 = yyv4848[:yyj4848]
			yyc4848 = true
		} else if yyj4848 == 0 && yyv4848 == nil {
			yyv4848 = []NodeCondition{}
			yyc4848 = true
		}
	}
	yyh4848.End()
	if yyc4848 {
		*v = yyv4848
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4852 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4853 := &yyv4852
		yy4853.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4854 := *v
	yyh4854, yyl4854 := z.DecSliceHelperStart()
	var yyc4854 bool
	if yyl4854 == 0 {
		if yyv4854 == nil {
			yyv4854 = []NodeAddress{}
			yyc4854 = true
		} else if len(yyv4854) != 0 {
			yyv4854 = yyv4854[:0]
			yyc4854 = true
		}
	} else if yyl4854 > 0 {
		var yyrr4854, yyrl4854 int
		var yyrt4854 bool
		if yyl4854 > cap(yyv4854) {

			yyrg4854 := len(yyv4854) > 0
			yyv24854 := yyv4854
			yyrl4854, yyrt4854 = z.DecInferLen(yyl4854, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4854 {
				if yyrl4854 <= cap(yyv4854) {
					yyv4854 = yyv4854[:yyrl4854]
				} else {
					yyv4854 = make([]NodeAddress, yyrl4854)
				}
			} else {
				yyv4854 = make([]NodeAddress, yyrl4854)
			}
			yyc4854 = true
			yyrr4854 = len(yyv4854)
			if yyrg4854 {
				copy(yyv4854, yyv24854)
			}
		} else if yyl4854 != len(yyv4854) {
			yyv4854 = yyv4854[:yyl4854]
			yyc4854 = true
		}
		yyj4854 := 0
		for ; yyj4854 < yyrr4854; yyj4854++ {
			yyh4854.ElemContainerState(yyj4854)
			if r.TryDecodeAsNil() {
				yyv4854[yyj4854] = NodeAddress{}
			} else {
				yyv4855 := &yyv4854[yyj4854]
				yyv4855.CodecDecodeSelf(d)
			}

		}
		if yyrt4854 {
			for ; yyj4854 < yyl4854; yyj4854++ {
				yyv4854 = append(yyv4854, NodeAddress{})
				yyh4854.ElemContainerState(yyj4854)
				if r.TryDecodeAsNil() {
					yyv4854[yyj4854] = NodeAddress{}
				} else {
					yyv4856 := &yyv4854[yyj4854]
					yyv4856.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4854 := 0
		for ; !r.CheckBreak(); yyj4854++ {

			if yyj4854 >= len(yyv4854) {
				yyv4854 = append(yyv4854, NodeAddress{}) // var yyz4854 NodeAddress
				yyc4854 = true
			}
			yyh4854.ElemContainerState(yyj4854)
			if yyj4854 < len(yyv4854) {
				if r.TryDecodeAsNil() {
					yyv4854[yyj4854] = NodeAddress{}
				} else {
					yyv4857 := &yyv4854[yyj4854]
					yyv4857.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4854 < len(yyv4854) {
			yyv4854 = yyv4854[:yyj4854]
			yyc4854 = true
		} else if yyj4854 == 0 && yyv4854 == nil {
			yyv4854 = []NodeAddress{}
			yyc4854 = true
		}
	}
	yyh4854.End()
	if yyc4854 {
		*v = yyv4854
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4858 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4859 := &yyv4858
		yy4859.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4860 := *v
	yyh4860, yyl4860 := z.DecSliceHelperStart()
	var yyc4860 bool
	if yyl4860 == 0 {
		if yyv4860 == nil {
			yyv4860 = []ContainerImage{}
			yyc4860 = true
		} else if len(yyv4860) != 0 {
			yyv4860 = yyv4860[:0]
			yyc4860 = true
		}
	} else if yyl4860 > 0 {
		var yyrr4860, yyrl4860 int
		var yyrt4860 bool
		if yyl4860 > cap(yyv4860) {

			yyrg4860 := len(yyv4860) > 0
			yyv24860 := yyv4860
			yyrl4860, yyrt4860 = z.DecInferLen(yyl4860, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4860 {
				if yyrl4860 <= cap(yyv4860) {
					yyv4860 = yyv4860[:yyrl4860]
				} else {
					yyv4860 = make([]ContainerImage, yyrl4860)
				}
			} else {
				yyv4860 = make([]ContainerImage, yyrl4860)
			}
			yyc4860 = true
			yyrr4860 = len(yyv4860)
			if yyrg4860 {
				copy(yyv4860, yyv24860)
			}
		} else if yyl4860 != len(yyv4860) {
			yyv4860 = yyv4860[:yyl4860]
			yyc4860 = true
		}
		yyj4860 := 0
		for ; yyj4860 < yyrr4860; yyj4860++ {
			yyh4860.ElemContainerState(yyj4860)
			if r.TryDecodeAsNil() {
				yyv4860[yyj4860] = ContainerImage{}
			} else {
				yyv4861 := &yyv4860[yyj4860]
				yyv4861.CodecDecodeSelf(d)
			}

		}
		if yyrt4860 {
			for ; yyj4860 < yyl4860; yyj4860++ {
				yyv4860 = append(yyv4860, ContainerImage{})
				yyh4860.ElemContainerState(yyj4860)
				if r.TryDecodeAsNil() {
					yyv4860[yyj4860] = ContainerImage{}
				} else {
					yyv4862 := &yyv4860[yyj4860]
					yyv4862.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4860 := 0
		for ; !r.CheckBreak(); yyj4860++ {

			if yyj4860 >= len(yyv4860) {
				yyv4860 = append(yyv4860, ContainerImage{}) // var yyz4860 ContainerImage
				yyc4860 = true
			}
			yyh4860.ElemContainerState(yyj4860)
			if yyj4860 < len(yyv4860) {
				if r.TryDecodeAsNil() {
					yyv4860[yyj4860] = ContainerImage{}
				} else {
					yyv4863 := &yyv4860[yyj4860]
					yyv4863.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4860 < len(yyv4860) {
			yyv4860 = yyv4860[:yyj4860]
			yyc4860 = true
		} else if yyj4860 == 0 && yyv4860 == nil {
			yyv4860 = []ContainerImage{}
			yyc4860 = true
		}
	}
	yyh4860.End()
	if yyc4860 {
		*v = yyv4860
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4864 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4864.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4865 := *v
	yyh4865, yyl4865 := z.DecSliceHelperStart()
	var yyc4865 bool
	if yyl4865 == 0 {
		if yyv4865 == nil {
			yyv4865 = []UniqueVolumeName{}
			yyc4865 = true
		} else if len(yyv4865) != 0 {
			yyv4865 = yyv4865[:0]
			yyc4865 = true
		}
	} else if yyl4865 > 0 {
		var yyrr4865, yyrl4865 int
		var yyrt4865 bool
		if yyl4865 > cap(yyv4865) {

			yyrl4865, yyrt4865 = z.DecInferLen(yyl4865, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4865 {
				if yyrl4865 <= cap(yyv4865) {
					yyv4865 = yyv4865[:yyrl4865]
				} else {
					yyv4865 = make([]UniqueVolumeName, yyrl4865)
				}
			} else {
				yyv4865 = make([]UniqueVolumeName, yyrl4865)
			}
			yyc4865 = true
			yyrr4865 = len(yyv4865)
		} else if yyl4865 != len(yyv4865) {
			yyv4865 = yyv4865[:yyl4865]
			yyc4865 = true
		}
		yyj4865 := 0
		for ; yyj4865 < yyrr4865; yyj4865++ {
			yyh4865.ElemContainerState(yyj4865)
			if r.TryDecodeAsNil() {
				yyv4865[yyj4865] = ""
			} else {
				yyv4865[yyj4865] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4865 {
			for ; yyj4865 < yyl4865; yyj4865++ {
				yyv4865 = append(yyv4865, "")
				yyh4865.ElemContainerState(yyj4865)
				if r.TryDecodeAsNil() {
					yyv4865[yyj4865] = ""
				} else {
					yyv4865[yyj4865] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4865 := 0
		for ; !r.CheckBreak(); yyj4865++ {

			if yyj4865 >= len(yyv4865) {
				yyv4865 = append(yyv4865, "") // var yyz4865 UniqueVolumeName
				yyc4865 = true
			}
			yyh4865.ElemContainerState(yyj4865)
			if yyj4865 < len(yyv4865) {
				if r.TryDecodeAsNil() {
					yyv4865[yyj4865] = ""
				} else {
					yyv4865[yyj4865] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4865 < len(yyv4865) {
			yyv4865 = yyv4865[:yyj4865]
			yyc4865 = true
		} else if yyj4865 == 0 && yyv4865 == nil {
			yyv4865 = []UniqueVolumeName{}
			yyc4865 = true
		}
	}
	yyh4865.End()
	if yyc4865 {
		*v = yyv4865
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4869 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4870 := &yyv4869
		yy4870.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4871 := *v
	yyh4871, yyl4871 := z.DecSliceHelperStart()
	var yyc4871 bool
	if yyl4871 == 0 {
		if yyv4871 == nil {
			yyv4871 = []AttachedVolume{}
			yyc4871 = true
		} else if len(yyv4871) != 0 {
			yyv4871 = yyv4871[:0]
			yyc4871 = true
		}
	} else if yyl4871 > 0 {
		var yyrr4871, yyrl4871 int
		var yyrt4871 bool
		if yyl4871 > cap(yyv4871) {

			yyrg4871 := len(yyv4871) > 0
			yyv24871 := yyv4871
			yyrl4871, yyrt4871 = z.DecInferLen(yyl4871, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4871 {
				if yyrl4871 <= cap(yyv4871) {
					yyv4871 = yyv4871[:yyrl4871]
				} else {
					yyv4871 = make([]AttachedVolume, yyrl4871)
				}
			} else {
				yyv4871 = make([]AttachedVolume, yyrl4871)
			}
			yyc4871 = true
			yyrr4871 = len(yyv4871)
			if yyrg4871 {
				copy(yyv4871, yyv24871)
			}
		} else if yyl4871 != len(yyv4871) {
			yyv4871 = yyv4871[:yyl4871]
			yyc4871 = true
		}
		yyj4871 := 0
		for ; yyj4871 < yyrr4871; yyj4871++ {
			yyh4871.ElemContainerState(yyj4871)
			if r.TryDecodeAsNil() {
				yyv4871[yyj4871] = AttachedVolume{}
			} else {
				yyv4872 := &yyv4871[yyj4871]
				yyv4872.CodecDecodeSelf(d)
			}

		}
		if yyrt4871 {
			for ; yyj4871 < yyl4871; yyj4871++ {
				yyv4871 = append(yyv4871, AttachedVolume{})
				yyh4871.ElemContainerState(yyj4871)
				if r.TryDecodeAsNil() {
					yyv4871[yyj4871] = AttachedVolume{}
				} else {
					yyv4873 := &yyv4871[yyj4871]
					yyv4873.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4871 := 0
		for ; !r.CheckBreak(); yyj4871++ {

			if yyj4871 >= len(yyv4871) {
				yyv4871 = append(yyv4871, AttachedVolume{}) // var yyz4871 AttachedVolume
				yyc4871 = true
			}
			yyh4871.ElemContainerState(yyj4871)
			if yyj4871 < len(yyv4871) {
				if r.TryDecodeAsNil() {
					yyv4871[yyj4871] = AttachedVolume{}
				} else {
					yyv4874 := &yyv4871[yyj4871]
					yyv4874.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4871 < len(yyv4871) {
			yyv4871 = yyv4871[:yyj4871]
			yyc4871 = true
		} else if yyj4871 == 0 && yyv4871 == nil {
			yyv4871 = []AttachedVolume{}
			yyc4871 = true
		}
	}
	yyh4871.End()
	if yyc4871 {
		*v = yyv4871
	}
}

func (x codecSelfer1234) encSliceNUMANode(v []NUMANode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4875 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4876 := &yyv4875
		yy4876.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNUMANode(v *[]NUMANode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4877 := *v
	yyh4877, yyl4877 := z.DecSliceHelperStart()
	var yyc4877 bool
	if yyl4877 == 0 {
		if yyv4877 == nil {
			yyv4877 = []NUMANode{}
			yyc4877 = true
		} else if len(yyv4877) != 0 {
			yyv4877 = yyv4877[:0]
			yyc4877 = true
		}
	} else if yyl4877 > 0 {
		var yyrr4877, yyrl4877 int
		var yyrt4877 bool
		if yyl4877 > cap(yyv4877) {

			yyrg4877 := len(yyv4877) > 0
			yyv24877 := yyv4877
			yyrl4877, yyrt4877 = z.DecInferLen(yyl4877, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4877 {
				if yyrl4877 <= cap(yyv4877) {
					yyv4877 = yyv4877[:yyrl4877]
				} else {
					yyv4877 = make([]NUMANode, yyrl4877)
				}
			} else {
				yyv4877 = make([]NUMANode, yyrl4877)
			}
			yyc4877 = true
			yyrr4877 = len(yyv4877)
			if yyrg4877 {
				copy(yyv4877, yyv24877)
			}
		} else if yyl4877 != len(yyv4877) {
			yyv4877 = yyv4877[:yyl4877]
			yyc4877 = true
		}
		yyj4877 := 0
		for ; yyj4877 < yyrr4877; yyj4877++ {
			yyh4877.ElemContainerState(yyj4877)
			if r.TryDecodeAsNil() {
				yyv4877[yyj4877] = NUMANode{}
			} else {
				yyv4878 := &yyv4877[yyj4877]
				yyv4878.CodecDecodeSelf(d)
			}

		}
		if yyrt4877 {
			for ; yyj4877 < yyl4877; yyj4877++ {
				yyv4877 = append(yyv4877, NUMANode{})
				yyh4877.ElemContainerState(yyj4877)
				if r.TryDecodeAsNil() {
					yyv4877[yyj4877] = NUMANode{}
				} else {
					yyv4879 := &yyv4877[yyj4877]
					yyv4879.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4877 := 0
		for ; !r.CheckBreak(); yyj4877++ {

			if yyj4877 >= len(yyv4877) {
				yyv4877 = append(yyv4877, NUMANode{}) // var yyz4877 NUMANode
				yyc4877 = true
			}
			yyh4877.ElemContainerState(yyj4877)
			if yyj4877 < len(yyv4877) {
				if r.TryDecodeAsNil() {
					yyv4877[yyj4877] = NUMANode{}
				} else {
					yyv4880 := &yyv4877[yyj4877]
					yyv4880.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4877 < len(yyv4877) {
			yyv4877 = yyv4877[:yyj4877]
			yyc4877 = true
		} else if yyj4877 == 0 && yyv4877 == nil {
			yyv4877 = []NUMANode{}
			yyc4877 = true
		}
	}
	yyh4877.End()
	if yyc4877 {
		*v = yyv4877
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4881 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4882 := &yyv4881
		yy4882.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4883 := *v
	yyh4883, yyl4883 := z.DecSliceHelperStart()
	var yyc4883 bool
	if yyl4883 == 0 {
		if yyv4883 == nil {
			yyv4883 = []PreferAvoidPodsEntry{}
			yyc4883 = true
		} else if len(yyv4883) != 0 {
			yyv4883 = yyv4883[:0]
			yyc4883 = true
		}
	} else if yyl4883 > 0 {
		var yyrr4883, yyrl4883 int
		var yyrt4883 bool
		if yyl4883 > cap(yyv4883) {

			yyrg4883 := len(yyv4883) > 0
			yyv24883 := yyv4883
			yyrl4883, yyrt4883 = z.DecInferLen(yyl4883, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4883 {
				if yyrl4883 <= cap(yyv4883) {
					yyv4883 = yyv4883[:yyrl4883]
				} else {
					yyv4883 = make([]PreferAvoidPodsEntry, yyrl4883)
				}
			} else {
				yyv4883 = make([]PreferAvoidPodsEntry, yyrl4883)
			}
			yyc4883 = true
			yyrr4883 = len(yyv4883)
			if yyrg4883 {
				copy(yyv4883, yyv24883)
			}
		} else if yyl4883 != len(yyv4883) {
			yyv4883 = yyv4883[:yyl4883]
			yyc4883 = true
		}
		yyj4883 := 0
		for ; yyj4883 < yyrr4883; yyj4883++ {
			yyh4883.ElemContainerState(yyj4883)
			if r.TryDecodeAsNil() {
				yyv4883[yyj4883] = PreferAvoidPodsEntry{}
			} else {
				yyv4884 := &yyv4883[yyj4883]
				yyv4884.CodecDecodeSelf(d)
			}

		}
		if yyrt4883 {
			for ; yyj4883 < yyl4883; yyj4883++ {
				yyv4883 = append(yyv4883, PreferAvoidPodsEntry{})
				yyh4883.ElemContainerState(yyj4883)
				if r.TryDecodeAsNil() {
					yyv4883[yyj4883] = PreferAvoidPodsEntry{}
				} else {
					yyv4885 := &yyv4883[yyj4883]
					yyv4885.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4883 := 0
		for ; !r.CheckBreak(); yyj4883++ {

			if yyj4883 >= len(yyv4883) {
				yyv4883 = append(yyv4883, PreferAvoidPodsEntry{}) // var yyz4883 PreferAvoidPodsEntry
				yyc4883 = true
			}
			yyh4883.ElemContainerState(yyj4883)
			if yyj4883 < len(yyv4883) {
				if r.TryDecodeAsNil() {
					yyv4883[yyj4883] = PreferAvoidPodsEntry{}
				} else {
					yyv4886 := &yyv4883[yyj4883]
					yyv4886.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4883 < len(yyv4883) {
			yyv4883 = yyv4883[:yyj4883]
			yyc4883 = true
		} else if yyj4883 == 0 && yyv4883 == nil {
			yyv4883 = []PreferAvoidPodsEntry{}
			yyc4883 = true
		}
	}
	yyh4883.End()
	if yyc4883 {
		*v = yyv4883
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4887, yyv4887 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4887.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4888 := &yyv4887
		yym4889 := z.EncBinary()
		_ = yym4889
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4888) {
		} else if !yym4889 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4888)
		} else {
			z.EncFallback(yy4888)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4890 := *v
	yyl4890 := r.ReadMapStart()
	yybh4890 := z.DecBasicHandle()
	if yyv4890 == nil {
		yyrl4890, _ := z.DecInferLen(yyl4890, yybh4890.MaxInitLen, 72)
		yyv4890 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4890)
		*v = yyv4890
	}
	var yymk4890 ResourceName
	var yymv4890 pkg3_resource.Quantity
	var yymg4890 bool
	if yybh4890.MapValueReset {
		yymg4890 = true
	}
	if yyl4890 > 0 {
		for yyj4890 := 0; yyj4890 < yyl4890; yyj4890++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4890 = ""
			} else {
				yymk4890 = ResourceName(r.DecodeString())
			}

			if yymg4890 {
				yymv4890 = yyv4890[yymk4890]
			} else {
				yymv4890 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4890 = pkg3_resource.Quantity{}
			} else {
				yyv4892 := &yymv4890
				yym4893 := z.DecBinary()
				_ = yym4893
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4892) {
				} else if !yym4893 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4892)
				} else {
					z.DecFallback(yyv4892, false)
				}
			}

			if yyv4890 != nil {
				yyv4890[yymk4890] = yymv4890
			}
		}
	} else if yyl4890 < 0 {
		for yyj4890 := 0; !r.CheckBreak(); yyj4890++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4890 = ""
			} else {
				yymk4890 = ResourceName(r.DecodeString())
			}

			if yymg4890 {
				yymv4890 = yyv4890[yymk4890]
			} else {
				yymv4890 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4890 = pkg3_resource.Quantity{}
			} else {
				yyv4895 := &yymv4890
				yym4896 := z.DecBinary()
				_ = yym4896
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4895) {
				} else if !yym4896 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4895)
				} else {
					z.DecFallback(yyv4895, false)
				}
			}

			if yyv4890 != nil {
				yyv4890[yymk4890] = yymv4890
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4897 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4898 := &yyv4897
		yy4898.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4899 := *v
	yyh4899, yyl4899 := z.DecSliceHelperStart()
	var yyc4899 bool
	if yyl4899 == 0 {
		if yyv4899 == nil {
			yyv4899 = []Node{}
			yyc4899 = true
		} else if len(yyv4899) != 0 {
			yyv4899 = yyv4899[:0]
			yyc4899 = true
		}
	} else if yyl4899 > 0 {
		var yyrr4899, yyrl4899 int
		var yyrt4899 bool
		if yyl4899 > cap(yyv4899) {

			yyrg4899 := len(yyv4899) > 0
			yyv24899 := yyv4899
			yyrl4899, yyrt4899 = z.DecInferLen(yyl4899, z.DecBasicHandle().MaxInitLen, 680)
			if yyrt4899 {
				if yyrl4899 <= cap(yyv4899) {
					yyv4899 = yyv4899[:yyrl4899]
				} else {
					yyv4899 = make([]Node, yyrl4899)
				}
			} else {
				yyv4899 = make([]Node, yyrl4899)
			}
			yyc4899 = true
			yyrr4899 = len(yyv4899)
			if yyrg4899 {
				copy(yyv4899, yyv24899)
			}
		} else if yyl4899 != len(yyv4899) {
			yyv4899 = yyv4899[:yyl4899]
			yyc4899 = true
		}
		yyj4899 := 0
		for ; yyj4899 < yyrr4899; yyj4899++ {
			yyh4899.ElemContainerState(yyj4899)
			if r.TryDecodeAsNil() {
				yyv4899[yyj4899] = Node{}
			} else {
				yyv4900 := &yyv4899[yyj4899]
				yyv4900.CodecDecodeSelf(d)
			}

		}
		if yyrt4899 {
			for ; yyj4899 < yyl4899; yyj4899++ {
				yyv4899 = append(yyv4899, Node{})
				yyh4899.ElemContainerState(yyj4899)
				if r.TryDecodeAsNil() {
					yyv4899[yyj4899] = Node{}
				} else {
					yyv4901 := &yyv4899[yyj4899]
					yyv4901.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4899 := 0
		for ; !r.CheckBreak(); yyj4899++ {

			if yyj4899 >= len(yyv4899) {
				yyv4899 = append(yyv4899, Node{}) // var yyz4899 Node
				yyc4899 = true
			}
			yyh4899.ElemContainerState(yyj4899)
			if yyj4899 < len(yyv4899) {
				if r.TryDecodeAsNil() {
					yyv4899[yyj4899] = Node{}
				} else {
					yyv4902 := &yyv4899[yyj4899]
					yyv4902.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4899 < len(yyv4899) {
			yyv4899 = yyv4899[:yyj4899]
			yyc4899 = true
		} else if yyj4899 == 0 && yyv4899 == nil {
			yyv4899 = []Node{}
			yyc4899 = true
		}
	}
	yyh4899.End()
	if yyc4899 {
		*v = yyv4899
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4903 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4903.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4904 := *v
	yyh4904, yyl4904 := z.DecSliceHelperStart()
	var yyc4904 bool
	if yyl4904 == 0 {
		if yyv4904 == nil {
			yyv4904 = []FinalizerName{}
			yyc4904 = true
		} else if len(yyv4904) != 0 {
			yyv4904 = yyv4904[:0]
			yyc4904 = true
		}
	} else if yyl4904 > 0 {
		var yyrr4904, yyrl4904 int
		var yyrt4904 bool
		if yyl4904 > cap(yyv4904) {

			yyrl4904, yyrt4904 = z.DecInferLen(yyl4904, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4904 {
				if yyrl4904 <= cap(yyv4904) {
					yyv4904 = yyv4904[:yyrl4904]
				} else {
					yyv4904 = make([]FinalizerName, yyrl4904)
				}
			} else {
				yyv4904 = make([]FinalizerName, yyrl4904)
			}
			yyc4904 = true
			yyrr4904 = len(yyv4904)
		} else if yyl4904 != len(yyv4904) {
			yyv4904 = yyv4904[:yyl4904]
			yyc4904 = true
		}
		yyj4904 := 0
		for ; yyj4904 < yyrr4904; yyj4904++ {
			yyh4904.ElemContainerState(yyj4904)
			if r.TryDecodeAsNil() {
				yyv4904[yyj4904] = ""
			} else {
				yyv4904[yyj4904] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4904 {
			for ; yyj4904 < yyl4904; yyj4904++ {
				yyv4904 = append(yyv4904, "")
				yyh4904.ElemContainerState(yyj4904)
				if r.TryDecodeAsNil() {
					yyv4904[yyj4904] = ""
				} else {
					yyv4904[yyj4904] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4904 := 0
		for ; !r.CheckBreak(); yyj4904++ {

			if yyj4904 >= len(yyv4904) {
				yyv4904 = append(yyv4904, "") // var yyz4904 FinalizerName
				yyc4904 = true
			}
			yyh4904.ElemContainerState(yyj4904)
			if yyj4904 < len(yyv4904) {
				if r.TryDecodeAsNil() {
					yyv4904[yyj4904] = ""
				} else {
					yyv4904[yyj4904] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4904 < len(yyv4904) {
			yyv4904 = yyv4904[:yyj4904]
			yyc4904 = true
		} else if yyj4904 == 0 && yyv4904 == nil {
			yyv4904 = []FinalizerName{}
			yyc4904 = true
		}
	}
	yyh4904.End()
	if yyc4904 {
		*v = yyv4904
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4908 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4909 := &yyv4908
		yy4909.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4910 := *v
	yyh4910, yyl4910 := z.DecSliceHelperStart()
	var yyc4910 bool
	if yyl4910 == 0 {
		if yyv4910 == nil {
			yyv4910 = []Namespace{}
			yyc4910 = true
		} else if len(yyv4910) != 0 {
			yyv4910 = yyv4910[:0]
			yyc4910 = true
		}
	} else if yyl4910 > 0 {
		var yyrr4910, yyrl4910 int
		var yyrt4910 bool
		if yyl4910 > cap(yyv4910) {

			yyrg4910 := len(yyv4910) > 0
			yyv24910 := yyv4910
			yyrl4910, yyrt4910 = z.DecInferLen(yyl4910, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4910 {
				if yyrl4910 <= cap(yyv4910) {
					yyv4910 = yyv4910[:yyrl4910]
				} else {
					yyv4910 = make([]Namespace, yyrl4910)
				}
			} else {
				yyv4910 = make([]Namespace, yyrl4910)
			}
			yyc4910 = true
			yyrr4910 = len(yyv4910)
			if yyrg4910 {
				copy(yyv4910, yyv24910)
			}
		} else if yyl4910 != len(yyv4910) {
			yyv4910 = yyv4910[:yyl4910]
			yyc4910 = true
		}
		yyj4910 := 0
		for ; yyj4910 < yyrr4910; yyj4910++ {
			yyh4910.ElemContainerState(yyj4910)
			if r.TryDecodeAsNil() {
				yyv4910[yyj4910] = Namespace{}
			} else {
				yyv4911 := &yyv4910[yyj4910]
				yyv4911.CodecDecodeSelf(d)
			}

		}
		if yyrt4910 {
			for ; yyj4910 < yyl4910; yyj4910++ {
				yyv4910 = append(yyv4910, Namespace{})
				yyh4910.ElemContainerState(yyj4910)
				if r.TryDecodeAsNil() {
					yyv4910[yyj4910] = Namespace{}
				} else {
					yyv4912 := &yyv4910[yyj4910]
					yyv4912.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4910 := 0
		for ; !r.CheckBreak(); yyj4910++ {

			if yyj4910 >= len(yyv4910) {
				yyv4910 = append(yyv4910, Namespace{}) // var yyz4910 Namespace
				yyc4910 = true
			}
			yyh4910.ElemContainerState(yyj4910)
			if yyj4910 < len(yyv4910) {
				if r.TryDecodeAsNil() {
					yyv4910[yyj4910] = Namespace{}
				} else {
					yyv4913 := &yyv4910[yyj4910]
					yyv4913.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4910 < len(yyv4910) {
			yyv4910 = yyv4910[:yyj4910]
			yyc4910 = true
		} else if yyj4910 == 0 && yyv4910 == nil {
			yyv4910 = []Namespace{}
			yyc4910 = true
		}
	}
	yyh4910.End()
	if yyc4910 {
		*v = yyv4910
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4914 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4915 := &yyv4914
		yy4915.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4916 := *v
	yyh4916, yyl4916 := z.DecSliceHelperStart()
	var yyc4916 bool
	if yyl4916 == 0 {
		if yyv4916 == nil {
			yyv4916 = []Event{}
			yyc4916 = true
		} else if len(yyv4916) != 0 {
			yyv4916 = yyv4916[:0]
			yyc4916 = true
		}
	} else if yyl4916 > 0 {
		var yyrr4916, yyrl4916 int
		var yyrt4916 bool
		if yyl4916 > cap(yyv4916) {

			yyrg4916 := len(yyv4916) > 0
			yyv24916 := yyv4916
			yyrl4916, yyrt4916 = z.DecInferLen(yyl4916, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4916 {
				if yyrl4916 <= cap(yyv4916) {
					yyv4916 = yyv4916[:yyrl4916]
				} else {
					yyv4916 = make([]Event, yyrl4916)
				}
			} else {
				yyv4916 = make([]Event, yyrl4916)
			}
			yyc4916 = true
			yyrr4916 = len(yyv4916)
			if yyrg4916 {
				copy(yyv4916, yyv24916)
			}
		} else if yyl4916 != len(yyv4916) {
			yyv4916 = yyv4916[:yyl4916]
			yyc4916 = true
		}
		yyj4916 := 0
		for ; yyj4916 < yyrr4916; yyj4916++ {
			yyh4916.ElemContainerState(yyj4916)
			if r.TryDecodeAsNil() {
				yyv4916[yyj4916] = Event{}
			} else {
				yyv4917 := &yyv4916[yyj4916]
				yyv4917.CodecDecodeSelf(d)
			}

		}
		if yyrt4916 {
			for ; yyj4916 < yyl4916; yyj4916++ {
				yyv4916 = append(yyv4916, Event{})
				yyh4916.ElemContainerState(yyj4916)
				if r.TryDecodeAsNil() {
					yyv4916[yyj4916] = Event{}
				} else {
					yyv4918 := &yyv4916[yyj4916]
					yyv4918.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4916 := 0
		for ; !r.CheckBreak(); yyj4916++ {

			if yyj4916 >= len(yyv4916) {
				yyv4916 = append(yyv4916, Event{}) // var yyz4916 Event
				yyc4916 = true
			}
			yyh4916.ElemContainerState(yyj4916)
			if yyj4916 < len(yyv4916) {
				if r.TryDecodeAsNil() {
					yyv4916[yyj4916] = Event{}
				} else {
					yyv4919 := &yyv4916[yyj4916]
					yyv4919.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4916 < len(yyv4916) {
			yyv4916 = yyv4916[:yyj4916]
			yyc4916 = true
		} else if yyj4916 == 0 && yyv4916 == nil {
			yyv4916 = []Event{}
			yyc4916 = true
		}
	}
	yyh4916.End()
	if yyc4916 {
		*v = yyv4916
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4920 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4920 == nil {
			r.EncodeNil()
		} else {
			yym4921 := z.EncBinary()
			_ = yym4921
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4920) {
			} else {
				z.EncFallback(yyv4920)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4922 := *v
	yyh4922, yyl4922 := z.DecSliceHelperStart()
	var yyc4922 bool
	if yyl4922 == 0 {
		if yyv4922 == nil {
			yyv4922 = []pkg7_runtime.Object{}
			yyc4922 = true
		} else if len(yyv4922) != 0 {
			yyv4922 = yyv4922[:0]
			yyc4922 = true
		}
	} else if yyl4922 > 0 {
		var yyrr4922, yyrl4922 int
		var yyrt4922 bool
		if yyl4922 > cap(yyv4922) {

			yyrg4922 := len(yyv4922) > 0
			yyv24922 := yyv4922
			yyrl4922, yyrt4922 = z.DecInferLen(yyl4922, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4922 {
				if yyrl4922 <= cap(yyv4922) {
					yyv4922 = yyv4922[:yyrl4922]
				} else {
					yyv4922 = make([]pkg7_runtime.Object, yyrl4922)
				}
			} else {
				yyv4922 = make([]pkg7_runtime.Object, yyrl4922)
			}
			yyc4922 = true
			yyrr4922 = len(yyv4922)
			if yyrg4922 {
				copy(yyv4922, yyv24922)
			}
		} else if yyl4922 != len(yyv4922) {
			yyv4922 = yyv4922[:yyl4922]
			yyc4922 = true
		}
		yyj4922 := 0
		for ; yyj4922 < yyrr4922; yyj4922++ {
			yyh4922.ElemContainerState(yyj4922)
			if r.TryDecodeAsNil() {
				yyv4922[yyj4922] = nil
			} else {
				yyv4923 := &yyv4922[yyj4922]
				yym4924 := z.DecBinary()
				_ = yym4924
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4923) {
				} else {
					z.DecFallback(yyv4923, true)
				}
			}

		}
		if yyrt4922 {
			for ; yyj4922 < yyl4922; yyj4922++ {
				yyv4922 = append(yyv4922, nil)
				yyh4922.ElemContainerState(yyj4922)
				if r.TryDecodeAsNil() {
					yyv4922[yyj4922] = nil
				} else {
					yyv4925 := &yyv4922[yyj4922]
					yym4926 := z.DecBinary()
					_ = yym4926
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4925) {
					} else {
						z.DecFallback(yyv4925, true)
					}
				}

			}
		}

	} else {
		yyj4922 := 0
		for ; !r.CheckBreak(); yyj4922++ {

			if yyj4922 >= len(yyv4922) {
				yyv4922 = append(yyv4922, nil) // var yyz4922 pkg7_runtime.Object
				yyc4922 = true
			}
			yyh4922.ElemContainerState(yyj4922)
			if yyj4922 < len(yyv4922) {
				if r.TryDecodeAsNil() {
					yyv4922[yyj4922] = nil
				} else {
					yyv4927 := &yyv4922[yyj4922]
					yym4928 := z.DecBinary()
					_ = yym4928
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4927) {
					} else {
						z.DecFallback(yyv4927, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4922 < len(yyv4922) {
			yyv4922 = yyv4922[:yyj4922]
			yyc4922 = true
		} else if yyj4922 == 0 && yyv4922 == nil {
			yyv4922 = []pkg7_runtime.Object{}
			yyc4922 = true
		}
	}
	yyh4922.End()
	if yyc4922 {
		*v = yyv4922
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4929 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4930 := &yyv4929
		yy4930.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4931 := *v
	yyh4931, yyl4931 := z.DecSliceHelperStart()
	var yyc4931 bool
	if yyl4931 == 0 {
		if yyv4931 == nil {
			yyv4931 = []LimitRangeItem{}
			yyc4931 = true
		} else if len(yyv4931) != 0 {
			yyv4931 = yyv4931[:0]
			yyc4931 = true
		}
	} else if yyl4931 > 0 {
		var yyrr4931, yyrl4931 int
		var yyrt4931 bool
		if yyl4931 > cap(yyv4931) {

			yyrg4931 := len(yyv4931) > 0
			yyv24931 := yyv4931
			yyrl4931, yyrt4931 = z.DecInferLen(yyl4931, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4931 {
				if yyrl4931 <= cap(yyv4931) {
					yyv4931 = yyv4931[:yyrl4931]
				} else {
					yyv4931 = make([]LimitRangeItem, yyrl4931)
				}
			} else {
				yyv4931 = make([]LimitRangeItem, yyrl4931)
			}
			yyc4931 = true
			yyrr4931 = len(yyv4931)
			if yyrg4931 {
				copy(yyv4931, yyv24931)
			}
		} else if yyl4931 != len(yyv4931) {
			yyv4931 = yyv4931[:yyl4931]
			yyc4931 = true
		}
		yyj4931 := 0
		for ; yyj4931 < yyrr4931; yyj4931++ {
			yyh4931.ElemContainerState(yyj4931)
			if r.TryDecodeAsNil() {
				yyv4931[yyj4931] = LimitRangeItem{}
			} else {
				yyv4932 := &yyv4931[yyj4931]
				yyv4932.CodecDecodeSelf(d)
			}

		}
		if yyrt4931 {
			for ; yyj4931 < yyl4931; yyj4931++ {
				yyv4931 = append(yyv4931, LimitRangeItem{})
				yyh4931.ElemContainerState(yyj4931)
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = LimitRangeItem{}
				} else {
					yyv4933 := &yyv4931[yyj4931]
					yyv4933.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4931 := 0
		for ; !r.CheckBreak(); yyj4931++ {

			if yyj4931 >= len(yyv4931) {
				yyv4931 = append(yyv4931, LimitRangeItem{}) // var yyz4931 LimitRangeItem
				yyc4931 = true
			}
			yyh4931.ElemContainerState(yyj4931)
			if yyj4931 < len(yyv4931) {
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = LimitRangeItem{}
				} else {
					yyv4934 := &yyv4931[yyj4931]
					yyv4934.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4931 < len(yyv4931) {
			yyv4931 = yyv4931[:yyj4931]
			yyc4931 = true
		} else if yyj4931 == 0 && yyv4931 == nil {
			yyv4931 = []LimitRangeItem{}
			yyc4931 = true
		}
	}
	yyh4931.End()
	if yyc4931 {
		*v = yyv4931
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4935 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4936 := &yyv4935
		yy4936.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4937 := *v
	yyh4937, yyl4937 := z.DecSliceHelperStart()
	var yyc4937 bool
	if yyl4937 == 0 {
		if yyv4937 == nil {
			yyv4937 = []LimitRange{}
			yyc4937 = true
		} else if len(yyv4937) != 0 {
			yyv4937 = yyv4937[:0]
			yyc4937 = true
		}
	} else if yyl4937 > 0 {
		var yyrr4937, yyrl4937 int
		var yyrt4937 bool
		if yyl4937 > cap(yyv4937) {

			yyrg4937 := len(yyv4937) > 0
			yyv24937 := yyv4937
			yyrl4937, yyrt4937 = z.DecInferLen(yyl4937, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4937 {
				if yyrl4937 <= cap(yyv4937) {
					yyv4937 = yyv4937[:yyrl4937]
				} else {
					yyv4937 = make([]LimitRange, yyrl4937)
				}
			} else {
				yyv4937 = make([]LimitRange, yyrl4937)
			}
			yyc4937 = true
			yyrr4937 = len(yyv4937)
			if yyrg4937 {
				copy(yyv4937, yyv24937)
			}
		} else if yyl4937 != len(yyv4937) {
			yyv4937 = yyv4937[:yyl4937]
			yyc4937 = true
		}
		yyj4937 := 0
		for ; yyj4937 < yyrr4937; yyj4937++ {
			yyh4937.ElemContainerState(yyj4937)
			if r.TryDecodeAsNil() {
				yyv4937[yyj4937] = LimitRange{}
			} else {
				yyv4938 := &yyv4937[yyj4937]
				yyv4938.CodecDecodeSelf(d)
			}

		}
		if yyrt4937 {
			for ; yyj4937 < yyl4937; yyj4937++ {
				yyv4937 = append(yyv4937, LimitRange{})
				yyh4937.ElemContainerState(yyj4937)
				if r.TryDecodeAsNil() {
					yyv4937[yyj4937] = LimitRange{}
				} else {
					yyv4939 := &yyv4937[yyj4937]
					yyv4939.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4937 := 0
		for ; !r.CheckBreak(); yyj4937++ {

			if yyj4937 >= len(yyv4937) {
				yyv4937 = append(yyv4937, LimitRange{}) // var yyz4937 LimitRange
				yyc4937 = true
			}
			yyh4937.ElemContainerState(yyj4937)
			if yyj4937 < len(yyv4937) {
				if r.TryDecodeAsNil() {
					yyv4937[yyj4937] = LimitRange{}
				} else {
					yyv4940 := &yyv4937[yyj4937]
					yyv4940.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4937 < len(yyv4937) {
			yyv4937 = yyv4937[:yyj4937]
			yyc4937 = true
		} else if yyj4937 == 0 && yyv4937 == nil {
			yyv4937 = []LimitRange{}
			yyc4937 = true
		}
	}
	yyh4937.End()
	if yyc4937 {
		*v = yyv4937
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4941 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4941.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4942 := *v
	yyh4942, yyl4942 := z.DecSliceHelperStart()
	var yyc4942 bool
	if yyl4942 == 0 {
		if yyv4942 == nil {
			yyv4942 = []ResourceQuotaScope{}
			yyc4942 = true
		} else if len(yyv4942) != 0 {
			yyv4942 = yyv4942[:0]
			yyc4942 = true
		}
	} else if yyl4942 > 0 {
		var yyrr4942, yyrl4942 int
		var yyrt4942 bool
		if yyl4942 > cap(yyv4942) {

			yyrl4942, yyrt4942 = z.DecInferLen(yyl4942, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4942 {
				if yyrl4942 <= cap(yyv4942) {
					yyv4942 = yyv4942[:yyrl4942]
				} else {
					yyv4942 = make([]ResourceQuotaScope, yyrl4942)
				}
			} else {
				yyv4942 = make([]ResourceQuotaScope, yyrl4942)
			}
			yyc4942 = true
			yyrr4942 = len(yyv4942)
		} else if yyl4942 != len(yyv4942) {
			yyv4942 = yyv4942[:yyl4942]
			yyc4942 = true
		}
		yyj4942 := 0
		for ; yyj4942 < yyrr4942; yyj4942++ {
			yyh4942.ElemContainerState(yyj4942)
			if r.TryDecodeAsNil() {
				yyv4942[yyj4942] = ""
			} else {
				yyv4942[yyj4942] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4942 {
			for ; yyj4942 < yyl4942; yyj4942++ {
				yyv4942 = append(yyv4942, "")
				yyh4942.ElemContainerState(yyj4942)
				if r.TryDecodeAsNil() {
					yyv4942[yyj4942] = ""
				} else {
					yyv4942[yyj4942] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4942 := 0
		for ; !r.CheckBreak(); yyj4942++ {

			if yyj4942 >= len(yyv4942) {
				yyv4942 = append(yyv4942, "") // var yyz4942 ResourceQuotaScope
				yyc4942 = true
			}
			yyh4942.ElemContainerState(yyj4942)
			if yyj4942 < len(yyv4942) {
				if r.TryDecodeAsNil() {
					yyv4942[yyj4942] = ""
				} else {
					yyv4942[yyj4942] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4942 < len(yyv4942) {
			yyv4942 = yyv4942[:yyj4942]
			yyc4942 = true
		} else if yyj4942 == 0 && yyv4942 == nil {
			yyv4942 = []ResourceQuotaScope{}
			yyc4942 = true
		}
	}
	yyh4942.End()
	if yyc4942 {
		*v = yyv4942
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4946 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4947 := &yyv4946
		yy4947.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4948 := *v
	yyh4948, yyl4948 := z.DecSliceHelperStart()
	var yyc4948 bool
	if yyl4948 == 0 {
		if yyv4948 == nil {
			yyv4948 = []ResourceQuota{}
			yyc4948 = true
		} else if len(yyv4948) != 0 {
			yyv4948 = yyv4948[:0]
			yyc4948 = true
		}
	} else if yyl4948 > 0 {
		var yyrr4948, yyrl4948 int
		var yyrt4948 bool
		if yyl4948 > cap(yyv4948) {

			yyrg4948 := len(yyv4948) > 0
			yyv24948 := yyv4948
			yyrl4948, yyrt4948 = z.DecInferLen(yyl4948, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4948 {
				if yyrl4948 <= cap(yyv4948) {
					yyv4948 = yyv4948[:yyrl4948]
				} else {
					yyv4948 = make([]ResourceQuota, yyrl4948)
				}
			} else {
				yyv4948 = make([]ResourceQuota, yyrl4948)
			}
			yyc4948 = true
			yyrr4948 = len(yyv4948)
			if yyrg4948 {
				copy(yyv4948, yyv24948)
			}
		} else if yyl4948 != len(yyv4948) {
			yyv4948 = yyv4948[:yyl4948]
			yyc4948 = true
		}
		yyj4948 := 0
		for ; yyj4948 < yyrr4948; yyj4948++ {
			yyh4948.ElemContainerState(yyj4948)
			if r.TryDecodeAsNil() {
				yyv4948[yyj4948] = ResourceQuota{}
			} else {
				yyv4949 := &yyv4948[yyj4948]
				yyv4949.CodecDecodeSelf(d)
			}

		}
		if yyrt4948 {
			for ; yyj4948 < yyl4948; yyj4948++ {
				yyv4948 = append(yyv4948, ResourceQuota{})
				yyh4948.ElemContainerState(yyj4948)
				if r.TryDecodeAsNil() {
					yyv4948[yyj4948] = ResourceQuota{}
				} else {
					yyv4950 := &yyv4948[yyj4948]
					yyv4950.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4948 := 0
		for ; !r.CheckBreak(); yyj4948++ {

			if yyj4948 >= len(yyv4948) {
				yyv4948 = append(yyv4948, ResourceQuota{}) // var yyz4948 ResourceQuota
				yyc4948 = true
			}
			yyh4948.ElemContainerState(yyj4948)
			if yyj4948 < len(yyv4948) {
				if r.TryDecodeAsNil() {
					yyv4948[yyj4948] = ResourceQuota{}
				} else {
					yyv4951 := &yyv4948[yyj4948]
					yyv4951.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4948 < len(yyv4948) {
			yyv4948 = yyv4948[:yyj4948]
			yyc4948 = true
		} else if yyj4948 == 0 && yyv4948 == nil {
			yyv4948 = []ResourceQuota{}
			yyc4948 = true
		}
	}
	yyh4948.End()
	if yyc4948 {
		*v = yyv4948
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4952, yyv4952 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4953 := z.EncBinary()
		_ = yym4953
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4952))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4952 == nil {
			r.EncodeNil()
		} else {
			yym4954 := z.EncBinary()
			_ = yym4954
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4952))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4955 := *v
	yyl4955 := r.ReadMapStart()
	yybh4955 := z.DecBasicHandle()
	if yyv4955 == nil {
		yyrl4955, _ := z.DecInferLen(yyl4955, yybh4955.MaxInitLen, 40)
		yyv4955 = make(map[string][]uint8, yyrl4955)
		*v = yyv4955
	}
	var yymk4955 string
	var yymv4955 []uint8
	var yymg4955 bool
	if yybh4955.MapValueReset {
		yymg4955 = true
	}
	if yyl4955 > 0 {
		for yyj4955 := 0; yyj4955 < yyl4955; yyj4955++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4955 = ""
			} else {
				yymk4955 = string(r.DecodeString())
			}

			if yymg4955 {
				yymv4955 = yyv4955[yymk4955]
			} else {
				yymv4955 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4955 = nil
			} else {
				yyv4957 := &yymv4955
				yym4958 := z.DecBinary()
				_ = yym4958
				if false {
				} else {
					*yyv4957 = r.DecodeBytes(*(*[]byte)(yyv4957), false, false)
				}
			}

			if yyv4955 != nil {
				yyv4955[yymk4955] = yymv4955
			}
		}
	} else if yyl4955 < 0 {
		for yyj4955 := 0; !r.CheckBreak(); yyj4955++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4955 = ""
			} else {
				yymk4955 = string(r.DecodeString())
			}

			if yymg4955 {
				yymv4955 = yyv4955[yymk4955]
			} else {
				yymv4955 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4955 = nil
			} else {
				yyv4960 := &yymv4955
				yym4961 := z.DecBinary()
				_ = yym4961
				if false {
				} else {
					*yyv4960 = r.DecodeBytes(*(*[]byte)(yyv4960), false, false)
				}
			}

			if yyv4955 != nil {
				yyv4955[yymk4955] = yymv4955
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4962 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4963 := &yyv4962
		yy4963.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4964 := *v
	yyh4964, yyl4964 := z.DecSliceHelperStart()
	var yyc4964 bool
	if yyl4964 == 0 {
		if yyv4964 == nil {
			yyv4964 = []Secret{}
			yyc4964 = true
		} else if len(yyv4964) != 0 {
			yyv4964 = yyv4964[:0]
			yyc4964 = true
		}
	} else if yyl4964 > 0 {
		var yyrr4964, yyrl4964 int
		var yyrt4964 bool
		if yyl4964 > cap(yyv4964) {

			yyrg4964 := len(yyv4964) > 0
			yyv24964 := yyv4964
			yyrl4964, yyrt4964 = z.DecInferLen(yyl4964, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4964 {
				if yyrl4964 <= cap(yyv4964) {
					yyv4964 = yyv4964[:yyrl4964]
				} else {
					yyv4964 = make([]Secret, yyrl4964)
				}
			} else {
				yyv4964 = make([]Secret, yyrl4964)
			}
			yyc4964 = true
			yyrr4964 = len(yyv4964)
			if yyrg4964 {
				copy(yyv4964, yyv24964)
			}
		} else if yyl4964 != len(yyv4964) {
			yyv4964 = yyv4964[:yyl4964]
			yyc4964 = true
		}
		yyj4964 := 0
		for ; yyj4964 < yyrr4964; yyj4964++ {
			yyh4964.ElemContainerState(yyj4964)
			if r.TryDecodeAsNil() {
				yyv4964[yyj4964] = Secret{}
			} else {
				yyv4965 := &yyv4964[yyj4964]
				yyv4965.CodecDecodeSelf(d)
			}

		}
		if yyrt4964 {
			for ; yyj4964 < yyl4964; yyj4964++ {
				yyv4964 = append(yyv4964, Secret{})
				yyh4964.ElemContainerState(yyj4964)
				if r.TryDecodeAsNil() {
					yyv4964[yyj4964] = Secret{}
				} else {
					yyv4966 := &yyv4964[yyj4964]
					yyv4966.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4964 := 0
		for ; !r.CheckBreak(); yyj4964++ {

			if yyj4964 >= len(yyv4964) {
				yyv4964 = append(yyv4964, Secret{}) // var yyz4964 Secret
				yyc4964 = true
			}
			yyh4964.ElemContainerState(yyj4964)
			if yyj4964 < len(yyv4964) {
				if r.TryDecodeAsNil() {
					yyv4964[yyj4964] = Secret{}
				} else {
					yyv4967 := &yyv4964[yyj4964]
					yyv4967.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4964 < len(yyv4964) {
			yyv4964 = yyv4964[:yyj4964]
			yyc4964 = true
		} else if yyj4964 == 0 && yyv4964 == nil {
			yyv4964 = []Secret{}
			yyc4964 = true
		}
	}
	yyh4964.End()
	if yyc4964 {
		*v = yyv4964
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4968 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4969 := &yyv4968
		yy4969.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4970 := *v
	yyh4970, yyl4970 := z.DecSliceHelperStart()
	var yyc4970 bool
	if yyl4970 == 0 {
		if yyv4970 == nil {
			yyv4970 = []ConfigMap{}
			yyc4970 = true
		} else if len(yyv4970) != 0 {
			yyv4970 = yyv4970[:0]
			yyc4970 = true
		}
	} else if yyl4970 > 0 {
		var yyrr4970, yyrl4970 int
		var yyrt4970 bool
		if yyl4970 > cap(yyv4970) {

			yyrg4970 := len(yyv4970) > 0
			yyv24970 := yyv4970
			yyrl4970, yyrt4970 = z.DecInferLen(yyl4970, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4970 {
				if yyrl4970 <= cap(yyv4970) {
					yyv4970 = yyv4970[:yyrl4970]
				} else {
					yyv4970 = make([]ConfigMap, yyrl4970)
				}
			} else {
				yyv4970 = make([]ConfigMap, yyrl4970)
			}
			yyc4970 = true
			yyrr4970 = len(yyv4970)
			if yyrg4970 {
				copy(yyv4970, yyv24970)
			}
		} else if yyl4970 != len(yyv4970) {
			yyv4970 = yyv4970[:yyl4970]
			yyc4970 = true
		}
		yyj4970 := 0
		for ; yyj4970 < yyrr4970; yyj4970++ {
			yyh4970.ElemContainerState(yyj4970)
			if r.TryDecodeAsNil() {
				yyv4970[yyj4970] = ConfigMap{}
			} else {
				yyv4971 := &yyv4970[yyj4970]
				yyv4971.CodecDecodeSelf(d)
			}

		}
		if yyrt4970 {
			for ; yyj4970 < yyl4970; yyj4970++ {
				yyv4970 = append(yyv4970, ConfigMap{})
				yyh4970.ElemContainerState(yyj4970)
				if r.TryDecodeAsNil() {
					yyv4970[yyj4970] = ConfigMap{}
				} else {
					yyv4972 := &yyv4970[yyj4970]
					yyv4972.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4970 := 0
		for ; !r.CheckBreak(); yyj4970++ {

			if yyj4970 >= len(yyv4970) {
				yyv4970 = append(yyv4970, ConfigMap{}) // var yyz4970 ConfigMap
				yyc4970 = true
			}
			yyh4970.ElemContainerState(yyj4970)
			if yyj4970 < len(yyv4970) {
				if r.TryDecodeAsNil() {
					yyv4970[yyj4970] = ConfigMap{}
				} else {
					yyv4973 := &yyv4970[yyj4970]
					yyv4973.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4970 < len(yyv4970) {
			yyv4970 = yyv4970[:yyj4970]
			yyc4970 = true
		} else if yyj4970 == 0 && yyv4970 == nil {
			yyv4970 = []ConfigMap{}
			yyc4970 = true
		}
	}
	yyh4970.End()
	if yyc4970 {
		*v = yyv4970
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4974 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4975 := &yyv4974
		yy4975.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4976 := *v
	yyh4976, yyl4976 := z.DecSliceHelperStart()
	var yyc4976 bool
	if yyl4976 == 0 {
		if yyv4976 == nil {
			yyv4976 = []ComponentCondition{}
			yyc4976 = true
		} else if len(yyv4976) != 0 {
			yyv4976 = yyv4976[:0]
			yyc4976 = true
		}
	} else if yyl4976 > 0 {
		var yyrr4976, yyrl4976 int
		var yyrt4976 bool
		if yyl4976 > cap(yyv4976) {

			yyrg4976 := len(yyv4976) > 0
			yyv24976 := yyv4976
			yyrl4976, yyrt4976 = z.DecInferLen(yyl4976, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4976 {
				if yyrl4976 <= cap(yyv4976) {
					yyv4976 = yyv4976[:yyrl4976]
				} else {
					yyv4976 = make([]ComponentCondition, yyrl4976)
				}
			} else {
				yyv4976 = make([]ComponentCondition, yyrl4976)
			}
			yyc4976 = true
			yyrr4976 = len(yyv4976)
			if yyrg4976 {
				copy(yyv4976, yyv24976)
			}
		} else if yyl4976 != len(yyv4976) {
			yyv4976 = yyv4976[:yyl4976]
			yyc4976 = true
		}
		yyj4976 := 0
		for ; yyj4976 < yyrr4976; yyj4976++ {
			yyh4976.ElemContainerState(yyj4976)
			if r.TryDecodeAsNil() {
				yyv4976[yyj4976] = ComponentCondition{}
			} else {
				yyv4977 := &yyv4976[yyj4976]
				yyv4977.CodecDecodeSelf(d)
			}

		}
		if yyrt4976 {
			for ; yyj4976 < yyl4976; yyj4976++ {
				yyv4976 = append(yyv4976, ComponentCondition{})
				yyh4976.ElemContainerState(yyj4976)
				if r.TryDecodeAsNil() {
					yyv4976[yyj4976] = ComponentCondition{}
				} else {
					yyv4978 := &yyv4976[yyj4976]
					yyv4978.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4976 := 0
		for ; !r.CheckBreak(); yyj4976++ {

			if yyj4976 >= len(yyv4976) {
				yyv4976 = append(yyv4976, ComponentCondition{}) // var yyz4976 ComponentCondition
				yyc4976 = true
			}
			yyh4976.ElemContainerState(yyj4976)
			if yyj4976 < len(yyv4976) {
				if r.TryDecodeAsNil() {
					yyv4976[yyj4976] = ComponentCondition{}
				} else {
					yyv4979 := &yyv4976[yyj4976]
					yyv4979.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4976 < len(yyv4976) {
			yyv4976 = yyv4976[:yyj4976]
			yyc4976 = true
		} else if yyj4976 == 0 && yyv4976 == nil {
			yyv4976 = []ComponentCondition{}
			yyc4976 = true
		}
	}
	yyh4976.End()
	if yyc4976 {
		*v = yyv4976
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4980 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4981 := &yyv4980
		yy4981.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4982 := *v
	yyh4982, yyl4982 := z.DecSliceHelperStart()
	var yyc4982 bool
	if yyl4982 == 0 {
		if yyv4982 == nil {
			yyv4982 = []ComponentStatus{}
			yyc4982 = true
		} else if len(yyv4982) != 0 {
			yyv4982 = yyv4982[:0]
			yyc4982 = true
		}
	} else if yyl4982 > 0 {
		var yyrr4982, yyrl4982 int
		var yyrt4982 bool
		if yyl4982 > cap(yyv4982) {

			yyrg4982 := len(yyv4982) > 0
			yyv24982 := yyv4982
			yyrl4982, yyrt4982 = z.DecInferLen(yyl4982, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4982 {
				if yyrl4982 <= cap(yyv4982) {
					yyv4982 = yyv4982[:yyrl4982]
				} else {
					yyv4982 = make([]ComponentStatus, yyrl4982)
				}
			} else {
				yyv4982 = make([]ComponentStatus, yyrl4982)
			}
			yyc4982 = true
			yyrr4982 = len(yyv4982)
			if yyrg4982 {
				copy(yyv4982, yyv24982)
			}
		} else if yyl4982 != len(yyv4982) {
			yyv4982 = yyv4982[:yyl4982]
			yyc4982 = true
		}
		yyj4982 := 0
		for ; yyj4982 < yyrr4982; yyj4982++ {
			yyh4982.ElemContainerState(yyj4982)
			if r.TryDecodeAsNil() {
				yyv4982[yyj4982] = ComponentStatus{}
			} else {
				yyv4983 := &yyv4982[yyj4982]
				yyv4983.CodecDecodeSelf(d)
			}

		}
		if yyrt4982 {
			for ; yyj4982 < yyl4982; yyj4982++ {
				yyv4982 = append(yyv4982, ComponentStatus{})
				yyh4982.ElemContainerState(yyj4982)
				if r.TryDecodeAsNil() {
					yyv4982[yyj4982] = ComponentStatus{}
				} else {
					yyv4984 := &yyv4982[yyj4982]
					yyv4984.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4982 := 0
		for ; !r.CheckBreak(); yyj4982++ {

			if yyj4982 >= len(yyv4982) {
				yyv4982 = append(yyv4982, ComponentStatus{}) // var yyz4982 ComponentStatus
				yyc4982 = true
			}
			yyh4982.ElemContainerState(yyj4982)
			if yyj4982 < len(yyv4982) {
				if r.TryDecodeAsNil() {
					yyv4982[yyj4982] = ComponentStatus{}
				} else {
					yyv4985 := &yyv4982[yyj4982]
					yyv4985.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4982 < len(yyv4982) {
			yyv4982 = yyv4982[:yyj4982]
			yyc4982 = true
		} else if yyj4982 == 0 && yyv4982 == nil {
			yyv4982 = []ComponentStatus{}
			yyc4982 = true
		}
	}
	yyh4982.End()
	if yyc4982 {
		*v = yyv4982
	}
}

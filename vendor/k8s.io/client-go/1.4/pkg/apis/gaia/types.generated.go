/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package gaia

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/client-go/1.4/pkg/api"
	pkg4_resource "k8s.io/client-go/1.4/pkg/api/resource"
	pkg1_unversioned "k8s.io/client-go/1.4/pkg/api/unversioned"
	pkg3_types "k8s.io/client-go/1.4/pkg/types"
	pkg5_intstr "k8s.io/client-go/1.4/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *TApp) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[4] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yy13 := &x.Spec
					yy13.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy14 := &x.Spec
					yy14.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yy16 := &x.Status
					yy16.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy17 := &x.Status
					yy17.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TApp) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TApp) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = TAppSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = TAppStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TApp) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = TAppSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = TAppStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *TAppSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [6]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[0] = x.Replicas != 0
			yyq33[1] = x.Selector != nil
			yyq33[3] = len(x.TemplatePool) != 0
			yyq33[4] = len(x.Statuses) != 0
			yyq33[5] = len(x.Templates) != 0
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(6)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[0] {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq33[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy41 := &x.Template
				yy41.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy42 := &x.Template
				yy42.CodecEncodeSelf(e)
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[3] {
					if x.TemplatePool == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encMapstringapi_PodTemplateSpec((map[string]pkg2_api.PodTemplateSpec)(x.TemplatePool), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("templatePool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TemplatePool == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encMapstringapi_PodTemplateSpec((map[string]pkg2_api.PodTemplateSpec)(x.TemplatePool), e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[4] {
					if x.Statuses == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							h.encMapstringInstanceStatus((map[string]InstanceStatus)(x.Statuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("statuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Statuses == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							h.encMapstringInstanceStatus((map[string]InstanceStatus)(x.Statuses), e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[5] {
					if x.Templates == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							z.F.EncMapStringStringV(x.Templates, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("templates"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Templates == nil {
						r.EncodeNil()
					} else {
						yym51 := z.EncBinary()
						_ = yym51
						if false {
						} else {
							z.F.EncMapStringStringV(x.Templates, false, e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TAppSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TAppSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym57 := z.DecBinary()
				_ = yym57
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv58 := &x.Template
				yyv58.CodecDecodeSelf(d)
			}
		case "templatePool":
			if r.TryDecodeAsNil() {
				x.TemplatePool = nil
			} else {
				yyv59 := &x.TemplatePool
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					h.decMapstringapi_PodTemplateSpec((*map[string]pkg2_api.PodTemplateSpec)(yyv59), d)
				}
			}
		case "statuses":
			if r.TryDecodeAsNil() {
				x.Statuses = nil
			} else {
				yyv61 := &x.Statuses
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					h.decMapstringInstanceStatus((*map[string]InstanceStatus)(yyv61), d)
				}
			}
		case "templates":
			if r.TryDecodeAsNil() {
				x.Templates = nil
			} else {
				yyv63 := &x.Templates
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					z.F.DecMapStringStringX(yyv63, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TAppSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj65 int
	var yyb65 bool
	var yyhl65 bool = l >= 0
	yyj65++
	if yyhl65 {
		yyb65 = yyj65 > l
	} else {
		yyb65 = r.CheckBreak()
	}
	if yyb65 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj65++
	if yyhl65 {
		yyb65 = yyj65 > l
	} else {
		yyb65 = r.CheckBreak()
	}
	if yyb65 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj65++
	if yyhl65 {
		yyb65 = yyj65 > l
	} else {
		yyb65 = r.CheckBreak()
	}
	if yyb65 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv69 := &x.Template
		yyv69.CodecDecodeSelf(d)
	}
	yyj65++
	if yyhl65 {
		yyb65 = yyj65 > l
	} else {
		yyb65 = r.CheckBreak()
	}
	if yyb65 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TemplatePool = nil
	} else {
		yyv70 := &x.TemplatePool
		yym71 := z.DecBinary()
		_ = yym71
		if false {
		} else {
			h.decMapstringapi_PodTemplateSpec((*map[string]pkg2_api.PodTemplateSpec)(yyv70), d)
		}
	}
	yyj65++
	if yyhl65 {
		yyb65 = yyj65 > l
	} else {
		yyb65 = r.CheckBreak()
	}
	if yyb65 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Statuses = nil
	} else {
		yyv72 := &x.Statuses
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			h.decMapstringInstanceStatus((*map[string]InstanceStatus)(yyv72), d)
		}
	}
	yyj65++
	if yyhl65 {
		yyb65 = yyj65 > l
	} else {
		yyb65 = r.CheckBreak()
	}
	if yyb65 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Templates = nil
	} else {
		yyv74 := &x.Templates
		yym75 := z.DecBinary()
		_ = yym75
		if false {
		} else {
			z.F.DecMapStringStringX(yyv74, false, d)
		}
	}
	for {
		yyj65++
		if yyhl65 {
			yyb65 = yyj65 > l
		} else {
			yyb65 = r.CheckBreak()
		}
		if yyb65 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj65-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym76 := z.EncBinary()
	_ = yym76
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym77 := z.DecBinary()
	_ = yym77
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x AppStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym78 := z.EncBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AppStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym79 := z.DecBinary()
	_ = yym79
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TAppStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym80 := z.EncBinary()
		_ = yym80
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep81 := !z.EncBinary()
			yy2arr81 := z.EncBasicHandle().StructToArray
			var yyq81 [5]bool
			_, _, _ = yysep81, yyq81, yy2arr81
			const yyr81 bool = false
			yyq81[0] = x.ObservedGeneration != 0
			yyq81[2] = x.AppStatus != ""
			yyq81[3] = len(x.Statuses) != 0
			yyq81[4] = len(x.Templates) != 0
			var yynn81 int
			if yyr81 || yy2arr81 {
				r.EncodeArrayStart(5)
			} else {
				yynn81 = 1
				for _, b := range yyq81 {
					if b {
						yynn81++
					}
				}
				r.EncodeMapStart(yynn81)
				yynn81 = 0
			}
			if yyr81 || yy2arr81 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq81[0] {
					yym83 := z.EncBinary()
					_ = yym83
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq81[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr81 || yy2arr81 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym87 := z.EncBinary()
				_ = yym87
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr81 || yy2arr81 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq81[2] {
					x.AppStatus.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq81[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("appStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.AppStatus.CodecEncodeSelf(e)
				}
			}
			if yyr81 || yy2arr81 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq81[3] {
					if x.Statuses == nil {
						r.EncodeNil()
					} else {
						yym90 := z.EncBinary()
						_ = yym90
						if false {
						} else {
							h.encMapstringInstanceStatus((map[string]InstanceStatus)(x.Statuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq81[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("statuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Statuses == nil {
						r.EncodeNil()
					} else {
						yym91 := z.EncBinary()
						_ = yym91
						if false {
						} else {
							h.encMapstringInstanceStatus((map[string]InstanceStatus)(x.Statuses), e)
						}
					}
				}
			}
			if yyr81 || yy2arr81 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq81[4] {
					if x.Templates == nil {
						r.EncodeNil()
					} else {
						yym93 := z.EncBinary()
						_ = yym93
						if false {
						} else {
							z.F.EncMapStringStringV(x.Templates, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq81[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("templates"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Templates == nil {
						r.EncodeNil()
					} else {
						yym94 := z.EncBinary()
						_ = yym94
						if false {
						} else {
							z.F.EncMapStringStringV(x.Templates, false, e)
						}
					}
				}
			}
			if yyr81 || yy2arr81 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TAppStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TAppStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "appStatus":
			if r.TryDecodeAsNil() {
				x.AppStatus = ""
			} else {
				x.AppStatus = AppStatus(r.DecodeString())
			}
		case "statuses":
			if r.TryDecodeAsNil() {
				x.Statuses = nil
			} else {
				yyv101 := &x.Statuses
				yym102 := z.DecBinary()
				_ = yym102
				if false {
				} else {
					h.decMapstringInstanceStatus((*map[string]InstanceStatus)(yyv101), d)
				}
			}
		case "templates":
			if r.TryDecodeAsNil() {
				x.Templates = nil
			} else {
				yyv103 := &x.Templates
				yym104 := z.DecBinary()
				_ = yym104
				if false {
				} else {
					z.F.DecMapStringStringX(yyv103, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TAppStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj105 int
	var yyb105 bool
	var yyhl105 bool = l >= 0
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AppStatus = ""
	} else {
		x.AppStatus = AppStatus(r.DecodeString())
	}
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Statuses = nil
	} else {
		yyv109 := &x.Statuses
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			h.decMapstringInstanceStatus((*map[string]InstanceStatus)(yyv109), d)
		}
	}
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Templates = nil
	} else {
		yyv111 := &x.Templates
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			z.F.DecMapStringStringX(yyv111, false, d)
		}
	}
	for {
		yyj105++
		if yyhl105 {
			yyb105 = yyj105 > l
		} else {
			yyb105 = r.CheckBreak()
		}
		if yyb105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *TAppList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym113 := z.EncBinary()
		_ = yym113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep114 := !z.EncBinary()
			yy2arr114 := z.EncBasicHandle().StructToArray
			var yyq114 [4]bool
			_, _, _ = yysep114, yyq114, yy2arr114
			const yyr114 bool = false
			yyq114[0] = x.Kind != ""
			yyq114[1] = x.APIVersion != ""
			yyq114[2] = true
			var yynn114 int
			if yyr114 || yy2arr114 {
				r.EncodeArrayStart(4)
			} else {
				yynn114 = 1
				for _, b := range yyq114 {
					if b {
						yynn114++
					}
				}
				r.EncodeMapStart(yynn114)
				yynn114 = 0
			}
			if yyr114 || yy2arr114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq114[0] {
					yym116 := z.EncBinary()
					_ = yym116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq114[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym117 := z.EncBinary()
					_ = yym117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr114 || yy2arr114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq114[1] {
					yym119 := z.EncBinary()
					_ = yym119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq114[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym120 := z.EncBinary()
					_ = yym120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr114 || yy2arr114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq114[2] {
					yy122 := &x.ListMeta
					yym123 := z.EncBinary()
					_ = yym123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy122) {
					} else {
						z.EncFallback(yy122)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq114[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy124 := &x.ListMeta
					yym125 := z.EncBinary()
					_ = yym125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy124) {
					} else {
						z.EncFallback(yy124)
					}
				}
			}
			if yyr114 || yy2arr114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym127 := z.EncBinary()
					_ = yym127
					if false {
					} else {
						h.encSliceTApp(([]TApp)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym128 := z.EncBinary()
					_ = yym128
					if false {
					} else {
						h.encSliceTApp(([]TApp)(x.Items), e)
					}
				}
			}
			if yyr114 || yy2arr114 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TAppList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TAppList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv134 := &x.ListMeta
				yym135 := z.DecBinary()
				_ = yym135
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv134) {
				} else {
					z.DecFallback(yyv134, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv136 := &x.Items
				yym137 := z.DecBinary()
				_ = yym137
				if false {
				} else {
					h.decSliceTApp((*[]TApp)(yyv136), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TAppList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj138 int
	var yyb138 bool
	var yyhl138 bool = l >= 0
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv141 := &x.ListMeta
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv141) {
		} else {
			z.DecFallback(yyv141, false)
		}
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv143 := &x.Items
		yym144 := z.DecBinary()
		_ = yym144
		if false {
		} else {
			h.decSliceTApp((*[]TApp)(yyv143), d)
		}
	}
	for {
		yyj138++
		if yyhl138 {
			yyb138 = yyj138 > l
		} else {
			yyb138 = r.CheckBreak()
		}
		if yyb138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encMapstringapi_PodTemplateSpec(v map[string]pkg2_api.PodTemplateSpec, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk145, yyv145 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk145))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy147 := &yyv145
		yy147.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringapi_PodTemplateSpec(v *map[string]pkg2_api.PodTemplateSpec, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv148 := *v
	yyl148 := r.ReadMapStart()
	yybh148 := z.DecBasicHandle()
	if yyv148 == nil {
		yyrl148, _ := z.DecInferLen(yyl148, yybh148.MaxInitLen, 464)
		yyv148 = make(map[string]pkg2_api.PodTemplateSpec, yyrl148)
		*v = yyv148
	}
	var yymk148 string
	var yymv148 pkg2_api.PodTemplateSpec
	var yymg148 bool
	if yybh148.MapValueReset {
		yymg148 = true
	}
	if yyl148 > 0 {
		for yyj148 := 0; yyj148 < yyl148; yyj148++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk148 = ""
			} else {
				yymk148 = string(r.DecodeString())
			}

			if yymg148 {
				yymv148 = yyv148[yymk148]
			} else {
				yymv148 = pkg2_api.PodTemplateSpec{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv148 = pkg2_api.PodTemplateSpec{}
			} else {
				yyv150 := &yymv148
				yyv150.CodecDecodeSelf(d)
			}

			if yyv148 != nil {
				yyv148[yymk148] = yymv148
			}
		}
	} else if yyl148 < 0 {
		for yyj148 := 0; !r.CheckBreak(); yyj148++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk148 = ""
			} else {
				yymk148 = string(r.DecodeString())
			}

			if yymg148 {
				yymv148 = yyv148[yymk148]
			} else {
				yymv148 = pkg2_api.PodTemplateSpec{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv148 = pkg2_api.PodTemplateSpec{}
			} else {
				yyv152 := &yymv148
				yyv152.CodecDecodeSelf(d)
			}

			if yyv148 != nil {
				yyv148[yymk148] = yymv148
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encMapstringInstanceStatus(v map[string]InstanceStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk153, yyv153 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym154 := z.EncBinary()
		_ = yym154
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk153))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yyv153.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringInstanceStatus(v *map[string]InstanceStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv155 := *v
	yyl155 := r.ReadMapStart()
	yybh155 := z.DecBasicHandle()
	if yyv155 == nil {
		yyrl155, _ := z.DecInferLen(yyl155, yybh155.MaxInitLen, 32)
		yyv155 = make(map[string]InstanceStatus, yyrl155)
		*v = yyv155
	}
	var yymk155 string
	var yymv155 InstanceStatus
	var yymg155 bool
	if yybh155.MapValueReset {
	}
	if yyl155 > 0 {
		for yyj155 := 0; yyj155 < yyl155; yyj155++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk155 = ""
			} else {
				yymk155 = string(r.DecodeString())
			}

			if yymg155 {
				yymv155 = yyv155[yymk155]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv155 = ""
			} else {
				yymv155 = InstanceStatus(r.DecodeString())
			}

			if yyv155 != nil {
				yyv155[yymk155] = yymv155
			}
		}
	} else if yyl155 < 0 {
		for yyj155 := 0; !r.CheckBreak(); yyj155++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk155 = ""
			} else {
				yymk155 = string(r.DecodeString())
			}

			if yymg155 {
				yymv155 = yyv155[yymk155]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv155 = ""
			} else {
				yymv155 = InstanceStatus(r.DecodeString())
			}

			if yyv155 != nil {
				yyv155[yymk155] = yymv155
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceTApp(v []TApp, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv160 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy161 := &yyv160
		yy161.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceTApp(v *[]TApp, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv162 := *v
	yyh162, yyl162 := z.DecSliceHelperStart()
	var yyc162 bool
	if yyl162 == 0 {
		if yyv162 == nil {
			yyv162 = []TApp{}
			yyc162 = true
		} else if len(yyv162) != 0 {
			yyv162 = yyv162[:0]
			yyc162 = true
		}
	} else if yyl162 > 0 {
		var yyrr162, yyrl162 int
		var yyrt162 bool
		if yyl162 > cap(yyv162) {

			yyrg162 := len(yyv162) > 0
			yyv2162 := yyv162
			yyrl162, yyrt162 = z.DecInferLen(yyl162, z.DecBasicHandle().MaxInitLen, 792)
			if yyrt162 {
				if yyrl162 <= cap(yyv162) {
					yyv162 = yyv162[:yyrl162]
				} else {
					yyv162 = make([]TApp, yyrl162)
				}
			} else {
				yyv162 = make([]TApp, yyrl162)
			}
			yyc162 = true
			yyrr162 = len(yyv162)
			if yyrg162 {
				copy(yyv162, yyv2162)
			}
		} else if yyl162 != len(yyv162) {
			yyv162 = yyv162[:yyl162]
			yyc162 = true
		}
		yyj162 := 0
		for ; yyj162 < yyrr162; yyj162++ {
			yyh162.ElemContainerState(yyj162)
			if r.TryDecodeAsNil() {
				yyv162[yyj162] = TApp{}
			} else {
				yyv163 := &yyv162[yyj162]
				yyv163.CodecDecodeSelf(d)
			}

		}
		if yyrt162 {
			for ; yyj162 < yyl162; yyj162++ {
				yyv162 = append(yyv162, TApp{})
				yyh162.ElemContainerState(yyj162)
				if r.TryDecodeAsNil() {
					yyv162[yyj162] = TApp{}
				} else {
					yyv164 := &yyv162[yyj162]
					yyv164.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj162 := 0
		for ; !r.CheckBreak(); yyj162++ {

			if yyj162 >= len(yyv162) {
				yyv162 = append(yyv162, TApp{}) // var yyz162 TApp
				yyc162 = true
			}
			yyh162.ElemContainerState(yyj162)
			if yyj162 < len(yyv162) {
				if r.TryDecodeAsNil() {
					yyv162[yyj162] = TApp{}
				} else {
					yyv165 := &yyv162[yyj162]
					yyv165.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj162 < len(yyv162) {
			yyv162 = yyv162[:yyj162]
			yyc162 = true
		} else if yyj162 == 0 && yyv162 == nil {
			yyv162 = []TApp{}
			yyc162 = true
		}
	}
	yyh162.End()
	if yyc162 {
		*v = yyv162
	}
}

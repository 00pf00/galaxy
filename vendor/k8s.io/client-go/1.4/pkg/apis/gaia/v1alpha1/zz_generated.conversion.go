// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1alpha1

import (
	api "k8s.io/client-go/1.4/pkg/api"
	v1 "k8s.io/client-go/1.4/pkg/api/v1"
	gaia "k8s.io/client-go/1.4/pkg/apis/gaia"
	conversion "k8s.io/client-go/1.4/pkg/conversion"
	runtime "k8s.io/client-go/1.4/pkg/runtime"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1alpha1_TApp_To_gaia_TApp,
		Convert_gaia_TApp_To_v1alpha1_TApp,
		Convert_v1alpha1_TAppList_To_gaia_TAppList,
		Convert_gaia_TAppList_To_v1alpha1_TAppList,
		Convert_v1alpha1_TAppSpec_To_gaia_TAppSpec,
		Convert_gaia_TAppSpec_To_v1alpha1_TAppSpec,
		Convert_v1alpha1_TAppStatus_To_gaia_TAppStatus,
		Convert_gaia_TAppStatus_To_v1alpha1_TAppStatus,
	)
}

func autoConvert_v1alpha1_TApp_To_gaia_TApp(in *TApp, out *gaia.TApp, s conversion.Scope) error {
	SetDefaults_TApp(in)
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1alpha1_TAppSpec_To_gaia_TAppSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_TAppStatus_To_gaia_TAppStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_TApp_To_gaia_TApp(in *TApp, out *gaia.TApp, s conversion.Scope) error {
	return autoConvert_v1alpha1_TApp_To_gaia_TApp(in, out, s)
}

func autoConvert_gaia_TApp_To_v1alpha1_TApp(in *gaia.TApp, out *TApp, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_gaia_TAppSpec_To_v1alpha1_TAppSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_gaia_TAppStatus_To_v1alpha1_TAppStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_gaia_TApp_To_v1alpha1_TApp(in *gaia.TApp, out *TApp, s conversion.Scope) error {
	return autoConvert_gaia_TApp_To_v1alpha1_TApp(in, out, s)
}

func autoConvert_v1alpha1_TAppList_To_gaia_TAppList(in *TAppList, out *gaia.TAppList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]gaia.TApp, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_TApp_To_gaia_TApp(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_TAppList_To_gaia_TAppList(in *TAppList, out *gaia.TAppList, s conversion.Scope) error {
	return autoConvert_v1alpha1_TAppList_To_gaia_TAppList(in, out, s)
}

func autoConvert_gaia_TAppList_To_v1alpha1_TAppList(in *gaia.TAppList, out *TAppList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TApp, len(*in))
		for i := range *in {
			if err := Convert_gaia_TApp_To_v1alpha1_TApp(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_gaia_TAppList_To_v1alpha1_TAppList(in *gaia.TAppList, out *TAppList, s conversion.Scope) error {
	return autoConvert_gaia_TAppList_To_v1alpha1_TAppList(in, out, s)
}

func autoConvert_v1alpha1_TAppSpec_To_gaia_TAppSpec(in *TAppSpec, out *gaia.TAppSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	out.Selector = in.Selector
	if err := v1.Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
		return err
	}
	if in.TemplatePool != nil {
		in, out := &in.TemplatePool, &out.TemplatePool
		*out = make(map[string]api.PodTemplateSpec, len(*in))
		for key, val := range *in {
			newVal := new(api.PodTemplateSpec)
			if err := v1.Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.TemplatePool = nil
	}
	if in.Statuses != nil {
		in, out := &in.Statuses, &out.Statuses
		*out = make(map[string]gaia.InstanceStatus, len(*in))
		for key, val := range *in {
			(*out)[key] = gaia.InstanceStatus(val)
		}
	} else {
		out.Statuses = nil
	}
	out.Templates = in.Templates
	return nil
}

func Convert_v1alpha1_TAppSpec_To_gaia_TAppSpec(in *TAppSpec, out *gaia.TAppSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_TAppSpec_To_gaia_TAppSpec(in, out, s)
}

func autoConvert_gaia_TAppSpec_To_v1alpha1_TAppSpec(in *gaia.TAppSpec, out *TAppSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	out.Selector = in.Selector
	if err := v1.Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
		return err
	}
	if in.TemplatePool != nil {
		in, out := &in.TemplatePool, &out.TemplatePool
		*out = make(map[string]v1.PodTemplateSpec, len(*in))
		for key, val := range *in {
			newVal := new(v1.PodTemplateSpec)
			if err := v1.Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.TemplatePool = nil
	}
	if in.Statuses != nil {
		in, out := &in.Statuses, &out.Statuses
		*out = make(map[string]InstanceStatus, len(*in))
		for key, val := range *in {
			(*out)[key] = InstanceStatus(val)
		}
	} else {
		out.Statuses = nil
	}
	out.Templates = in.Templates
	return nil
}

func Convert_gaia_TAppSpec_To_v1alpha1_TAppSpec(in *gaia.TAppSpec, out *TAppSpec, s conversion.Scope) error {
	return autoConvert_gaia_TAppSpec_To_v1alpha1_TAppSpec(in, out, s)
}

func autoConvert_v1alpha1_TAppStatus_To_gaia_TAppStatus(in *TAppStatus, out *gaia.TAppStatus, s conversion.Scope) error {
	out.ObservedGeneration = in.ObservedGeneration
	out.Replicas = in.Replicas
	out.AppStatus = gaia.AppStatus(in.AppStatus)
	if in.Statuses != nil {
		in, out := &in.Statuses, &out.Statuses
		*out = make(map[string]gaia.InstanceStatus, len(*in))
		for key, val := range *in {
			(*out)[key] = gaia.InstanceStatus(val)
		}
	} else {
		out.Statuses = nil
	}
	out.Templates = in.Templates
	return nil
}

func Convert_v1alpha1_TAppStatus_To_gaia_TAppStatus(in *TAppStatus, out *gaia.TAppStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_TAppStatus_To_gaia_TAppStatus(in, out, s)
}

func autoConvert_gaia_TAppStatus_To_v1alpha1_TAppStatus(in *gaia.TAppStatus, out *TAppStatus, s conversion.Scope) error {
	out.ObservedGeneration = in.ObservedGeneration
	out.Replicas = in.Replicas
	out.AppStatus = AppStatus(in.AppStatus)
	if in.Statuses != nil {
		in, out := &in.Statuses, &out.Statuses
		*out = make(map[string]InstanceStatus, len(*in))
		for key, val := range *in {
			(*out)[key] = InstanceStatus(val)
		}
	} else {
		out.Statuses = nil
	}
	out.Templates = in.Templates
	return nil
}

func Convert_gaia_TAppStatus_To_v1alpha1_TAppStatus(in *gaia.TAppStatus, out *TAppStatus, s conversion.Scope) error {
	return autoConvert_gaia_TAppStatus_To_v1alpha1_TAppStatus(in, out, s)
}

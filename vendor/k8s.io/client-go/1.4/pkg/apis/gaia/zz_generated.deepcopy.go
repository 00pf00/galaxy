// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package gaia

import (
	api "k8s.io/client-go/1.4/pkg/api"
	unversioned "k8s.io/client-go/1.4/pkg/api/unversioned"
	conversion "k8s.io/client-go/1.4/pkg/conversion"
	runtime "k8s.io/client-go/1.4/pkg/runtime"
	reflect "reflect"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_gaia_TApp, InType: reflect.TypeOf(&TApp{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_gaia_TAppList, InType: reflect.TypeOf(&TAppList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_gaia_TAppSpec, InType: reflect.TypeOf(&TAppSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_gaia_TAppStatus, InType: reflect.TypeOf(&TAppStatus{})},
	)
}

func DeepCopy_gaia_TApp(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TApp)
		out := out.(*TApp)
		out.TypeMeta = in.TypeMeta
		if err := api.DeepCopy_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, c); err != nil {
			return err
		}
		if err := DeepCopy_gaia_TAppSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		if err := DeepCopy_gaia_TAppStatus(&in.Status, &out.Status, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_gaia_TAppList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TAppList)
		out := out.(*TAppList)
		out.TypeMeta = in.TypeMeta
		out.ListMeta = in.ListMeta
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]TApp, len(*in))
			for i := range *in {
				if err := DeepCopy_gaia_TApp(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		} else {
			out.Items = nil
		}
		return nil
	}
}

func DeepCopy_gaia_TAppSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TAppSpec)
		out := out.(*TAppSpec)
		out.Replicas = in.Replicas
		if in.Selector != nil {
			in, out := &in.Selector, &out.Selector
			*out = new(unversioned.LabelSelector)
			if err := unversioned.DeepCopy_unversioned_LabelSelector(*in, *out, c); err != nil {
				return err
			}
		} else {
			out.Selector = nil
		}
		if err := api.DeepCopy_api_PodTemplateSpec(&in.Template, &out.Template, c); err != nil {
			return err
		}
		if in.TemplatePool != nil {
			in, out := &in.TemplatePool, &out.TemplatePool
			*out = make(map[string]api.PodTemplateSpec)
			for key, val := range *in {
				newVal := new(api.PodTemplateSpec)
				if err := api.DeepCopy_api_PodTemplateSpec(&val, newVal, c); err != nil {
					return err
				}
				(*out)[key] = *newVal
			}
		} else {
			out.TemplatePool = nil
		}
		if in.Statuses != nil {
			in, out := &in.Statuses, &out.Statuses
			*out = make(map[string]InstanceStatus)
			for key, val := range *in {
				(*out)[key] = val
			}
		} else {
			out.Statuses = nil
		}
		if in.Templates != nil {
			in, out := &in.Templates, &out.Templates
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		} else {
			out.Templates = nil
		}
		return nil
	}
}

func DeepCopy_gaia_TAppStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TAppStatus)
		out := out.(*TAppStatus)
		out.ObservedGeneration = in.ObservedGeneration
		out.Replicas = in.Replicas
		out.AppStatus = in.AppStatus
		if in.Statuses != nil {
			in, out := &in.Statuses, &out.Statuses
			*out = make(map[string]InstanceStatus)
			for key, val := range *in {
				(*out)[key] = val
			}
		} else {
			out.Statuses = nil
		}
		if in.Templates != nil {
			in, out := &in.Templates, &out.Templates
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		} else {
			out.Templates = nil
		}
		return nil
	}
}
